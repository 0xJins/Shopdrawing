<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fwctl="clr-namespace:Microsoft.Expression.Framework.Controls;assembly=Microsoft.Expression.Framework"
                    xmlns:ui="clr-namespace:Microsoft.Expression.DesignSurface.UserInterface.Triggers"
                    xmlns:automation="clr-namespace:Microsoft.Expression.Framework.Diagnostics;assembly=Microsoft.Expression.Framework"
                    x:Uid="Resources">
  <Style x:Key="Link" x:Uid="Style_18" TargetType="{x:Type Hyperlink}">
    <Setter x:Uid="Setter_102" Property="TextElement.Foreground" Value="{DynamicResource WhiteBrush}"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_12" Property="ContentElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_103" Property="TextElement.Foreground" Value="{DynamicResource Text1Brush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionTreeViewItemStyle" TargetType="{x:Type TreeViewItem}" x:Uid="Style_1">
    <Setter Property="Control.Background" x:Uid="Setter_1" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment" x:Uid="Setter_2"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}, AncestorLevel=1}}"/>
    <Setter Property="Control.VerticalContentAlignment" x:Uid="Setter_3"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}, AncestorLevel=1}}"/>
    <Setter Property="Control.Padding" x:Uid="Setter_4" Value="1,0,0,0"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
            x:Uid="Setter_5"/>
    <Setter Property="Control.Template" x:Uid="Setter_6">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}" x:Uid="ControlTemplate_1">
          <Grid x:Uid="Grid_2">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" MinWidth="19" x:Uid="ColumnDefinition_1"/>
              <ColumnDefinition Width="*" x:Uid="ColumnDefinition_2"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" x:Uid="RowDefinition_1"/>
              <RowDefinition x:Uid="RowDefinition_2"/>
            </Grid.RowDefinitions>
            <Border FrameworkElement.Name="Bd" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="3"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" x:Uid="Border_1"/>
            <ToggleButton FrameworkElement.Name="Expander" ButtonBase.ClickMode="Press" x:Uid="ToggleButton_1"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type ToggleButton}" x:Uid="Style_2">
                  <Setter Property="UIElement.Focusable" x:Uid="Setter_7" Value="false"/>
                  <Setter Property="FrameworkElement.Width" x:Uid="Setter_8" Value="19"/>
                  <Setter Property="FrameworkElement.Height" x:Uid="Setter_9" Value="13"/>
                  <Setter Property="Control.Template" x:Uid="Setter_10">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ToggleButton}" x:Uid="ControlTemplate_2">
                        <Border FrameworkElement.Width="19" FrameworkElement.Height="13" Background="#00FFFFFF" x:Uid="Border_2">
                          <Border FrameworkElement.Width="9" FrameworkElement.Height="9" UIElement.SnapsToDevicePixels="true"
                                  BorderBrush="#FF7898B5" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" x:Uid="Border_3">
                            <Border.Background>
                              <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" x:Uid="LinearGradientBrush_1">
                                <GradientStop Color="#FFFFFFFF" Offset="0.2" x:Uid="GradientStop_1"/>
                                <GradientStop Color="#FFC0B7A6" Offset="1" x:Uid="GradientStop_2"/>
                              </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath" Shape.Fill="#FF000000" FrameworkElement.Margin="1,1,1,1"
                                  Data="M 0,2 L 0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2 Z" x:Uid="Path_1"/>
                          </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                          <Trigger x:Uid="Trigger_1" Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" x:Uid="Setter_11" Property="Path.Data" Value="M 0,2 L 0,3 5,3 5,2 Z"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Style>
            </ToggleButton>
            <ContentPresenter FrameworkElement.Name="PART_Header" Grid.Column="1"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Content="{TemplateBinding HeaderedItemsControl.Header}"
                              ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                              ContentSource="Header" x:Uid="ContentPresenter_1">
              <FrameworkElement.DataContext>
                <x:NullExtension/>
              </FrameworkElement.DataContext>
            </ContentPresenter>
            <ItemsPresenter FrameworkElement.Name="ItemsHost" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="1"
                            x:Uid="ItemsPresenter_1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_2" Property="TreeViewItem.IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" x:Uid="Setter_12" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_3" Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="Expander" x:Uid="Setter_13" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <MultiTrigger x:Uid="MultiTrigger_1">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_1" Property="HeaderedItemsControl.HasHeader" Value="false"/>
                <Condition x:Uid="Condition_2" Property="FrameworkElement.Width" Value="Auto"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" x:Uid="Setter_14" Property="FrameworkElement.MinWidth" Value="75"/>
            </MultiTrigger>
            <MultiTrigger x:Uid="MultiTrigger_2">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_3" Property="HeaderedItemsControl.HasHeader" Value="false"/>
                <Condition x:Uid="Condition_4" Property="FrameworkElement.Height" Value="Auto"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" x:Uid="Setter_15" Property="FrameworkElement.MinHeight" Value="19"/>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_4" Property="TreeViewItem.IsSelected" Value="true">
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Bd"
                      x:Uid="Setter_16" Property="Border.Background"/>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" x:Uid="Setter_17"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_5" Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" x:Uid="Setter_18"
                      Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InvisibleToggleButton" TargetType="{x:Type ToggleButton}" x:Uid="Style_9">
    <Setter x:Uid="Setter_20" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_21" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_22" Property="FrameworkElement.Width" Value="Auto"/>
    <Setter x:Uid="Setter_23" Property="FrameworkElement.Height" Value="Auto"/>
    <Setter x:Uid="Setter_24" Property="Panel.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_25" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_26" Property="ButtonBase.ClickMode" Value="Press"/>
    <Setter x:Uid="Setter_27" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_4" TargetType="{x:Type ToggleButton}">
          <Grid x:Uid="Grid_4" Panel.Background="{TemplateBinding Panel.Background}" FrameworkElement.Cursor="Hand"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HyperComboBox" TargetType="{x:Type ComboBox}" x:Uid="Style_3"
         BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter x:Uid="Setter_104" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_105" Property="fwctl:ControlStylingUtilities.CustomAccentBrush"
            Value="{DynamicResource LayerChild0Brush}"/>
    <Setter Property="FrameworkElement.MinWidth" x:Uid="Setter_38" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" x:Uid="Setter_39" Value="0"/>
    <Setter x:Uid="Setter_106" Property="ScrollViewer.CanContentScroll" Value="false"/>
  </Style>
  <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}" x:Uid="Style_10">
    <Setter Property="ButtonBase.Command" x:Uid="Setter_40" Value="{Binding DeleteCommand}"/>
    <Setter Property="FrameworkElement.MinWidth" x:Uid="Setter_42" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" x:Uid="Setter_43" Value="0"/>
    <Setter Property="FrameworkElement.Width" x:Uid="Setter_44" Value="12"/>
    <Setter Property="FrameworkElement.Height" x:Uid="Setter_45" Value="12"/>
    <Setter Property="Control.Background" x:Uid="Setter_46" Value="Red"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" x:Uid="Setter_47" Value="Right"/>
    <Setter Property="Grid.Column" x:Uid="Setter_48" Value="1"/>
    <Setter x:Uid="Setter_65" Property="FrameworkElement.Margin" Value="0,0,8,0"/>
    <Setter x:Uid="Setter_66" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_8" TargetType="{x:Type ButtonBase}">
          <Grid x:Name="DelCanvas" x:Uid="Canvas_1" automation:AutomationElement.Id="DeleteButton"
                FrameworkElement.HorizontalAlignment="Left" FrameworkElement.Margin="0,0,0,0"
                FrameworkElement.VerticalAlignment="Top" FrameworkElement.Width="10" FrameworkElement.Height="10">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_3"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_3"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="MinusBG" x:Uid="Rectangle_1" Shape.Fill="sc#1, 0.4225352, 0.4225352, 0.4225352" RadiusX="2"
                       RadiusY="2" FrameworkElement.HorizontalAlignment="Stretch" FrameworkElement.Margin="0,0,0,0"
                       FrameworkElement.Width="Auto" FrameworkElement.Height="Auto"/>
            <Rectangle x:Name="Minus" x:Uid="Rectangle_2" Shape.Fill="sc#1, 1, 1, 1" FrameworkElement.Width="6"
                       FrameworkElement.Height="2" Canvas.Left="0" Canvas.Top="0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_7" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_81" TargetName="MinusBG" Property="Shape.Fill" Value="sc#1, 0.6808052, 0, 0"/>
            </Trigger>
            <Trigger x:Uid="Trigger_8" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_82" TargetName="Minus" Property="Shape.Fill" Value="sc#1, 1, 1, 1"/>
              <Setter x:Uid="Setter_83" TargetName="Minus" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter x:Uid="Setter_84" TargetName="MinusBG" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AddButtonStyle" TargetType="{x:Type Button}" x:Uid="Style_11">
    <Setter Property="FrameworkElement.MinWidth" x:Uid="Setter_50" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" x:Uid="Setter_51" Value="0"/>
    <Setter Property="FrameworkElement.Width" x:Uid="Setter_52" Value="12"/>
    <Setter Property="FrameworkElement.Height" x:Uid="Setter_53" Value="12"/>
    <Setter Property="Control.Background" x:Uid="Setter_54" Value="Green"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" x:Uid="Setter_55" Value="Right"/>
    <Setter Property="FrameworkElement.VerticalAlignment" x:Uid="Setter_56" Value="Center"/>
    <Setter Property="Grid.Column" x:Uid="Setter_57" Value="1"/>
    <Setter x:Uid="Setter_67" Property="FrameworkElement.Margin" Value="0,0,8,0"/>
    <Setter x:Uid="Setter_68" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_9" TargetType="{x:Type ButtonBase}">
          <Grid x:Name="AddCanvas" x:Uid="Canvas_2" FrameworkElement.HorizontalAlignment="Left"
                FrameworkElement.Margin="0,0,0,0" FrameworkElement.VerticalAlignment="Top"
                FrameworkElement.Width="10" FrameworkElement.Height="10" Panel.Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_4"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_4"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="VOuter" x:Uid="Rectangle_3" Shape.Fill="sc#1, 0.5070422, 0.5070422, 0.5070422"
                       FrameworkElement.Margin="1,0,1,3" FrameworkElement.MinWidth="0"
                       FrameworkElement.VerticalAlignment="Bottom" FrameworkElement.Width="Auto"
                       FrameworkElement.Height="2"/>
            <Rectangle x:Name="HOutter" x:Uid="Rectangle_4" UIElement.RenderTransformOrigin="0.5,0.5"
                       Shape.Fill="sc#1, 0.5070422, 0.5070422, 0.5070422" FrameworkElement.Margin="1,0,1,3"
                       FrameworkElement.MinWidth="0" FrameworkElement.VerticalAlignment="Bottom"
                       FrameworkElement.Width="Auto" FrameworkElement.Height="2">
              <UIElement.RenderTransform>
                <TransformGroup x:Uid="TransformGroup_1">
                  <TranslateTransform x:Uid="TranslateTransform_1" X="0" Y="0"/>
                  <ScaleTransform x:Uid="ScaleTransform_1" ScaleX="1" ScaleY="1"/>
                  <SkewTransform x:Uid="SkewTransform_1" AngleX="0" AngleY="0"/>
                  <RotateTransform x:Uid="RotateTransform_1" Angle="-90"/>
                  <TranslateTransform x:Uid="TranslateTransform_2" X="0" Y="0"/>
                  <TranslateTransform x:Uid="TranslateTransform_3" X="0" Y="0"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
            <Rectangle x:Name="HInner" x:Uid="Rectangle_5" Shape.Fill="sc#1, 1, 1, 1" FrameworkElement.MinHeight="0"
                       FrameworkElement.MinWidth="0" FrameworkElement.Width="8" FrameworkElement.Height="2"/>
            <Rectangle x:Name="VInner" x:Uid="Rectangle_6" UIElement.RenderTransformOrigin="0.5,0.5"
                       Shape.Fill="sc#1, 1, 1, 1" FrameworkElement.Margin="0,4,0,4" FrameworkElement.Width="8"
                       FrameworkElement.Height="2">
              <UIElement.RenderTransform>
                <TransformGroup x:Uid="TransformGroup_2">
                  <TranslateTransform x:Uid="TranslateTransform_4" X="0" Y="0"/>
                  <ScaleTransform x:Uid="ScaleTransform_2" ScaleX="1" ScaleY="1"/>
                  <SkewTransform x:Uid="SkewTransform_2" AngleX="0" AngleY="0"/>
                  <RotateTransform x:Uid="RotateTransform_2" Angle="-90"/>
                  <TranslateTransform x:Uid="TranslateTransform_5" X="0" Y="0"/>
                  <TranslateTransform x:Uid="TranslateTransform_6" X="0" Y="0"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_9" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_85" TargetName="VOuter" Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
              <Setter x:Uid="Setter_86" TargetName="VOuter" Property="FrameworkElement.MinHeight" Value="0"/>
              <Setter x:Uid="Setter_87" TargetName="VOuter" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
              <Setter x:Uid="Setter_88" TargetName="VOuter" Property="FrameworkElement.Height" Value="4"/>
              <Setter x:Uid="Setter_89" TargetName="HOutter" Property="FrameworkElement.Height" Value="4"/>
              <Setter x:Uid="Setter_90" TargetName="HInner" Property="Shape.Fill" Value="sc#1, .25, .25, .25"/>
              <Setter x:Uid="Setter_91" TargetName="VInner" Property="Shape.Fill" Value="sc#1, .25, .25, .25"/>
              <Setter x:Uid="Setter_92" TargetName="HOutter" Property="FrameworkElement.Margin" Value="0,0,0,3"/>
            </Trigger>
            <Trigger x:Uid="Trigger_10" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_80" Property="UIElement.Opacity" Value="0.5"/>
              <Setter x:Uid="Setter_93" TargetName="VOuter" Property="UIElement.Opacity" Value="0"/>
              <Setter x:Uid="Setter_94" TargetName="HOutter" Property="UIElement.Opacity" Value="0"/>
              <Setter x:Uid="Setter_95" TargetName="HInner" Property="UIElement.Opacity" Value="0.5"/>
              <Setter x:Uid="Setter_96" TargetName="VInner" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TriggerRowStyle" TargetType="{x:Type Grid}" x:Uid="Style_12">
    <Setter Property="Panel.Background" x:Uid="Setter_58" Value="Transparent"/>
    <Setter Property="FrameworkElement.Margin" x:Uid="Setter_69" Value="0,0,0,4"/>
  </Style>
  <Style x:Key="TriggerSourceGroupStyle" TargetType="{x:Type GroupItem}" x:Uid="Style_5">
    <Setter Property="DockPanel.Dock" x:Uid="Setter_28" Value="Top"/>
    <Setter Property="Control.Template" x:Uid="Setter_29">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupItem}" x:Uid="ControlTemplate_5">
          <DockPanel x:Uid="DockPanel_1">
            <ContentPresenter FrameworkElement.Margin="2,2,2,2" DockPanel.Dock="Top"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              x:Uid="ContentPresenter_3"/>
            <ItemsPresenter DockPanel.Dock="Top" x:Uid="ItemsPresenter_3"/>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="TriggerSourceHeaderTemplate" x:Uid="DataTemplate_1">
    <TextBlock FontWeight="Bold" x:Uid="TextBlock_2">
      <TextBlock.Text>
        <Binding Path="Name"/>
      </TextBlock.Text>
    </TextBlock>
  </DataTemplate>
  <Style x:Key="TriggerSourceComboBox" BasedOn="{StaticResource HyperComboBox}"
         TargetType="{x:Type ui:OnDemandComboBox}" x:Uid="Style_6">
    <Setter Property="fwctl:GroupableComboBox.BindableGroupStyle" x:Uid="Setter_30">
      <Setter.Value>
        <GroupStyle ContainerStyle="{StaticResource TriggerSourceGroupStyle}"
                    HeaderTemplate="{StaticResource TriggerSourceHeaderTemplate}" x:Uid="GroupStyle_1"/>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsControl.ItemsPanel" x:Uid="Setter_31">
      <Setter.Value>
        <ItemsPanelTemplate x:Uid="ItemsPanelTemplate_1">
          <StackPanel x:Uid="StackPanel_1"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionTreeViewStyle" TargetType="{x:Type TreeView}" x:Uid="Style_8">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ExpressionTreeViewItemStyle}"
            x:Uid="Setter_35"/>
    <Setter Property="Control.Background" x:Uid="Setter_36" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment" x:Uid="Setter_37" Value="Stretch"/>
  </Style>
  <Style TargetType="{x:Type ui:ValuePopup}" x:Uid="Style_13">
    <Setter Property="Control.Template" x:Uid="Setter_60">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ui:ValuePopup}" x:Uid="ControlTemplate_6">
          <Grid x:Uid="Grid_5">
            <Border x:Uid="Border_12" Background="{DynamicResource RecessedBrush}" Padding="0" CornerRadius="4">
              <Grid x:Uid="Grid_16" IsSharedSizeScope="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_10" Width="1"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_11" Width="*"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_12" Width="Auto" DefinitionBase.SharedSizeGroup="ComboBoxButton"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="SelectedItemBorder" x:Uid="Border_13" Grid.ColumnSpan="2" FrameworkElement.Margin="1"
                        CornerRadius="2" Background="{DynamicResource ListBackgroundBrush}"/>
                <TextBlock Grid.Column="1" Text="{TemplateBinding ui:ValuePopup.Value}" FrameworkElement.MinWidth="0"
                           x:Uid="TextBlock_4" FrameworkElement.Margin="2" FrameworkElement.VerticalAlignment="Center"/>
                <ToggleButton x:Name="DropDownButton" x:Uid="ToggleButton_2" UIElement.Focusable="false"
                              FrameworkElement.Margin="0" Grid.Column="0" Grid.ColumnSpan="3"
                              FrameworkElement.Style="{StaticResource ExpressionComboBoxButton}"
                              fwctl:ControlStylingUtilities.CustomAccentBrush="{DynamicResource LayerChild0Brush}">
                  <ToggleButton.IsChecked>
                    <Binding Path="IsEditing" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </ToggleButton.IsChecked>
                </ToggleButton>
              </Grid>
            </Border>
            <Popup FrameworkElement.Name="PART_Popup" StaysOpen="false" x:Uid="Popup"
                   IsOpen="{Binding IsEditing, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <fwctl:VerifyingEditBox FrameworkElement.Name="EditSite" x:Uid="EditSite"
                                      Value="{Binding Value, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EditSourceStyle" BasedOn="{StaticResource HyperComboBox}"
         TargetType="{x:Type ui:OnDemandComboBox}" x:Uid="Style_14">
    <Style.Triggers>
      <DataTrigger x:Uid="DataTrigger_2" Value="False">
        <DataTrigger.Binding>
          <Binding Path="Selection" x:Uid="Binding_1" RelativeSource="{RelativeSource Self}">
            <Binding.Converter>
              <ui:IsEditableSourceConverter x:Uid="ui:IsEditableSourceConverter_1"/>
            </Binding.Converter>
          </Binding>
        </DataTrigger.Binding>
        <Setter Property="Control.Template" x:Uid="Setter_61">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ui:OnDemandComboBox}" x:Uid="ControlTemplate_7">
              <TextBlock x:Uid="TextBlock_5" FrameworkElement.Margin="4,3,1,1">
                <TextBlock.Text>
                  <Binding Path="Selection" x:Uid="Binding_2" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                      <ui:SceneNodeToStringConverter x:Uid="ui:SceneNodeToStringConverter_1"/>
                    </Binding.Converter>
                  </Binding>
                </TextBlock.Text>
              </TextBlock>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="EditSourceStyleWithRollover" BasedOn="{StaticResource EditSourceStyle}"
         TargetType="{x:Type ui:OnDemandComboBox}" x:Uid="Style_17">
    <Setter x:Uid="Setter_97" Property="UIElement.Opacity" Value=".25"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_11" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_101" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <DataTrigger x:Uid="DataTrigger_4" Binding="{Binding FirstSourceNameInGroup}" Value="True">
        <Setter x:Uid="Setter_100" Property="UIElement.Opacity" Value="1"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SectionTitleStyle" TargetType="{x:Type TextBlock}" x:Uid="Style_15">
    <Setter Property="TextBlock.TextTrimming" x:Uid="Setter_62" Value="CharacterEllipsis"/>
    <Setter Property="TextBlock.FontWeight" x:Uid="Setter_63" Value="Bold"/>
    <Setter Property="FrameworkElement.ToolTip" x:Uid="Setter_64">
      <Setter.Value>
        <Binding RelativeSource="{RelativeSource Self}" Path="Text"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_70" Property="FrameworkElement.Margin" Value="3,1,0,1"/>
  </Style>
  <Style x:Key="SectionTitleBacking" x:Uid="Style_16" TargetType="{x:Type Rectangle}">
    <Setter x:Uid="Setter_72" Property="Grid.ColumnSpan" Value="2"/>
    <Setter x:Uid="Setter_75" Property="Shape.Fill" Value="{DynamicResource RecessedBrush}"/>
  </Style>
  <ControlTemplate x:Key="InvisibleButton" x:Uid="ControlTemplate_10" TargetType="{x:Type Button}">
    <ContentPresenter x:Uid="ContentPresenter_4" Content="{TemplateBinding ContentControl.Content}"
                      ContentTemplate="{Binding ContentTemplate}"/>
  </ControlTemplate>
</ResourceDictionary>