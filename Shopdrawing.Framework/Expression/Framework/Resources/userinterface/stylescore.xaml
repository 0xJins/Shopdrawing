<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:Data="clr-namespace:Microsoft.Expression.Framework.Data"
                    xmlns:UserInterface="clr-namespace:Microsoft.Expression.Framework.UserInterface"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:Windows="clr-namespace:System.Windows;assembly=PresentationFramework"
                    xmlns:Controls="clr-namespace:Microsoft.Expression.Framework.Controls"
                    xmlns:ValueEditors="clr-namespace:Microsoft.Expression.Framework.ValueEditors"
                    xmlns:ColorEditor="clr-namespace:Microsoft.Expression.Framework.ValueEditors.ColorEditor"
                    xmlns:automation="clr-namespace:Microsoft.Expression.Framework.Diagnostics"
                    xmlns:ExpressionExtension="clr-namespace:Microsoft.Expression.Framework.Workspaces.Extension"
                    PresentationOptions:Freeze="true" x:Uid="ResourceDictionary_2">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary x:Uid="ResourceDictionary_1"
                        Source="/Microsoft.Expression.Framework;component/Workspaces/Themes/generic.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <System:String x:Key="DefaultUIFont" x:Uid="System:String_1">Segoe UI</System:String>
  <System:Double x:Key="{x:Static SystemFonts.IconFontSizeKey}" x:Uid="System:Double_5">10</System:Double>
  <FontWeight x:Key="{x:Static SystemFonts.IconFontWeightKey}" x:Uid="FontWeight_4">Normal</FontWeight>
  <System:Double x:Key="{x:Static SystemFonts.MessageFontSizeKey}" x:Uid="System:Double_6">11</System:Double>
  <FontWeight x:Key="{x:Static SystemFonts.MessageFontWeightKey}" x:Uid="FontWeight_2">Normal</FontWeight>
  <System:Double x:Key="{x:Static SystemFonts.CaptionFontSizeKey}" x:Uid="System:Double_7">12</System:Double>
  <FontWeight x:Key="{x:Static SystemFonts.CaptionFontWeightKey}" x:Uid="FontWeight_3">Bold</FontWeight>
  <System:Double x:Key="LargeText" x:Uid="System:Double_10">14</System:Double>
  <System:Double x:Key="DefaultSpacing" x:Uid="System:Double_1">4</System:Double>
  <System:Double x:Key="MediumSpacing" x:Uid="System:Double_2">8</System:Double>
  <System:Double x:Key="LargeSpacing" x:Uid="System:Double_3">12</System:Double>
  <System:Double x:Key="ExtraLargeSpacing" x:Uid="System:Double_4">16</System:Double>
  <System:Double x:Key="-DefaultSpacing" x:Uid="System:Double_11">-4</System:Double>
  <System:Double x:Key="-MediumSpacing" x:Uid="System:Double_12">-8</System:Double>
  <System:Double x:Key="-LargeSpacing" x:Uid="System:Double_13">-12</System:Double>
  <System:Double x:Key="-ExtraLargeSpacing" x:Uid="System:Double_8">-16</System:Double>
  <Thickness x:Key="DefaultLeftMargin" x:Uid="Thickness_1" Left="{StaticResource DefaultSpacing}" Top="0"
             Right="0" Bottom="0"/>
  <Thickness x:Key="MediumLeftMargin" x:Uid="Thickness_7" Left="{StaticResource MediumSpacing}" Top="0"
             Right="0" Bottom="0"/>
  <Thickness x:Key="LargeLeftMargin" x:Uid="Thickness_11" Left="{StaticResource LargeSpacing}" Top="0" Right="0"
             Bottom="0"/>
  <Thickness x:Key="ExtraLargeLeftMargin" x:Uid="Thickness_12" Left="{StaticResource ExtraLargeSpacing}" Top="0"
             Right="0" Bottom="0"/>
  <Thickness x:Key="DefaultBottomMargin" x:Uid="Thickness_8" Left="0" Top="0" Right="0"
             Bottom="{StaticResource DefaultSpacing}"/>
  <Thickness x:Key="DefaultLeftTopMargin" x:Uid="Thickness_3" Left="{StaticResource DefaultSpacing}"
             Top="{StaticResource DefaultSpacing}" Right="0" Bottom="0"/>
  <Thickness x:Key="DefaultTopMargin" x:Uid="Thickness_2" Left="0" Top="{StaticResource DefaultSpacing}"
             Right="0" Bottom="0"/>
  <Thickness x:Key="MediumTopMargin" x:Uid="Thickness_4" Left="0" Top="{StaticResource MediumSpacing}" Right="0"
             Bottom="0"/>
  <Thickness x:Key="LargeTopMargin" x:Uid="Thickness_9" Left="0" Top="{StaticResource LargeSpacing}" Right="0"
             Bottom="0"/>
  <Thickness x:Key="LargeRightMargin" x:Uid="Thickness_13" Left="0" Top="0"
             Right="{StaticResource LargeSpacing}" Bottom="0"/>
  <Thickness x:Key="DefaultLeftMediumTopMargin" x:Uid="Thickness_14" Left="{StaticResource DefaultSpacing}"
             Top="{StaticResource MediumSpacing}" Right="0" Bottom="0"/>
  <Thickness x:Key="ExtraLargeTopMargin" x:Uid="Thickness_5" Left="0" Top="{StaticResource ExtraLargeSpacing}"
             Right="0" Bottom="0"/>
  <Thickness x:Key="ExtraLargeTopMarginWithDefaultLeftMargin" x:Uid="Thickness_18"
             Left="{StaticResource DefaultSpacing}" Top="{StaticResource ExtraLargeSpacing}" Right="0"
             Bottom="0"/>
  <Thickness x:Key="ExtraLargeTopMarginWithMediumLeftMargin" x:Uid="Thickness_19"
             Left="{StaticResource MediumSpacing}" Top="{StaticResource ExtraLargeSpacing}" Right="0" Bottom="0"/>
  <Thickness x:Key="LargeMargin" x:Uid="Thickness_6" Left="{StaticResource LargeSpacing}"
             Top="{StaticResource LargeSpacing}" Right="{StaticResource LargeSpacing}"
             Bottom="{StaticResource LargeSpacing}"/>
  <Thickness x:Key="SmallUniformMargin" x:Uid="Thickness_10">1,1,1,1</Thickness>
  <Thickness x:Key="DefaultMargin" x:Uid="Thickness_15" Left="0" Top="3" Right="3" Bottom="0"/>
  <Thickness x:Key="PaletteTabGroupMargin" x:Uid="Thickness_16" Left="0" Top="0" Right="8" Bottom="0"/>
  <Thickness x:Key="PaletteViewHeaderTabGroupMargin" x:Uid="Thickness_17" Left="0" Top="0" Right="0" Bottom="0"/>
  <CornerRadius x:Key="PaletteHeaderCornerRounding" x:Uid="CornerRadius_1">0,4,0,0</CornerRadius>
  <System:Double x:Key="PaletteHeaderHeight" x:Uid="System:Double_9">22</System:Double>
  <CornerRadius x:Key="PaletteCornerRounding" x:Uid="CornerRadius_7">0,4,4,4</CornerRadius>
  <CornerRadius x:Key="PaletteCornerRoundingWithHeader" x:Uid="CornerRadius_2">0,0,4,4</CornerRadius>
  <Style x:Key="PaletteInformationalTextBlock" x:Uid="Style_204" TargetType="{x:Type TextBlock}"
         BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter x:Uid="Setter_1884" Property="TextBlock.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1885" Property="TextBlock.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1886" Property="TextBlock.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1887" Property="FrameworkElement.Margin" Value="16,12,16,0"/>
    <Setter x:Uid="Setter_1888" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1889" Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter x:Uid="Setter_1890" Property="TextBlock.Foreground"
            Value="{DynamicResource PaletteInformationalTextBrush}"/>
    <Setter x:Uid="Setter_1891" Property="TextBlock.TextWrapping" Value="Wrap"/>
  </Style>
  <CornerRadius x:Key="GripperCornerRoundingTop" x:Uid="CornerRadius_3">2,2,0,0</CornerRadius>
  <CornerRadius x:Key="GripperCornerRoundingLeft" x:Uid="CornerRadius_4">2,0,0,2</CornerRadius>
  <CornerRadius x:Key="GripperCornerRoundingBottom" x:Uid="CornerRadius_5">0,0,2,2</CornerRadius>
  <CornerRadius x:Key="GripperCornerRoundingRight" x:Uid="CornerRadius_6">0,2,0,2</CornerRadius>
  <Data:BoolToVisibilityConverter x:Key="BooleanToVisibilityConverter" x:Uid="Data:BoolToVisibilityConverter_1"/>
  <Data:NullToVisibilityCollapsedConverter x:Key="NullToVisibilityCollapsedConverter" x:Uid="Data:NullToVisibilityCollapsedConverter_1"/>
  <Data:AppendSuffixConverter x:Key="WrapperNameConverter" x:Uid="Data:AppendSuffixConverter_1"
                              Localization.Attributes="Suffix(Unreadable Unmodifiable)" Suffix="_Wrapper"/>
  <Data:AppendSuffixConverter x:Key="PropertyMenuClickControlConverter" x:Uid="Data:AppendSuffixConverter_6"
                              Localization.Attributes="Suffix(Unreadable Unmodifiable)" Suffix="MenuClickControl"/>
  <Data:AppendSuffixConverter x:Key="PropertyValueClickControlConverter" x:Uid="Data:AppendSuffixConverter_7"
                              Localization.Attributes="Suffix(Unreadable Unmodifiable)" Suffix="ValueClickControl"/>
  <Data:VisibilityOrConverter x:Key="VisibilityOrConverter" x:Uid="dspi:VisibilityOrConverter_1"/>
  <Data:IsNullConverter x:Key="IsNullConverter" x:Uid="Data:IsNullConverter_1"/>
  <Data:NegatingThicknessConverter x:Key="NegatingThicknessConverter" x:Uid="NegatingThicknessConverter"/>
  <Data:LessThanEqualsConverter x:Key="LessThanEqualsConverter" x:Uid="Data:LessThanEqualsConverter_1"/>
  <Data:UriToImageConverter x:Key="UriToImageConverter" x:Uid="Data:UriToImageConverter_1"/>
  <Data:StringEmptyToBoolConverter x:Key="StringEmptyToBoolConverter" x:Uid="Data:StringEmptyToBoolConverter_1"/>
  <Style x:Uid="Style_186" TargetType="{x:Type ColorEditor:ColorEditor}">
    <Setter x:Uid="Setter_1681" Property="automation:AutomationElement.Id" Value="ColorEditor"/>
    <Setter x:Uid="Setter_1682" Property="UIElement.Focusable" Value="false"/>
  </Style>
  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" x:Uid="Style_114" TargetType="{x:Type Separator}">
    <Setter x:Uid="Setter_1166" Property="FrameworkElement.Height" Value="1"/>
    <Setter x:Uid="Setter_1167" Property="FrameworkElement.Margin" Value="3,2,3,2"/>
    <Setter x:Uid="Setter_1168" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_2008" Property="FrameworkElement.UseLayoutRounding" Value="true"/>
    <Setter x:Uid="Setter_1169" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_58" TargetType="{x:Type Separator}">
          <Border x:Uid="Border_28" Background="{DynamicResource MenuSeparatorBrush}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DropShadowBorderStyle" x:Uid="Style_211" TargetType="{x:Type Border}">
    <Setter x:Uid="Setter_1986" Property="FrameworkElement.Tag"
            Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
    <Style.Triggers>
      <DataTrigger x:Uid="DataTrigger_2" Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter x:Uid="Setter_1954" Property="Border.Background" Value="Transparent"/>
        <Setter x:Uid="Setter_1955" Property="Border.Padding" Value="0,0,5,5"/>
        <Setter x:Uid="Setter_1956" Property="UIElement.Effect">
          <Setter.Value>
            <DropShadowEffect x:Uid="DropShadowEffect_1" BlurRadius="4" ShadowDepth="1" Opacity="0.8"/>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_113" TargetType="{x:Type UserInterface:CommandBar}">
    <Setter x:Uid="Setter_1170" Property="Control.Background" Value="{DynamicResource MenuBackgroundBrush}"/>
    <Setter x:Uid="Setter_1171" Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter x:Uid="Setter_1172" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_59" TargetType="{x:Type Menu}">
          <StackPanel x:Uid="StackPanel_6" Panel.Background="{TemplateBinding Control.Background}"
                      Panel.IsItemsHost="true" UIElement.ClipToBounds="true" Orientation="Horizontal"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_129" TargetType="{x:Type MenuItem}">
    <Setter x:Uid="Setter_1267" Property="Control.HorizontalContentAlignment">
      <Setter.Value>
        <Binding Path="HorizontalContentAlignment"
                 RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1268" Property="Control.VerticalContentAlignment">
      <Setter.Value>
        <Binding Path="VerticalContentAlignment"
                 RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1176" Property="Control.Background" Value="{DynamicResource MenuBackgroundBrush}"/>
    <Setter x:Uid="Setter_1177" Property="Control.Foreground" Value="{DynamicResource MenuTextBrush}"/>
    <Setter x:Uid="Setter_1401" Property="Controls:ControlStylingUtilities.CustomAccentBrush"
            Value="{DynamicResource MenuBackgroundBrush}"/>
    <Setter x:Uid="Setter_1155" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1156" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1157" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1269" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_66" TargetType="{x:Type MenuItem}">
          <Border x:Name="Bd" x:Uid="Border_38" UIElement.SnapsToDevicePixels="true"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid x:Name="Grid" x:Uid="Grid_49">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Uid="ColumnDefinition_35" MinWidth="17" Width="Auto"
                                  DefinitionBase.SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition x:Uid="ColumnDefinition_36" Width="*"/>
                <ColumnDefinition x:Uid="ColumnDefinition_37" Width="Auto" DefinitionBase.SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition x:Uid="ColumnDefinition_38" Width="14"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="GlyphPanel" x:Uid="Path_12" UIElement.Visibility="Hidden"
                    Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Margin="4,0,6,0"
                    FrameworkElement.VerticalAlignment="Center" Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                    FrameworkElement.FlowDirection="LeftToRight"/>
              <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_33"
                                UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                FrameworkElement.Margin="{TemplateBinding Control.Padding}" Grid.Column="1"
                                Content="{TemplateBinding HeaderedItemsControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" RecognizesAccessKey="true"
                                ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                ContentSource="Header"/>
              <TextBlock x:Name="InputGestureText" x:Uid="TextBlock_10" FrameworkElement.Margin="5,2,0,2" Grid.Column="2"
                         DockPanel.Dock="Right" Text="{TemplateBinding MenuItem.InputGestureText}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1043" Property="MenuItem.IsChecked" Value="true">
              <Setter x:Uid="Setter_1271" TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1044" Property="MenuItem.IsHighlighted" Value="true">
              <Setter x:Uid="Setter_1198" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1199" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1045" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1394" Value="{DynamicResource MenuDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1046" Property="MenuItem.Role" Value="TopLevelHeader">
        <Setter x:Uid="Setter_1273" Property="FrameworkElement.Margin" Value="0,1,0,1"/>
        <Setter x:Uid="Setter_1274" Property="Control.Padding" Value="6,3,6,3"/>
        <Setter x:Uid="Setter_1275" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_67" TargetType="{x:Type MenuItem}">
              <Border x:Name="Bd" x:Uid="Border_39" UIElement.SnapsToDevicePixels="true"
                      Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}">
                <DockPanel x:Name="DockPanel" x:Uid="DockPanel_4">
                  <Path x:Name="GlyphPanel" x:Uid="Path_13" UIElement.Visibility="Collapsed"
                        Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Margin="4,0,6,0"
                        FrameworkElement.VerticalAlignment="Center" Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                        FrameworkElement.FlowDirection="LeftToRight"/>
                  <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_35"
                                    UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding HeaderedItemsControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" RecognizesAccessKey="true"
                                    ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                    ContentSource="Header"/>
                  <Controls:ExpressionPopup x:Name="PART_Popup" x:Uid="Popup_2" Popup.AllowsTransparency="true" Popup.Placement="Bottom"
                                            UIElement.Focusable="false"
                                            Popup.PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                    <Popup.IsOpen>
                      <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent, AncestorType={x:Null}}"/>
                    </Popup.IsOpen>
                    <Border x:Uid="Border_91" FrameworkElement.Style="{StaticResource DropShadowBorderStyle}">
                      <Border x:Name="SubMenuBorder" x:Uid="Border_40" Background="{DynamicResource MenuBackgroundBrush}"
                              BorderThickness="1,1,1,1" BorderBrush="{DynamicResource WindowBorderBrush}">
                        <ScrollViewer x:Name="ScrollViewer" x:Uid="ScrollViewer_6" CanContentScroll="true"
                                      FrameworkElement.Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                          <ItemsPresenter x:Name="ItemsPresenter" x:Uid="ItemsPresenter_2"
                                          UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          FrameworkElement.Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle"
                                          KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                        </ScrollViewer>
                      </Border>
                    </Border>
                  </Controls:ExpressionPopup>
                </DockPanel>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_1047" Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                  <Setter x:Uid="Setter_1276" TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1049" Property="MenuItem.IsChecked" Value="true">
                  <Setter x:Uid="Setter_1278" TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1050" Property="MenuItem.IsHighlighted" Value="true">
                  <Setter x:Uid="Setter_1280" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
                  <Setter x:Uid="Setter_1281" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1051" Property="UIElement.IsEnabled" Value="false">
                  <Setter x:Uid="Setter_1282" Value="{DynamicResource MenuDisabledTextBrush}" Property="Control.Foreground"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_1052" Property="MenuItem.Role" Value="TopLevelItem">
        <Setter x:Uid="Setter_1283" Property="FrameworkElement.Margin" Value="0,1,0,1"/>
        <Setter x:Uid="Setter_1284" Property="Control.Padding" Value="6,3,6,3"/>
        <Setter x:Uid="Setter_1285" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_68" TargetType="{x:Type MenuItem}">
              <Border x:Name="Bd" x:Uid="Border_41" UIElement.SnapsToDevicePixels="true"
                      Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}">
                <DockPanel x:Name="DockPanel" x:Uid="DockPanel_5">
                  <Path x:Name="GlyphPanel" x:Uid="Path_14" UIElement.Visibility="Collapsed"
                        Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Margin="4,0,6,0"
                        FrameworkElement.VerticalAlignment="Center" Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                        FrameworkElement.FlowDirection="LeftToRight"/>
                  <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_37"
                                    UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding HeaderedItemsControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" RecognizesAccessKey="true"
                                    ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                    ContentSource="Header"/>
                </DockPanel>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_1054" Property="MenuItem.IsChecked" Value="true">
                  <Setter x:Uid="Setter_1287" TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1055" Property="MenuItem.IsHighlighted" Value="true">
                  <Setter x:Uid="Setter_1289" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
                  <Setter x:Uid="Setter_1290" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1056" Property="UIElement.IsEnabled" Value="false">
                  <Setter x:Uid="Setter_1291" Value="{DynamicResource MenuDisabledTextBrush}" Property="Control.Foreground"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_1057" Property="MenuItem.Role" Value="SubmenuHeader">
        <Setter x:Uid="Setter_1292" Property="DockPanel.Dock" Value="Top"/>
        <Setter x:Uid="Setter_1293" Property="Control.Padding" Value="0,2,0,2"/>
        <Setter x:Uid="Setter_1294" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_69" TargetType="{x:Type MenuItem}">
              <Border x:Name="Bd" x:Uid="Border_42" UIElement.SnapsToDevicePixels="true"
                      Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}">
                <Grid x:Name="Grid" x:Uid="Grid_50">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Uid="ColumnDefinition_50" MinWidth="17" Width="Auto"
                                      DefinitionBase.SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition x:Uid="ColumnDefinition_40" Width="*"/>
                    <ColumnDefinition x:Uid="ColumnDefinition_41" Width="Auto" DefinitionBase.SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition x:Uid="ColumnDefinition_42" Width="14"/>
                  </Grid.ColumnDefinitions>
                  <Path x:Name="GlyphPanel" x:Uid="Path_15" UIElement.Visibility="Hidden"
                        Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Margin="4,0,6,0"
                        FrameworkElement.VerticalAlignment="Center" Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z"
                        FrameworkElement.FlowDirection="LeftToRight"/>
                  <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_39"
                                    UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    FrameworkElement.Margin="{TemplateBinding Control.Padding}" Grid.Column="1"
                                    Content="{TemplateBinding HeaderedItemsControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" RecognizesAccessKey="true"
                                    ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                    ContentSource="Header"/>
                  <Path x:Name="Path" x:Uid="Path_16" Shape.Fill="{TemplateBinding Control.Foreground}"
                        FrameworkElement.Margin="4,0,6,0" FrameworkElement.VerticalAlignment="Center" Grid.Column="3"
                        DockPanel.Dock="Right" Data="M 0,0 L 4,3.5 0,7 Z"/>
                  <Controls:ExpressionPopup x:Name="PART_Popup" x:Uid="Popup_3" Popup.AllowsTransparency="true" Popup.Placement="Right"
                                            UIElement.Focusable="false"
                                            Popup.PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                            Popup.VerticalOffset="-1" Popup.HorizontalOffset="1">
                    <Popup.IsOpen>
                      <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent, AncestorType={x:Null}}"/>
                    </Popup.IsOpen>
                    <Border x:Uid="Border_92" FrameworkElement.Style="{StaticResource DropShadowBorderStyle}">
                      <Border x:Name="SubMenuBorder" x:Uid="Border_43"
                              Background="{TemplateBinding Controls:ControlStylingUtilities.CustomAccentBrush}"
                              BorderThickness="1,1,1,1" BorderBrush="{DynamicResource WindowBorderBrush}">
                        <ScrollViewer x:Name="ScrollViewer" x:Uid="ScrollViewer_7" CanContentScroll="true"
                                      FrameworkElement.Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                          <ItemsPresenter x:Name="ItemsPresenter" x:Uid="ItemsPresenter_3"
                                          UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          FrameworkElement.Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle"
                                          KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                        </ScrollViewer>
                      </Border>
                    </Border>
                  </Controls:ExpressionPopup>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_1058" Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                  <Setter x:Uid="Setter_1295" TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1060" Property="MenuItem.IsChecked" Value="true">
                  <Setter x:Uid="Setter_1297" TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1061" Property="MenuItem.IsHighlighted" Value="true">
                  <Setter x:Uid="Setter_1299" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
                  <Setter x:Uid="Setter_1300" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1062" Property="UIElement.IsEnabled" Value="false">
                  <Setter x:Uid="Setter_1301" Value="{DynamicResource MenuDisabledTextBrush}" Property="Control.Foreground"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_1063" Property="MenuItem.Role" Value="SubmenuItem">
        <Setter x:Uid="Setter_1302" Property="DockPanel.Dock" Value="Top"/>
        <Setter x:Uid="Setter_1303" Property="Control.Padding" Value="0,2,0,2"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_116" TargetType="{x:Type UserInterface:CommandBarMenu}"
         BasedOn="{StaticResource {x:Type MenuItem}}"/>
  <Style x:Uid="Style_117" TargetType="{x:Type UserInterface:CommandBarDynamicMenu}"
         BasedOn="{StaticResource {x:Type MenuItem}}"/>
  <Style x:Uid="Style_118" TargetType="{x:Type UserInterface:CommandBarButton}"
         BasedOn="{StaticResource {x:Type MenuItem}}"/>
  <Style x:Uid="Style_119" TargetType="{x:Type UserInterface:CommandBarCheckBox}"
         BasedOn="{StaticResource {x:Type MenuItem}}"/>
  <Style x:Uid="Style_134" TargetType="{x:Type ContextMenu}">
    <Setter x:Uid="Setter_1329" Property="Control.Background" Value="{DynamicResource MenuBackgroundBrush}"/>
    <Setter x:Uid="Setter_1330" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_1895" Property="Control.BorderBrush" Value="{DynamicResource WindowBorderBrush}"/>
    <Setter x:Uid="Setter_1331" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_74" TargetType="{x:Type ContextMenu}">
          <Border x:Uid="Border_93" FrameworkElement.Style="{StaticResource DropShadowBorderStyle}">
            <Border x:Uid="Border_50" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
              <ScrollViewer x:Uid="ScrollViewer_9" CanContentScroll="true"
                            FrameworkElement.Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                <ItemsPresenter x:Uid="ItemsPresenter_5" FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </ScrollViewer>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_126" TargetType="{x:Type UserInterface:CommandBarContextMenu}"
         BasedOn="{StaticResource {x:Type ContextMenu}}"/>
  <Style x:Uid="Style_120" TargetType="{x:Type StatusBar}">
    <Setter x:Uid="Setter_1201" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1202" Property="TextElement.Foreground" Value="{DynamicResource Text1Brush}"/>
  </Style>
  <Style x:Key="EmptyLineStyle" x:Uid="Style_1" TargetType="{x:Type Canvas}">
    <Setter x:Uid="Setter_1" Property="FrameworkElement.Height" Value="10"/>
    <Setter x:Uid="Setter_2" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
  </Style>
  <Style x:Uid="Style_74" TargetType="{x:Type Label}">
    <Setter x:Uid="Setter_1360" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1361" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1357" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1999" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_407" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1404" Property="Control.Padding" Value="0"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1113" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1546" Property="Control.Foreground" Value="{DynamicResource DialogDisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <CornerRadius x:Key="ScrollViewerCornerRadius" x:Uid="CornerRadius_8">0,0,4,0</CornerRadius>
  <Style x:Key="ExpressionScrollViewer" x:Uid="Style_193" TargetType="{x:Type ScrollViewer}">
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1143" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1762" Property="Control.Foreground" Value="{DynamicResource DialogDisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
    <Setter x:Uid="Setter_1763" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_113" TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" x:Uid="Grid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_77" Width="*"/>
              <ColumnDefinition x:Uid="ColumnDefinition_78" Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_47" Height="*"/>
              <RowDefinition x:Uid="RowDefinition_48" Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="ScrollViewerCorner" x:Uid="Border_7"
                    Background="{DynamicResource ScrollbarBackgroundBrush}"
                    CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                    BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}" BorderThickness="1,1,0,0"
                    Grid.Column="1" Grid.Row="1"/>
            <Border x:Uid="Border_80" Background="{TemplateBinding Control.Background}">
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" x:Uid="PART_ScrollContentPresenter"
                                      FrameworkElement.Margin="{TemplateBinding Control.Padding}" Grid.Column="0" Grid.Row="0"
                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                      ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                      CanVerticallyScroll="false"/>
            </Border>
            <ScrollBar x:Name="PART_VerticalScrollBar" x:Uid="PART_VerticalScrollBar"
                       UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                       FrameworkElement.Cursor="Arrow" Grid.Column="1" Grid.Row="0"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" RangeBase.Minimum="0"
                       automation:AutomationElement.Id="VerticalScrollBar">
              <RangeBase.Value>
                <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
              </RangeBase.Value>
            </ScrollBar>
            <ScrollBar x:Name="PART_HorizontalScrollBar" x:Uid="PART_HorizontalScrollBar"
                       UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                       FrameworkElement.Cursor="Arrow" Grid.Column="0" Grid.Row="1" Orientation="Horizontal"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" RangeBase.Minimum="0"
                       automation:AutomationElement.Id="HorizontalScrollBar">
              <RangeBase.Value>
                <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
              </RangeBase.Value>
            </ScrollBar>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1168" SourceName="PART_VerticalScrollBar" Property="UIElement.Visibility"
                     Value="Collapsed">
              <Setter x:Uid="Setter_1945" TargetName="ScrollViewerCorner" Property="UIElement.Visibility"
                      Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1169" SourceName="PART_HorizontalScrollBar" Property="UIElement.Visibility"
                     Value="Collapsed">
              <Setter x:Uid="Setter_1946" TargetName="ScrollViewerCorner" Property="UIElement.Visibility"
                      Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" x:Uid="Style_217"
         TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ExpressionScrollViewer}">
    <Setter x:Uid="Setter_2002" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_2003" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_130" TargetType="{x:Type ScrollViewer}">
          <Grid x:Uid="Grid_82" Panel.Background="{TemplateBinding Control.Background}"
                UIElement.SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_85" Width="*"/>
              <ColumnDefinition x:Uid="ColumnDefinition_86" Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_53" Height="*"/>
              <RowDefinition x:Uid="RowDefinition_54" Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="ScrollViewerCorner" x:Uid="Border_94"
                    Background="{DynamicResource ScrollbarBackgroundBrush}"
                    CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                    BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}" BorderThickness="1,1,0,0"
                    Grid.Column="1" Grid.Row="1"/>
            <DockPanel x:Uid="DockPanel_7" FrameworkElement.Margin="{TemplateBinding Control.Padding}">
              <ScrollViewer x:Uid="ScrollViewer_12" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" UIElement.Focusable="false">
                <GridViewHeaderRowPresenter x:Uid="GridViewHeaderRowPresenter_1" FrameworkElement.Margin="2,0,2,0"
                                            UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                  <GridViewRowPresenterBase.Columns>
                    <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewRowPresenterBase.Columns>
                  <GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                    <Binding Path="TemplatedParent.View.ColumnHeaderContainerStyle"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.ColumnHeaderContainerStyle>
                  <GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                    <Binding Path="TemplatedParent.View.ColumnHeaderTemplate" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.ColumnHeaderTemplate>
                  <GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                    <Binding Path="TemplatedParent.View.ColumnHeaderTemplateSelector"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.ColumnHeaderTemplateSelector>
                  <GridViewHeaderRowPresenter.AllowsColumnReorder>
                    <Binding Path="TemplatedParent.View.AllowsColumnReorder" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.AllowsColumnReorder>
                  <GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                    <Binding Path="TemplatedParent.View.ColumnHeaderContextMenu"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.ColumnHeaderContextMenu>
                  <GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                    <Binding Path="TemplatedParent.View.ColumnHeaderToolTip" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewHeaderRowPresenter.ColumnHeaderToolTip>
                </GridViewHeaderRowPresenter>
              </ScrollViewer>
              <ScrollContentPresenter FrameworkElement.Name="PART_ScrollContentPresenter" x:Uid="ScrollContentPresenter_3"
                                      KeyboardNavigation.DirectionalNavigation="Local"
                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                      ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </DockPanel>
            <ScrollBar FrameworkElement.Name="PART_HorizontalScrollBar" x:Uid="ScrollBar_3" Orientation="Horizontal"
                       Grid.Row="1" RangeBase.Minimum="0.0"
                       RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                       FrameworkElement.Cursor="Arrow">
              <RangeBase.Value>
                <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
              </RangeBase.Value>
            </ScrollBar>
            <ScrollBar FrameworkElement.Name="PART_VerticalScrollBar" x:Uid="ScrollBar_4" Orientation="Vertical"
                       Grid.Column="1" RangeBase.Minimum="0.0"
                       RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                       FrameworkElement.Cursor="Arrow">
              <RangeBase.Value>
                <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
              </RangeBase.Value>
            </ScrollBar>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_216" TargetType="{x:Type ScrollViewer}"
         BasedOn="{StaticResource ExpressionScrollViewer}"/>
  <Style x:Key="RoundedScrollViewer" x:Uid="Style_128" TargetType="{x:Type ScrollViewer}">
    <Setter x:Uid="Setter_1893" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_1261" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_65" TargetType="{x:Type ScrollViewer}">
          <Border x:Uid="Border_37" Background="{TemplateBinding Control.Background}" CornerRadius="4"
                  BorderBrush="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid x:Name="Grid" x:Uid="Grid_48">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Uid="ColumnDefinition_33" Width="*"/>
                <ColumnDefinition x:Uid="ColumnDefinition_34" Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Uid="RowDefinition_30" Height="*"/>
                <RowDefinition x:Uid="RowDefinition_31" Height="Auto"/>
              </Grid.RowDefinitions>
              <Border x:Name="ScrollViewerCorner" x:Uid="ScrollViewerCorner"
                      Background="{DynamicResource ScrollbarBackgroundBrush}"
                      CornerRadius="{DynamicResource ScrollViewerCornerRadius}"
                      BorderBrush="{DynamicResource ScrollViewerCornerBorderBrush}" BorderThickness="1,1,0,0"
                      Grid.Column="1" Grid.Row="1"/>
              <ScrollContentPresenter x:Name="ScrollContentPresenter" x:Uid="ScrollContentPresenter_2" Grid.Column="0" Grid.Row="0"
                                      FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                      ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
              <ScrollBar x:Name="PART_HorizontalScrollBar" x:Uid="ScrollBar_1"
                         UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                         Grid.Column="0" Grid.Row="1" Orientation="Horizontal"
                         ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" RangeBase.Minimum="0"
                         RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                         automation:AutomationElement.Id="HorizontalScrollBar">
                <RangeBase.Value>
                  <Binding Path="HorizontalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </RangeBase.Value>
              </ScrollBar>
              <ScrollBar x:Name="PART_VerticalScrollBar" x:Uid="ScrollBar_2" FrameworkElement.Margin="1,0,0,0"
                         UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                         Grid.Column="1" Grid.Row="0" Orientation="Vertical"
                         ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" RangeBase.Minimum="0"
                         RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                         automation:AutomationElement.Id="VerticalScrollBar">
                <RangeBase.Value>
                  <Binding Path="VerticalOffset" Mode="OneWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </RangeBase.Value>
              </ScrollBar>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1170" SourceName="PART_VerticalScrollBar" Property="UIElement.Visibility"
                     Value="Collapsed">
              <Setter x:Uid="Setter_1947" TargetName="ScrollViewerCorner" Property="UIElement.Visibility"
                      Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1171" SourceName="PART_HorizontalScrollBar" Property="UIElement.Visibility"
                     Value="Collapsed">
              <Setter x:Uid="Setter_1948" TargetName="ScrollViewerCorner" Property="UIElement.Visibility"
                      Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style x:Key="ExpressionExpander" x:Uid="Style_121" TargetType="{x:Type Expander}">
    <Setter x:Uid="Setter_1203" Property="Control.Background" Value="{DynamicResource PaletteBrush}"/>
    <Setter x:Uid="Setter_1204" Property="Control.BorderBrush">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_409" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1620" Property="Control.BorderBrush" Value="{DynamicResource PaletteBrush}"/>
    <Setter x:Uid="Setter_1205" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_61" TargetType="{x:Type Expander}">
          <Grid x:Uid="Grid_43">
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_24" Height="Auto"/>
              <RowDefinition x:Name="ContentRow" x:Uid="RowDefinition_25" Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="HeaderBorder" x:Uid="Border_31" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="4">
              <CheckBox x:Name="HeaderSite" x:Uid="CheckBox_5" UIElement.Focusable="false"
                        FrameworkElement.Margin="4,0,0,0" Control.Background="{DynamicResource Text1Brush}"
                        FrameworkElement.OverridesDefaultStyle="true" FrameworkElement.HorizontalAlignment="Stretch"
                        FrameworkElement.VerticalAlignment="Stretch"
                        ContentControl.Content="{TemplateBinding HeaderedContentControl.Header}">
                <ToggleButton.IsChecked>
                  <Binding Path="IsExpanded" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </ToggleButton.IsChecked>
                <Control.Template>
                  <ControlTemplate x:Uid="ControlTemplate_62" TargetType="{x:Type CheckBox}">
                    <Grid x:Name="CheckBoxContent" x:Uid="Grid_72" FrameworkElement.ToolTip="Expand"
                          Panel.Background="Transparent" FrameworkElement.HorizontalAlignment="Left">
                      <Controls:Icon x:Name="Arrow" x:Uid="Controls:Icon_1" FrameworkElement.HorizontalAlignment="Left"
                                     FrameworkElement.VerticalAlignment="Center" FrameworkElement.Margin="4" FrameworkElement.Height="8"
                                     FrameworkElement.Width="8" UIElement.RenderTransformOrigin="0.5,0.5"
                                     SourceBrush="{DynamicResource PaneExpanderIcon}"
                                     RedChroma="{DynamicResource ArrowExpandCollapseDefaultBrush}"/>
                      <ContentPresenter x:Name="ContentHeader" x:Uid="ContentPresenter_26" FrameworkElement.HorizontalAlignment="Left"
                                        UIElement.Focusable="false" FrameworkElement.Margin="16,4,0,4" RecognizesAccessKey="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger x:Uid="Trigger_1034" Property="ToggleButton.IsChecked" Value="True">
                        <Setter x:Uid="Setter_70" TargetName="CheckBoxContent" Localization.Attributes="Value(Readable Modifiable)"
                                Property="FrameworkElement.ToolTip" Value="Collapse"/>
                        <Setter x:Uid="Setter_1206" TargetName="Arrow" Property="UIElement.RenderTransform">
                          <Setter.Value>
                            <RotateTransform x:Uid="RotateTransform_14" Angle="90"/>
                          </Setter.Value>
                        </Setter>
                      </Trigger>
                      <Trigger x:Uid="Trigger_1035" Property="UIElement.IsMouseOver" Value="true">
                        <Setter x:Uid="Setter_1208" Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}" TargetName="Arrow"
                                Property="Controls:Icon.RedChroma"/>
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Control.Template>
              </CheckBox>
            </Border>
            <Border x:Name="ExpandSite" x:Uid="Border_32" UIElement.Visibility="Collapsed" Grid.Row="1"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="0,0,4,4"
                    BorderThickness="1,0,1,1">
              <ContentPresenter x:Uid="ContentPresenter_27"
                                FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                FrameworkElement.Margin="{TemplateBinding Control.Padding}" UIElement.Focusable="false"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1036" Property="Expander.IsExpanded" Value="true">
              <Setter x:Uid="Setter_1210" TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
              <Setter x:Uid="Setter_1211" TargetName="HeaderBorder" Property="Border.CornerRadius" Value="4,4,0,0"/>
              <Setter x:Uid="Setter_1621" TargetName="HeaderBorder" Property="Border.BorderThickness" Value="1,1,1,0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1064" Property="Expander.ExpandDirection" Value="Right">
        <Setter x:Uid="Setter_1304" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_70" TargetType="{x:Type Expander}">
              <Grid x:Uid="Grid_51">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_43" Width="Auto"/>
                  <ColumnDefinition x:Name="ContentRow" x:Uid="ColumnDefinition_44" Width="*"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="HeaderBorder" x:Uid="Border_44" Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="4">
                  <CheckBox x:Name="HeaderSite" x:Uid="CheckBox_6" UIElement.Focusable="false"
                            FrameworkElement.Margin="0,4,0,0" Control.Background="{DynamicResource Text1Brush}"
                            FrameworkElement.OverridesDefaultStyle="true" FrameworkElement.HorizontalAlignment="Stretch"
                            FrameworkElement.VerticalAlignment="Stretch"
                            ContentControl.Content="{TemplateBinding HeaderedContentControl.Header}">
                    <ToggleButton.IsChecked>
                      <Binding Path="IsExpanded" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                    </ToggleButton.IsChecked>
                    <Control.Template>
                      <ControlTemplate x:Uid="ControlTemplate_71" TargetType="{x:Type CheckBox}">
                        <Grid x:Name="CheckBoxContent" x:Uid="Grid_53" FrameworkElement.ToolTip="Collapse"
                              Panel.Background="Transparent" FrameworkElement.VerticalAlignment="Top">
                          <Controls:Icon x:Name="Arrow" x:Uid="Arrow" FrameworkElement.HorizontalAlignment="Center"
                                         FrameworkElement.VerticalAlignment="Top" FrameworkElement.Margin="4" FrameworkElement.Height="8"
                                         FrameworkElement.Width="8" UIElement.RenderTransformOrigin="0.5,0.5"
                                         SourceBrush="{DynamicResource PaneExpanderIcon}"
                                         RedChroma="{DynamicResource ArrowExpandCollapseDefaultBrush}"/>
                          <ContentPresenter x:Name="ContentHeader" x:Uid="ContentPresenter_40" UIElement.Focusable="false"
                                            FrameworkElement.Margin="4,20,4,0" RecognizesAccessKey="true"
                                            FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Bottom">
                            <FrameworkElement.LayoutTransform>
                              <RotateTransform x:Uid="RotateTransform_13" Angle="-90"/>
                            </FrameworkElement.LayoutTransform>
                          </ContentPresenter>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger x:Uid="Trigger_1065" Property="ToggleButton.IsChecked" Value="False">
                            <Setter x:Uid="Setter_1759" TargetName="CheckBoxContent"
                                    Localization.Attributes="Value(Readable Modifiable)" Property="FrameworkElement.ToolTip"
                                    Value="Expand"/>
                            <Setter x:Uid="Setter_1760" TargetName="Arrow" Property="UIElement.RenderTransform">
                              <Setter.Value>
                                <RotateTransform x:Uid="RotateTransform_16" Angle="90"/>
                              </Setter.Value>
                            </Setter>
                          </Trigger>
                          <Trigger x:Uid="Trigger_1066" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_1761" Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}" TargetName="Arrow"
                                    Property="Controls:Icon.RedChroma"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Control.Template>
                  </CheckBox>
                </Border>
                <Border x:Name="ExpandSite" x:Uid="Border_45" UIElement.Visibility="Collapsed" Grid.Column="1"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="0,0,4,4">
                  <ContentPresenter x:Uid="ContentPresenter_41"
                                    FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    FrameworkElement.Margin="{TemplateBinding Control.Padding}" UIElement.Focusable="false"/>
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_1067" Property="Expander.IsExpanded" Value="true">
                  <Setter x:Uid="Setter_1309" TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
                  <Setter x:Uid="Setter_1310" TargetName="HeaderBorder" Property="Border.CornerRadius" Value="4,4,0,0"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionCheckBox" x:Uid="Style_57" TargetType="{x:Type CheckBox}">
    <Setter x:Uid="Setter_311" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1419" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1420" Property="Control.Background"
            Value="{DynamicResource CheckMarkToggleButtonBackgroundBrush}"/>
    <Setter x:Uid="Setter_1421" Property="Control.BorderBrush"
            Value="{DynamicResource CheckMarkToggleButtonDefaultBorderBrush}"/>
    <Setter x:Uid="Setter_1131" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1132" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1133" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1422" Property="Control.Padding" Value="4,0,0,0"/>
    <Setter x:Uid="Setter_1539" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1672" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_175">
          <Setter x:Uid="Setter_1660" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_105">
                <Rectangle x:Uid="Rectangle_60" UIElement.SnapsToDevicePixels="true"
                           Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1"
                           FrameworkElement.Width="12" FrameworkElement.Height="12"
                           FrameworkElement.HorizontalAlignment="Left" FrameworkElement.VerticalAlignment="Center"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1423" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_86" TargetType="{x:Type CheckBox}">
          <Grid x:Uid="Grid_66" Panel.Background="Transparent" UIElement.SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_61" Width="Auto"/>
              <ColumnDefinition x:Uid="ColumnDefinition_62" Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Uid="Border_56" FrameworkElement.Width="12" FrameworkElement.Height="12"
                    FrameworkElement.VerticalAlignment="Center" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1">
              <Grid x:Uid="Grid_75">
                <Path x:Name="CheckMark" x:Uid="Path_20" Shape.Fill="{TemplateBinding Control.Foreground}"
                      Shape.Stretch="Fill" FrameworkElement.Margin="0,0,0,0"
                      Data="M 1,5.3616667 L 4,9.3613333 9,1.3616672 C 9,1.3616672 7.0772775,0.36137562 6.5386388,1.3613338 6,2.3612921 4,6.3612346 4,6.3612346 L 2,4.3613912 Z"
                      UIElement.Visibility="Collapsed" FrameworkElement.Width="8" FrameworkElement.Height="8"/>
                <Rectangle x:Name="NinchedRectangle" x:Uid="NinchedRectangle" UIElement.Visibility="Collapsed"
                           FrameworkElement.Width="8" FrameworkElement.Height="8" Shape.Stretch="Fill"
                           FrameworkElement.Margin="2,2,2,2" Shape.Fill="{TemplateBinding Control.Foreground}"/>
              </Grid>
            </Border>
            <ContentPresenter x:Uid="ContentPresenter_49" Grid.Column="1"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true"
                              UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1081" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1424" Value="{DynamicResource CheckMarkToggleButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1082" Property="ToggleButton.IsChecked" Value="True">
              <Setter x:Uid="Setter_1425" TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1138" Property="ToggleButton.IsChecked">
              <Trigger.Value>
                <x:NullExtension x:Uid="x:Null_1"/>
              </Trigger.Value>
              <Setter x:Uid="Setter_1709" TargetName="NinchedRectangle" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1077" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1770" Value="{DynamicResource CheckMarkToggleButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1393" Value="{DynamicResource DialogDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_206" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ExpressionCheckBox}"/>
  <Style x:Key="TallCheckBox" x:Uid="Style_168" TargetType="{x:Type CheckBox}"
         BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter x:Uid="Setter_1332" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1661" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_176">
          <Setter x:Uid="Setter_1662" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_106">
                <Rectangle x:Uid="Rectangle_61" UIElement.SnapsToDevicePixels="true"
                           Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1"
                           FrameworkElement.Width="12" FrameworkElement.Height="12"
                           FrameworkElement.HorizontalAlignment="Left" FrameworkElement.VerticalAlignment="Top"
                           FrameworkElement.Margin="0,4,0,0"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1622" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_103" TargetType="{x:Type CheckBox}">
          <Grid x:Uid="Grid_73" Panel.Background="Transparent" UIElement.SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_67" Width="Auto"/>
              <ColumnDefinition x:Uid="ColumnDefinition_68" Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Uid="Border_73" FrameworkElement.Width="12" FrameworkElement.Height="12"
                    FrameworkElement.VerticalAlignment="Top" FrameworkElement.Margin="0,4,0,0"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1">
              <Grid x:Uid="Grid_76">
                <Path x:Name="CheckMark" x:Uid="Path_23" Shape.Fill="{TemplateBinding Control.Foreground}"
                      Shape.Stretch="Fill" FrameworkElement.Margin="0,0,0,0"
                      Data="M 1,5.3616667 L 4,9.3613333 9,1.3616672 C 9,1.3616672 7.0772775,0.36137562 6.5386388,1.3613338 6,2.3612921 4,6.3612346 4,6.3612346 L 2,4.3613912 Z"
                      UIElement.Visibility="Collapsed" FrameworkElement.Width="8" FrameworkElement.Height="8"/>
                <Rectangle x:Name="NinchedRectangle" x:Uid="Rectangle_66" UIElement.Visibility="Collapsed"
                           FrameworkElement.Width="8" FrameworkElement.Height="8" Shape.Stretch="Fill"
                           FrameworkElement.Margin="2,2,2,2" Shape.Fill="{TemplateBinding Control.Foreground}"/>
              </Grid>
            </Border>
            <ContentPresenter x:Uid="ContentPresenter_57" Grid.Column="1"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true"
                              UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1126" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1623" Value="{DynamicResource CheckMarkToggleButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1127" Property="ToggleButton.IsChecked" Value="True">
              <Setter x:Uid="Setter_1624" TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1139" Property="ToggleButton.IsChecked">
              <Trigger.Value>
                <x:NullExtension x:Uid="x:Null_2"/>
              </Trigger.Value>
              <Setter x:Uid="Setter_1710" TargetName="NinchedRectangle" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1128" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1771" Value="{DynamicResource CheckMarkToggleButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1625" Value="{DynamicResource DialogDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RadioButtonBase" x:Uid="Style_73" TargetType="{x:Type ToggleButton}">
    <Setter x:Uid="Setter_1028" Property="Control.Background"
            Value="{DynamicResource CheckMarkToggleButtonBackgroundBrush}"/>
    <Setter x:Uid="Setter_1029" Property="Control.BorderBrush"
            Value="{DynamicResource CheckMarkToggleButtonDefaultBorderBrush}"/>
    <Setter x:Uid="Setter_1540" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1631" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1632" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1633" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1825" Property="KeyboardNavigation.AcceptsReturn" Value="false"/>
    <Setter x:Uid="Setter_1541" Property="Control.Padding" Value="4,0,0,0"/>
    <Setter x:Uid="Setter_1542" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1543" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1663" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_177">
          <Setter x:Uid="Setter_1664" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_107">
                <Ellipse x:Uid="Ellipse_6" UIElement.SnapsToDevicePixels="true"
                         Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1"
                         FrameworkElement.Width="12" FrameworkElement.Height="12"
                         FrameworkElement.HorizontalAlignment="Left" FrameworkElement.Margin="0,4,0,0"
                         FrameworkElement.VerticalAlignment="Top"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1030" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_24" TargetType="{x:Type ToggleButton}">
          <Grid x:Uid="Grid_67" Panel.Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_63" Width="Auto"/>
              <ColumnDefinition x:Uid="ColumnDefinition_64" Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid x:Uid="Grid_8" FrameworkElement.Width="12" FrameworkElement.Height="12"
                  FrameworkElement.Margin="0,4,0,0" FrameworkElement.VerticalAlignment="Top">
              <Ellipse x:Name="Ellipse_Border" x:Uid="Ellipse_1" Shape.Fill="{TemplateBinding Control.Background}"
                       Shape.Stroke="{TemplateBinding Control.BorderBrush}" Shape.StrokeThickness="1"
                       FrameworkElement.HorizontalAlignment="Stretch" FrameworkElement.VerticalAlignment="Stretch"/>
              <Ellipse x:Name="CheckMark" x:Uid="Ellipse_2" Shape.Fill="{TemplateBinding Control.Foreground}"
                       FrameworkElement.Width="6" FrameworkElement.Height="6"
                       FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"/>
            </Grid>
            <ContentPresenter x:Uid="ContentPresenter_5" Grid.Column="1"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1004" Property="ToggleButton.IsChecked" Value="false">
              <Setter x:Uid="Setter_1031" TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1005" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1032" Value="{DynamicResource CheckMarkToggleButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1114" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1764" Value="{DynamicResource CheckMarkToggleButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1547" Value="{DynamicResource DialogDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_187" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonBase}"/>
  <Style x:Uid="Style_188" TargetType="{x:Type Controls:WorkaroundRadioButton}"
         BasedOn="{StaticResource RadioButtonBase}"/>
  <Style x:Uid="Style_127" TargetType="{x:Type GroupBox}">
    <Setter x:Uid="Setter_1990" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_1254" Property="Control.BorderBrush" Value="Transparent"/>
    <Setter x:Uid="Setter_1255" Property="Control.BorderThickness" Value="1,1,1,1"/>
    <Setter x:Uid="Setter_1991" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1256" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_64" TargetType="{x:Type GroupBox}">
          <Grid x:Name="Grid" x:Uid="Grid_47" UIElement.SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_29" Width="6"/>
              <ColumnDefinition x:Uid="ColumnDefinition_30" Width="Auto"/>
              <ColumnDefinition x:Uid="ColumnDefinition_31" Width="*"/>
              <ColumnDefinition x:Uid="ColumnDefinition_32" Width="6"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_26" Height="Auto"/>
              <RowDefinition x:Uid="RowDefinition_27" Height="Auto"/>
              <RowDefinition x:Uid="RowDefinition_28" Height="*"/>
              <RowDefinition x:Uid="RowDefinition_29" Height="6"/>
            </Grid.RowDefinitions>
            <Border x:Name="Border" x:Uid="Border_34" Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                    Background="{TemplateBinding Control.Background}" BorderBrush="#00FFFFFF"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4,4,4,4"/>
            <Border x:Name="Header" x:Uid="Border_35" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,0,3,0">
              <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_30"
                                UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                RecognizesAccessKey="true"
                                ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                                ContentSource="Header"/>
            </Border>
            <ContentPresenter x:Name="ContentPresenter1" x:Uid="ContentPresenter_31"
                              UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}" Grid.Column="1" Grid.ColumnSpan="2"
                              Grid.Row="2" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
            <Border x:Name="Border1" x:Uid="Border_36" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4,4,4,4">
              <UIElement.OpacityMask>
                <MultiBinding x:Uid="MultiBinding_6" UpdateSourceTrigger="Default" ConverterParameter="7">
                  <MultiBinding.Converter>
                    <BorderGapMaskConverter x:Uid="BorderGapMaskConverter_1"/>
                  </MultiBinding.Converter>
                  <Binding x:Uid="Binding_22" Path="ActualWidth" ElementName="Header"/>
                  <Binding x:Uid="Binding_23" Path="ActualWidth" RelativeSource="{RelativeSource Self, AncestorType={x:Null}}"/>
                  <Binding x:Uid="Binding_24" Path="ActualHeight"
                           RelativeSource="{RelativeSource Self, AncestorType={x:Null}}"/>
                </MultiBinding>
              </UIElement.OpacityMask>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionScrollBarRepeatButton" x:Uid="Style_99" TargetType="{x:Type RepeatButton}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_288" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_1708" Property="Control.Foreground" Value="{DynamicResource ButtonDefaultBrush}"/>
    <Setter x:Uid="Setter_1064" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_26" TargetType="{x:Type RepeatButton}">
          <Border x:Name="Border" x:Uid="Border_19" Background="Transparent">
            <ContentPresenter x:Name="ContentPresenter" x:Uid="ContentPresenter_18" FrameworkElement.HorizontalAlignment="Center"
                              FrameworkElement.VerticalAlignment="Center" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1010" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1073" Value="{DynamicResource ScrollbarMouseOverBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1014" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1077" Value="{DynamicResource ScrollbarPressedBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_98" TargetType="{x:Type ScrollBar}">
    <Setter x:Uid="Setter_1065" Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter x:Uid="Setter_1066" Property="Control.Foreground"
            Value="{DynamicResource ScrollbarForegroundBrush}"/>
    <Setter x:Uid="Setter_1067" Property="Control.Background"
            Value="{DynamicResource ScrollbarBackgroundBrush}"/>
    <Setter x:Uid="Setter_1068" Property="FrameworkElement.Width"
            Value="{DynamicResource {x:Static ExpressionExtension:ExpressionDockingConstants.ScrollBarSize}}"/>
    <Setter x:Uid="Setter_1069" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_27" TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" x:Uid="Grid_33" Panel.Background="{TemplateBinding Control.Background}">
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_6" MaxHeight="18"/>
              <RowDefinition x:Uid="RowDefinition_7" Height="0.00001*"/>
              <RowDefinition x:Uid="RowDefinition_8" MaxHeight="18"/>
            </Grid.RowDefinitions>
            <RepeatButton x:Name="DecreaseRepeat" x:Uid="RepeatButton_1" ButtonBase.Command="ScrollBar.LineUpCommand"
                          FrameworkElement.Style="{StaticResource ExpressionScrollBarRepeatButton}"
                          FrameworkElement.Margin="0,0,0,1">
              <Path x:Name="DecreaseArrow" x:Uid="Path_1" Data="M 0,7 L 3.5,0 7,7 Z"
                    FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center">
                <Shape.Fill>
                  <Binding ElementName="DecreaseRepeat" Path="Foreground"/>
                </Shape.Fill>
              </Path>
            </RepeatButton>
            <Track x:Name="PART_Track" x:Uid="Track_1" Grid.Row="1" IsDirectionReversed="true"
                   UIElement.Focusable="false">
              <Track.Thumb>
                <Thumb x:Name="Thumb" x:Uid="Thumb_1" Control.Background="{DynamicResource ButtonDefaultBrush}">
                  <FrameworkElement.Style>
                    <Style x:Uid="Style_100" TargetType="{x:Type Thumb}">
                      <Style.BasedOn>
                        <x:NullExtension/>
                      </Style.BasedOn>
                      <Setter x:Uid="Setter_1070" Property="Control.Template">
                        <Setter.Value>
                          <ControlTemplate x:Uid="ControlTemplate_28" TargetType="{x:Type Thumb}">
                            <Grid x:Name="Grid" x:Uid="Grid_34">
                              <Rectangle x:Uid="Rectangle_8" FrameworkElement.HorizontalAlignment="Stretch"
                                         FrameworkElement.VerticalAlignment="Stretch" FrameworkElement.Width="Auto"
                                         FrameworkElement.Height="Auto" Shape.Fill="Transparent"/>
                              <Rectangle x:Name="Rectangle1" x:Uid="Rectangle_9" FrameworkElement.HorizontalAlignment="Stretch"
                                         FrameworkElement.VerticalAlignment="Stretch" FrameworkElement.Width="7"
                                         FrameworkElement.Height="Auto" RadiusX="4" RadiusY="4"
                                         Shape.Fill="{TemplateBinding Control.Background}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                              <Trigger x:Uid="Trigger_1009" Property="FrameworkElement.Tag" Value="Horizontal">
                                <Setter x:Uid="Setter_1071" TargetName="Rectangle1" Property="FrameworkElement.Width" Value="Auto"/>
                                <Setter x:Uid="Setter_1072" TargetName="Rectangle1" Property="FrameworkElement.Height" Value="7"/>
                              </Trigger>
                            </ControlTemplate.Triggers>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Style>
                </Thumb>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" x:Uid="RepeatButton_2" ButtonBase.Command="ScrollBar.PageDownCommand"
                              UIElement.Opacity="0" UIElement.Focusable="false"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" x:Uid="RepeatButton_3" ButtonBase.Command="ScrollBar.PageUpCommand"
                              UIElement.Opacity="0" UIElement.Focusable="false"/>
              </Track.DecreaseRepeatButton>
            </Track>
            <RepeatButton x:Name="IncreaseRepeat" x:Uid="RepeatButton_4" Grid.Row="2"
                          ButtonBase.Command="ScrollBar.LineDownCommand"
                          FrameworkElement.Style="{StaticResource ExpressionScrollBarRepeatButton}"
                          FrameworkElement.Margin="0,1,0,0">
              <Path x:Name="IncreaseArrow" x:Uid="Path_2" Data="M 0,0 L 3.5,7 7,0 Z"
                    FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center">
                <Shape.Fill>
                  <Binding ElementName="IncreaseRepeat" Path="Foreground"/>
                </Shape.Fill>
              </Path>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1012" SourceName="Thumb" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1075" Value="{DynamicResource ScrollbarMouseOverBrush}" TargetName="Thumb"
                      Property="Control.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1013" SourceName="Thumb" Property="Thumb.IsDragging" Value="true">
              <Setter x:Uid="Setter_1076" Value="{DynamicResource ScrollbarPressedBrush}" TargetName="Thumb"
                      Property="Control.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1016" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1079" Value="{DynamicResource LayerChild1Brush}" TargetName="IncreaseArrow"
                      Property="Shape.Fill"/>
              <Setter x:Uid="Setter_1080" Value="{DynamicResource LayerChild1Brush}" TargetName="DecreaseArrow"
                      Property="Shape.Fill"/>
              <Setter x:Uid="Setter_1081" TargetName="Thumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1017" Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter x:Uid="Setter_1082" TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform x:Uid="RotateTransform_1" Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter x:Uid="Setter_1083" TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform x:Uid="RotateTransform_2" Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter x:Uid="Setter_1084" Property="FrameworkElement.Width" Value="Auto"/>
              <Setter x:Uid="Setter_1085" Property="FrameworkElement.Height" Value="17"/>
              <Setter x:Uid="Setter_1086" TargetName="Thumb" Property="FrameworkElement.Tag" Value="Horizontal"/>
              <Setter x:Uid="Setter_1087" TargetName="DecreaseRepeat" Property="ButtonBase.Command"
                      Value="ScrollBar.LineLeftCommand"/>
              <Setter x:Uid="Setter_1088" TargetName="IncreaseRepeat" Property="ButtonBase.Command"
                      Value="ScrollBar.LineRightCommand"/>
              <Setter x:Uid="Setter_1089" TargetName="PageDown" Property="ButtonBase.Command"
                      Value="ScrollBar.PageLeftCommand"/>
              <Setter x:Uid="Setter_1090" TargetName="PageUp" Property="ButtonBase.Command"
                      Value="ScrollBar.PageRightCommand"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_101" TargetType="{x:Type Controls:ExtendedScrollBar}"
         BasedOn="{StaticResource {x:Type ScrollBar}}"/>
  <Style x:Key="MenuScrollViewer" x:Uid="Style_78" TargetType="{x:Type ScrollViewer}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_417" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
    <Setter x:Uid="Setter_418" Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_419" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_39" TargetType="{x:Type ScrollViewer}">
          <Grid x:Uid="Grid_27">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_21" Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_14" Height="Auto"/>
              <RowDefinition x:Uid="RowDefinition_15" Height="*"/>
              <RowDefinition x:Uid="RowDefinition_16" Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Uid="Border_24" Grid.Column="0" Grid.Row="1">
              <ScrollContentPresenter x:Uid="ScrollContentPresenter_1"
                                      ContentPresenter.Content="{TemplateBinding ContentControl.Content}"
                                      ContentPresenter.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      ContentPresenter.ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                      FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
            </Border>
            <RepeatButton x:Name="LineUpButton" x:Uid="RepeatButton_5" UIElement.Focusable="false" Grid.Column="0"
                          Grid.Row="0" ButtonBase.Command="ScrollBar.LineUpCommand">
              <UIElement.Visibility>
                <MultiBinding x:Uid="MultiBinding_1" BindingBase.FallbackValue="Visibility.Collapsed" ConverterParameter="0">
                  <MultiBinding.Converter>
                    <MenuScrollingVisibilityConverter x:Uid="MenuScrollingVisibilityConverter_1"/>
                  </MultiBinding.Converter>
                  <Binding x:Uid="Binding_1" Path="ComputedVerticalScrollBarVisibility"
                           RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_2" Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_3" Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_4" Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </UIElement.Visibility>
              <FrameworkElement.Style>
                <Style x:Uid="Style_79" TargetType="{x:Type RepeatButton}">
                  <Style.BasedOn>
                    <x:NullExtension/>
                  </Style.BasedOn>
                  <Setter x:Uid="Setter_420" Property="ButtonBase.ClickMode" Value="Hover"/>
                  <Setter x:Uid="Setter_421" Property="FrameworkElement.MinWidth" Value="0"/>
                  <Setter x:Uid="Setter_422" Property="FrameworkElement.MinHeight" Value="0"/>
                  <Setter x:Uid="Setter_423" Property="Control.Template">
                    <Setter.Value>
                      <ControlTemplate x:Uid="ControlTemplate_40" TargetType="{x:Type RepeatButton}">
                        <DockPanel x:Uid="DockPanel_1" Panel.Background="#00FFFFFF">
                          <Rectangle x:Name="R1" x:Uid="Rectangle_43" Shape.Fill="#00FFFFFF" FrameworkElement.Width="1"
                                     DockPanel.Dock="Right"/>
                          <Rectangle x:Name="B1" x:Uid="Rectangle_44" Shape.Fill="#00FFFFFF" FrameworkElement.Height="1"
                                     DockPanel.Dock="Bottom"/>
                          <Rectangle x:Name="L1" x:Uid="Rectangle_45" Shape.Fill="#00FFFFFF" FrameworkElement.Width="1"
                                     DockPanel.Dock="Left"/>
                          <Rectangle x:Name="T1" x:Uid="Rectangle_46" Shape.Fill="#00FFFFFF" FrameworkElement.Height="1"
                                     DockPanel.Dock="Top"/>
                          <ContentPresenter x:Name="ContentContainer" x:Uid="ContentPresenter_14"
                                            Content="{TemplateBinding ContentControl.Content}"
                                            ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                            FrameworkElement.Margin="2,2,2,2" FrameworkElement.HorizontalAlignment="Center"
                                            FrameworkElement.VerticalAlignment="Center"/>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                          <Trigger x:Uid="Trigger_70" Property="ButtonBase.IsPressed" Value="true">
                            <Setter x:Uid="Setter_424" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    TargetName="R1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_425" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    TargetName="B1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_426" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                    TargetName="L1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_427" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                    TargetName="T1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_428" TargetName="ContentContainer" Property="FrameworkElement.Margin" Value="3,3,1,1"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Style>
              <ButtonBase.CommandTarget>
                <Binding x:Uid="Binding_5" RelativeSource="{RelativeSource TemplatedParent}"/>
              </ButtonBase.CommandTarget>
              <Path x:Uid="Path_6" Shape.Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}">
                <Path.Data>
                  <PathGeometry x:Uid="PathGeometry_32">
                    <PathGeometry.Figures>
                      <PathFigureCollection x:Uid="PathFigureCollection_32">
                        <PathFigure x:Uid="PathFigure_32" StartPoint="0,4" IsFilled="true" IsClosed="true">
                          <LineSegment x:Uid="LineSegment_49" Point="3.5,0"/>
                          <LineSegment x:Uid="LineSegment_50" Point="7,4"/>
                        </PathFigure>
                      </PathFigureCollection>
                    </PathGeometry.Figures>
                  </PathGeometry>
                </Path.Data>
              </Path>
            </RepeatButton>
            <RepeatButton x:Name="LineDownButton" x:Uid="RepeatButton_6" UIElement.Focusable="false" Grid.Column="0"
                          Grid.Row="2" ButtonBase.Command="ScrollBar.LineDownCommand">
              <UIElement.Visibility>
                <MultiBinding x:Uid="MultiBinding_2" BindingBase.FallbackValue="Visibility.Collapsed" ConverterParameter="100">
                  <MultiBinding.Converter>
                    <MenuScrollingVisibilityConverter x:Uid="MenuScrollingVisibilityConverter_2"/>
                  </MultiBinding.Converter>
                  <Binding x:Uid="Binding_6" Path="ComputedVerticalScrollBarVisibility"
                           RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_7" Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_8" Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding x:Uid="Binding_9" Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </UIElement.Visibility>
              <FrameworkElement.Style>
                <Style x:Uid="Style_80" TargetType="{x:Type RepeatButton}">
                  <Style.BasedOn>
                    <x:NullExtension/>
                  </Style.BasedOn>
                  <Setter x:Uid="Setter_429" Property="ButtonBase.ClickMode" Value="Hover"/>
                  <Setter x:Uid="Setter_430" Property="FrameworkElement.MinWidth" Value="0"/>
                  <Setter x:Uid="Setter_431" Property="FrameworkElement.MinHeight" Value="0"/>
                  <Setter x:Uid="Setter_432" Property="Control.Template">
                    <Setter.Value>
                      <ControlTemplate x:Uid="ControlTemplate_41" TargetType="{x:Type RepeatButton}">
                        <DockPanel x:Uid="DockPanel_2" Panel.Background="#00FFFFFF">
                          <Rectangle x:Name="R1" x:Uid="Rectangle_47" Shape.Fill="#00FFFFFF" FrameworkElement.Width="1"
                                     DockPanel.Dock="Right"/>
                          <Rectangle x:Name="B1" x:Uid="Rectangle_48" Shape.Fill="#00FFFFFF" FrameworkElement.Height="1"
                                     DockPanel.Dock="Bottom"/>
                          <Rectangle x:Name="L1" x:Uid="Rectangle_49" Shape.Fill="#00FFFFFF" FrameworkElement.Width="1"
                                     DockPanel.Dock="Left"/>
                          <Rectangle x:Name="T1" x:Uid="Rectangle_50" Shape.Fill="#00FFFFFF" FrameworkElement.Height="1"
                                     DockPanel.Dock="Top"/>
                          <ContentPresenter x:Name="ContentContainer" x:Uid="ContentPresenter_15"
                                            Content="{TemplateBinding ContentControl.Content}"
                                            ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                            FrameworkElement.Margin="2,2,2,2" FrameworkElement.HorizontalAlignment="Center"
                                            FrameworkElement.VerticalAlignment="Center"/>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                          <Trigger x:Uid="Trigger_71" Property="ButtonBase.IsPressed" Value="true">
                            <Setter x:Uid="Setter_433" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    TargetName="R1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_434" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    TargetName="B1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_435" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                    TargetName="L1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_436" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                    TargetName="T1" Property="Shape.Fill"/>
                            <Setter x:Uid="Setter_437" TargetName="ContentContainer" Property="FrameworkElement.Margin" Value="3,3,1,1"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </FrameworkElement.Style>
              <ButtonBase.CommandTarget>
                <Binding x:Uid="Binding_10" RelativeSource="{RelativeSource TemplatedParent}"/>
              </ButtonBase.CommandTarget>
              <Path x:Uid="Path_7" Shape.Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}">
                <Path.Data>
                  <PathGeometry x:Uid="PathGeometry_33">
                    <PathGeometry.Figures>
                      <PathFigureCollection x:Uid="PathFigureCollection_33">
                        <PathFigure x:Uid="PathFigure_33" StartPoint="0,0" IsFilled="true" IsClosed="true">
                          <LineSegment x:Uid="LineSegment_51" Point="3.5,4"/>
                          <LineSegment x:Uid="LineSegment_52" Point="7,0"/>
                        </PathFigure>
                      </PathFigureCollection>
                    </PathGeometry.Figures>
                  </PathGeometry>
                </Path.Data>
              </Path>
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Slider_RepeatButton" x:Uid="Style_62" TargetType="{x:Type RepeatButton}">
    <Setter x:Uid="Setter_320" Property="Control.IsTabStop" Value="false"/>
    <Setter x:Uid="Setter_321" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_322" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_33" TargetType="{x:Type RepeatButton}">
          <Border x:Uid="Border_20" Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Slider_Thumb" x:Uid="Style_63" TargetType="{x:Type Thumb}">
    <Setter x:Uid="Setter_323" Property="Control.Background" Value="{DynamicResource ButtonSelectionGrad}"/>
    <Setter x:Uid="Setter_325" Property="FrameworkElement.Width" Value="12"/>
    <Setter x:Uid="Setter_326" Property="FrameworkElement.Height" Value="12"/>
    <Setter x:Uid="Setter_565" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_327" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_34" TargetType="{x:Type Thumb}">
          <Ellipse x:Uid="Ellipse_3" Shape.Stroke="{DynamicResource PaneHighlightBrush}" Shape.StrokeThickness="1"
                   Shape.Fill="{TemplateBinding Control.Background}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_45" Property="Thumb.IsDragging" Value="true">
        <Setter x:Uid="Setter_328" Property="Control.Background" Value="{DynamicResource ButtonOverBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_46" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_329" Property="Control.Background" Value="{DynamicResource ButtonOverBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_47" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_330" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_64" TargetType="{x:Type Slider}">
    <Setter x:Uid="Setter_332" Property="Control.Background" Value="{DynamicResource ButtonSelectionGrad}"/>
    <Setter x:Uid="Setter_333" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_334" Property="Control.BorderBrush" Value="{DynamicResource PaneHighlightBrush}"/>
    <Setter x:Uid="Setter_335" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_336" Property="FrameworkElement.MinWidth" Value="11"/>
    <Setter x:Uid="Setter_337" Property="FrameworkElement.MinHeight" Value="16"/>
    <Setter x:Uid="Setter_566" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_340" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_35" TargetType="{x:Type Slider}">
          <Grid x:Uid="Grid_24" UIElement.ClipToBounds="false">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_16" Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Uid="RowDefinition_9" Height="Auto"/>
              <RowDefinition x:Uid="RowDefinition_10" Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
              <RowDefinition x:Uid="RowDefinition_11" Height="Auto"/>
              <RowDefinition x:Uid="RowDefinition_12" Height="*"/>
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick" x:Uid="TickBar_1" Grid.Row="0" Placement="Top"
                     Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Height="4"
                     UIElement.Visibility="Collapsed"/>
            <Border x:Uid="Border_21" FrameworkElement.Height="4" Grid.Row="1" CornerRadius="2"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    FrameworkElement.Width="{TemplateBinding FrameworkElement.Width}"/>
            <Canvas x:Uid="Canvas_2" Grid.Row="1" FrameworkElement.VerticalAlignment="Center"
                    FrameworkElement.Height="4">
              <Rectangle x:Name="PART_SelectionRange" x:Uid="Rectangle_40" Canvas.Top="1"
                         Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Height="2.0"
                         UIElement.Visibility="Hidden"/>
            </Canvas>
            <Track FrameworkElement.Name="PART_Track" x:Uid="Track_2" Grid.Row="1">
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Uid="RepeatButton_11" FrameworkElement.Style="{StaticResource Slider_RepeatButton}"
                              ButtonBase.Command="Slider.DecreaseLarge"/>
              </Track.DecreaseRepeatButton>
              <Track.Thumb>
                <Thumb x:Uid="Thumb_3" FrameworkElement.Style="{StaticResource Slider_Thumb}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Uid="RepeatButton_12" FrameworkElement.Style="{StaticResource Slider_RepeatButton}"
                              ButtonBase.Command="Slider.IncreaseLarge"/>
              </Track.IncreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick" x:Uid="TickBar_2" Grid.Row="2" Fill="{TemplateBinding Control.Foreground}"
                     Placement="Bottom" FrameworkElement.Height="4" UIElement.Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_48" Property="Slider.TickPlacement" Value="TopLeft">
              <Setter x:Uid="Setter_343" TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_49" Property="Slider.TickPlacement" Value="BottomRight">
              <Setter x:Uid="Setter_344" TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_50" Property="Slider.TickPlacement" Value="Both">
              <Setter x:Uid="Setter_345" TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
              <Setter x:Uid="Setter_346" TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_51" Property="Slider.IsSelectionRangeEnabled" Value="true">
              <Setter x:Uid="Setter_347" TargetName="PART_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_4" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_226" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
      <Trigger x:Uid="Trigger_52" Property="Slider.Orientation" Value="Vertical">
        <Setter x:Uid="Setter_348" Property="FrameworkElement.MinHeight" Value="11"/>
        <Setter x:Uid="Setter_349" Property="FrameworkElement.Height" Value="100"/>
        <Setter x:Uid="Setter_350" Property="FrameworkElement.MinWidth" Value="16"/>
        <Setter x:Uid="Setter_351" Property="FrameworkElement.Width" Value="16"/>
        <Setter x:Uid="Setter_352" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_36" TargetType="{x:Type Slider}">
              <Grid x:Uid="Grid_25" UIElement.ClipToBounds="false">
                <Grid.RowDefinitions>
                  <RowDefinition x:Uid="RowDefinition_13" Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_17" Width="Auto"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_18" Width="Auto" MinWidth="{TemplateBinding FrameworkElement.MinHeight}"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_19" Width="Auto"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_20" Width="*"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="LeftTick" x:Uid="TickBar_3" Grid.Column="0" Placement="Left"
                         Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Width="4"
                         UIElement.Visibility="Collapsed"/>
                <Border x:Uid="Border_22" FrameworkElement.Width="4" Grid.Column="1" CornerRadius="2"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        FrameworkElement.Height="{TemplateBinding FrameworkElement.Height}"/>
                <Canvas x:Uid="Canvas_3" Grid.Column="1" FrameworkElement.HorizontalAlignment="Center"
                        FrameworkElement.Width="4">
                  <Rectangle x:Name="PART_SelectionRange" x:Uid="Rectangle_41" Canvas.Right="1"
                             Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Width="2"
                             UIElement.Visibility="Hidden"/>
                </Canvas>
                <Track FrameworkElement.Name="PART_Track" x:Uid="Track_3" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton x:Uid="RepeatButton_13" FrameworkElement.Style="{StaticResource Slider_RepeatButton}"
                                  ButtonBase.Command="Slider.DecreaseLarge"/>
                  </Track.DecreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb x:Uid="Thumb_4" FrameworkElement.Style="{StaticResource Slider_Thumb}"/>
                  </Track.Thumb>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton x:Uid="RepeatButton_14" FrameworkElement.Style="{StaticResource Slider_RepeatButton}"
                                  ButtonBase.Command="Slider.IncreaseLarge"/>
                  </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="RightTick" x:Uid="TickBar_4" Grid.Column="2" Fill="{TemplateBinding Control.Foreground}"
                         Placement="Right" FrameworkElement.Width="4" UIElement.Visibility="Collapsed"/>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_53" Property="Slider.TickPlacement" Value="TopLeft">
                  <Setter x:Uid="Setter_355" TargetName="LeftTick" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_54" Property="Slider.TickPlacement" Value="BottomRight">
                  <Setter x:Uid="Setter_356" TargetName="RightTick" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_55" Property="Slider.TickPlacement" Value="Both">
                  <Setter x:Uid="Setter_357" TargetName="LeftTick" Property="UIElement.Visibility" Value="Visible"/>
                  <Setter x:Uid="Setter_358" TargetName="RightTick" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
                <Trigger x:Uid="Trigger_56" Property="Slider.IsSelectionRangeEnabled" Value="true">
                  <Setter x:Uid="Setter_359" TargetName="PART_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="BaseTextBoxTemplate" PresentationOptions:Freeze="false" x:Uid="ControlTemplate_1"
                   TargetType="{x:Type TextBox}">
    <Border x:Uid="Border_17" UIElement.Focusable="false" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
      <ScrollViewer x:Name="PART_ContentHost" x:Uid="ScrollViewer_1"
                    FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                    FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
    </Border>
  </ControlTemplate>
  <Style x:Key="BaseTextBox" x:Uid="Style_71" TargetType="{x:Type TextBox}">
    <Setter x:Uid="Setter_11" Property="Border.BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_180" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_227" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_1128" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1129" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1130" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1465" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_1466" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1470" Property="Control.Padding" Value="2,0,0,0"/>
    <Setter x:Uid="Setter_1471" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1665" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_15" Property="Control.Template" Value="{StaticResource BaseTextBoxTemplate}"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1002" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1347" Property="Control.Foreground" Value="{DynamicResource DisabledTextBrush}"/>
        <Setter x:Uid="Setter_1626" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1003" Property="UIElement.IsFocused" Value="true">
        <Setter x:Uid="Setter_1054" Property="Control.Background" Value="{DynamicResource DarkBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1134" Property="UIElement.IsKeyboardFocused" Value="true">
        <Setter x:Uid="TextBoxFocusForegroundSetter" Localization.Attributes="Value(Readable Modifiable None)"
                Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
        <Setter x:Uid="TextBoxFocusBackgroundSetter" Localization.Attributes="Value(Readable Modifiable None)"
                Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1129" Property="TextBoxBase.IsReadOnly" Value="true">
        <Setter x:Uid="Setter_1627" Property="Control.Foreground" Value="{DynamicResource DisabledTextBrush}"/>
        <Setter x:Uid="Setter_1628" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_4" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}"/>
  <Style x:Uid="Style_6" TargetType="{x:Type Controls:EditTextBox}"
         BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter x:Uid="Setter_19" Property="FrameworkElement.MinWidth" Value="45"/>
    <Setter x:Uid="Setter_382" Property="Controls:EditTextBox.CommitCommand">
      <Setter.Value>
        <Binding Path="CommitCommand"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_383" Property="Controls:EditTextBox.RevertCommand">
      <Setter.Value>
        <Binding Path="RevertCommand"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_384" Property="TextBox.Text">
      <Setter.Value>
        <Binding Path="UIObject" UpdateSourceTrigger="PropertyChanged"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_58" TargetType="{x:Type Controls:VerifyingEditBox}"
         BasedOn="{StaticResource {x:Type TextBox}}"/>
  <Style x:Uid="Style_145" TargetType="{x:Type Controls:OverlayTextBox}"
         BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter x:Uid="Setter_1943" Property="Control.Padding" Value="3"/>
    <Setter x:Uid="Setter_1372" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_126" TargetType="{x:Type Controls:OverlayTextBox}">
          <Border x:Uid="Border_4" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid x:Uid="Grid_23">
              <ScrollViewer x:Name="PART_ContentHost" x:Uid="PART_ContentHost" FrameworkElement.Margin="0,0,0,1"
                            FrameworkElement.VerticalAlignment="Center"/>
              <TextBlock x:Name="Overlay" x:Uid="Overlay" UIElement.IsHitTestVisible="false"
                         Text="{TemplateBinding Controls:OverlayTextBox.OverlayText}"
                         FrameworkElement.HorizontalAlignment="Left" FrameworkElement.VerticalAlignment="Center"
                         FrameworkElement.Margin="6,0,0,1" FontStyle="Italic" UIElement.Opacity="0.66"
                         FontFamily="{TemplateBinding Control.FontFamily}" FontWeight="{TemplateBinding Control.FontWeight}"
                         FontSize="{TemplateBinding Control.FontSize}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_74" Property="Controls:OverlayTextBox.HasText" Value="true">
              <Setter x:Uid="Setter_1919" TargetName="Overlay" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_207" TargetType="{x:Type Controls:ClearableTextBox}">
    <Setter x:Uid="Setter_1944" Property="Control.Padding" Value="3,0,0,0"/>
    <Setter x:Uid="Setter_1920" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_127" TargetType="{x:Type Controls:ClearableTextBox}">
          <Border x:Uid="Border_87" CornerRadius="3" BorderThickness="0"
                  Background="{DynamicResource SearchBoxBackgroundBrush}">
            <Grid x:Uid="Grid_81">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Uid="ColumnDefinition_83" Width="*"/>
                <ColumnDefinition x:Uid="ColumnDefinition_84" Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Controls:OverlayTextBox x:Name="PART_ContentHost" x:Uid="Controls:OverlayTextBox_1"
                                       Control.Background="{DynamicResource TransparentTextBoxBackgroundBrush}"
                                       Control.Padding="{TemplateBinding Control.Padding}" automation:AutomationElement.Id="SearchTextBox">
                <TextBox.Text>
                  <Binding Path="Text" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"
                           UpdateSourceTrigger="PropertyChanged"/>
                </TextBox.Text>
                <Controls:OverlayTextBox.OverlayText>
                  <Binding Path="OverlayText" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Controls:OverlayTextBox.OverlayText>
              </Controls:OverlayTextBox>
              <Button FrameworkElement.Name="ClearSearchButton" x:Uid="Button_2"
                      FrameworkElement.Style="{DynamicResource FlatIconButtonStyle}" Grid.Column="1"
                      FrameworkElement.Height="18" FrameworkElement.Width="18" UIElement.Focusable="false"
                      FrameworkElement.VerticalAlignment="Stretch"
                      ButtonBase.Command="{TemplateBinding Controls:ClearableTextBox.ClearTextFieldCommand}"
                      FrameworkElement.ToolTip="Clear" automation:AutomationElement.Id="ClearSearch"
                      Controls:Icon.SelectedDrawingBrush="{StaticResource ClearSearchIcon}"
                      Controls:Icon.DeselectedDrawingBrush="{StaticResource ClearSearchIcon}"
                      Controls:Icon.RedChroma="{DynamicResource SearchBoxIconNormalBrush}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1166" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1921" TargetName="ClearSearchButton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter x:Uid="Setter_1922" TargetName="PART_ContentHost" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <MultiDataTrigger x:Uid="MultiTrigger_22">
              <MultiDataTrigger.Conditions>
                <Condition x:Uid="Condition_51" Binding="{Binding IsMouseOver, ElementName=ClearSearchButton}" Value="True"/>
                <Condition x:Uid="Condition_52"
                           Binding="{Binding Text, ElementName=PART_ContentHost, Converter={StaticResource StringEmptyToBoolConverter}}"
                           Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter x:Uid="Setter_1979" TargetName="ClearSearchButton"
                      Value="{DynamicResource SearchBoxIconHoverBrush}" Property="Controls:Icon.RedChroma"/>
            </MultiDataTrigger>
            <DataTrigger x:Uid="DataTrigger_1" Value="True"
                         Binding="{Binding Text, ElementName=PART_ContentHost, Converter={StaticResource StringEmptyToBoolConverter}}">
              <Setter x:Uid="Setter_1980" TargetName="ClearSearchButton" Value="{StaticResource SearchLoopIcon}"
                      Property="Controls:Icon.SelectedDrawingBrush"/>
              <Setter x:Uid="Setter_1981" TargetName="ClearSearchButton" Value="{StaticResource SearchLoopIcon}"
                      Property="Controls:Icon.DeselectedDrawingBrush"/>
              <Setter x:Uid="Setter_1984" TargetName="ClearSearchButton" Property="FrameworkElement.ToolTip">
                <Setter.Value>
                  <x:NullExtension/>
                </Setter.Value>
              </Setter>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionButtonControl" x:Uid="Style_31" TargetType="{x:Type ContentControl}">
    <Setter x:Uid="Setter_365" Property="Control.BorderThickness" Value="1,1,1,1"/>
    <Setter x:Uid="Setter_26" Property="FrameworkElement.MinWidth" Value="20"/>
    <Setter x:Uid="Setter_237" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_238" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
  </Style>
  <Style x:Uid="Style_32" TargetType="{x:Type ButtonBase}">
    <Setter x:Uid="Setter_493" Property="Control.Background"
            Value="{DynamicResource ButtonDefaultBackgroundBrush}"/>
    <Setter x:Uid="Setter_494" Property="Control.BorderBrush"
            Value="{DynamicResource ButtonDefaultBorderBrush}"/>
    <Setter x:Uid="Setter_1003" Property="Control.Foreground" Value="{DynamicResource ButtonDefaultTextBrush}"/>
    <Setter x:Uid="Setter_1410" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_229" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_239" Property="FrameworkElement.MinWidth" Value="50"/>
    <Setter x:Uid="Setter_240" Property="FrameworkElement.MinHeight" Value="18"/>
    <Setter x:Uid="Setter_1634" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1635" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1636" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1544" Property="Control.Padding" Value="1"/>
    <Setter x:Uid="Setter_1668" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_179">
          <Setter x:Uid="Setter_1669" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_109">
                <Rectangle x:Uid="Rectangle_63" UIElement.SnapsToDevicePixels="true"
                           Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1" RadiusX="3"
                           RadiusY="3"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_25" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_2" TargetType="{x:Type ButtonBase}">
          <Border x:Name="ButtonTemplateGrid" x:Uid="Grid_2" Background="{TemplateBinding Control.Background}"
                  CornerRadius="3" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_1" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1001" Property="UIElement.IsFocused" Value="true">
              <Setter x:Uid="Setter_1006" Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1008" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_91" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_495" Value="{DynamicResource ButtonMouseOverBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1009" Value="{DynamicResource ButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1010" Value="{DynamicResource ButtonMouseOverTextBrush}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_58" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_364" Value="{DynamicResource ButtonPressedBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1012" Value="{DynamicResource ButtonPressedBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1013" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_2" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_24" Value="{DynamicResource ButtonDisabledBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1015" Value="{DynamicResource ButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1016" Value="{DynamicResource ButtonDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_163" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}">
    <Setter x:Uid="Setter_1988" Property="Control.Padding" Value="1,1,1,2"/>
    <Setter x:Uid="Setter_1560" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_100" TargetType="{x:Type Button}">
          <Border x:Name="ButtonTemplateGrid" x:Uid="Border_69" Background="{TemplateBinding Control.Background}"
                  CornerRadius="3" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_54" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_59" Property="Button.IsDefaulted" Value="true">
              <Setter x:Uid="Setter_366" Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1049" Value="{DynamicResource ButtonIsDefaultBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1705" Property="Control.BorderThickness" Value="2,2,2,2"/>
              <Setter x:Uid="Setter_1050" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1115" Property="UIElement.IsFocused" Value="true">
              <Setter x:Uid="Setter_1688" Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1689" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
              <Setter x:Uid="Setter_1562" Value="{DynamicResource ButtonIsFocusedBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1135" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1690" Value="{DynamicResource ButtonMouseOverBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1691" Value="{DynamicResource ButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1692" Value="{DynamicResource ButtonMouseOverTextBrush}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1136" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1694" Value="{DynamicResource ButtonPressedBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1695" Value="{DynamicResource ButtonPressedBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1696" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1137" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1699" Value="{DynamicResource ButtonDisabledBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1700" Value="{DynamicResource ButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1701" Value="{DynamicResource ButtonDisabledTextBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionToggleButton" x:Uid="Style_162" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource {x:Type ButtonBase}}"/>
  <Style x:Key="SmallExpressionButton" x:Uid="Style_12" TargetType="{x:Type ButtonBase}"
         BasedOn="{StaticResource ExpressionButtonControl}">
    <Setter x:Uid="Setter_28" Property="FrameworkElement.Width" Value="20"/>
    <Setter x:Uid="Setter_29" Property="FrameworkElement.Height" Value="20"/>
    <Setter x:Uid="Setter_30" Property="FrameworkElement.MinWidth" Value="20"/>
    <Setter x:Uid="Setter_31" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_32" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
    <Setter x:Uid="Setter_230" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_60" Property="ButtonBase.IsPressed" Value="true">
        <Setter x:Uid="Setter_367" Property="Control.BorderThickness" Value="2"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DialogButton" x:Uid="Style_142" TargetType="{x:Type Button}"
         BasedOn="{StaticResource {x:Type Button}}">
    <Setter x:Uid="Setter_1402" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_1403" Property="FrameworkElement.MinWidth" Value="75"/>
    <Setter x:Uid="Setter_1487" Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="IconButton" x:Uid="Style_157" TargetType="{x:Type Button}"
         BasedOn="{StaticResource {x:Type Button}}">
    <Setter x:Uid="Setter_1504" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_96" TargetType="{x:Type Button}">
          <Border x:Name="ButtonTemplateGrid" x:Uid="Border_66" Background="{TemplateBinding Control.Background}"
                  CornerRadius="3" BorderBrush="{TemplateBinding Control.BorderBrush}">
            <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_6" FrameworkElement.HorizontalAlignment="Center"
                           FrameworkElement.VerticalAlignment="Center" FrameworkElement.Margin="1"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1103" Property="UIElement.IsFocused" Value="true">
              <Setter x:Uid="Setter_1505" Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1506" Value="{DynamicResource Text1Brush}" Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1507" Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1104" Property="Button.IsDefault" Value="true">
              <Setter x:Uid="Setter_1508" Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1509" Value="{DynamicResource ButtonDefaultedBrush}" Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1510" Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
              <Setter x:Uid="Setter_1511" Property="Control.BorderThickness" Value="1"/>
            </Trigger>
            <MultiTrigger x:Uid="MultiTrigger_31">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_75" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_76" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1517" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1105" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1513" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1514" Value="{DynamicResource RecessedBrush}" Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1515" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1106" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1518" Value="{DynamicResource RecessedBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1519" Value="{DynamicResource DarkBrush}" Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1520" Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1107" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1523" Value="{DynamicResource PaneBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1524" Value="{DynamicResource RecessedBrush}" Property="Control.BorderBrush"/>
              <Setter x:Uid="Setter_1525" Value="{DynamicResource ButtonDefaultBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DropDownArrowPath" x:Uid="Style_213" TargetType="{x:Type Path}">
    <Setter x:Uid="Setter_1958" Property="Path.Data" Value="M 0,0 L 3,3 6,0 Z"/>
    <Setter x:Uid="Setter_1959" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1960" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1961" Property="RenderOptions.EdgeMode" Value="Aliased"/>
    <Setter x:Uid="Setter_1962" Property="Shape.Stretch" Value="None"/>
  </Style>
  <ControlTemplate x:Key="MenuIconSplitButtonTemplate" x:Uid="ControlTemplate_5"
                   TargetType="{x:Type Controls:MenuButton}">
    <Border x:Name="SplitButtonBorder" x:Uid="SplitButtonBorder" Background="Transparent" CornerRadius="2"
            BorderThickness="1,1,1,1" BorderBrush="Transparent">
      <Grid x:Uid="Grid_61">
        <Grid.RowDefinitions>
          <RowDefinition x:Uid="RowDefinition_3"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition x:Uid="ColumnDefinition_13" Width="*"/>
          <ColumnDefinition x:Uid="ColumnDefinition_14" Width="1"/>
          <ColumnDefinition x:Uid="ColumnDefinition_15" Width="*"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightBackground" x:Uid="HighlightBackground" CornerRadius="1"
                FrameworkElement.Margin="0,0,-1,0" UIElement.RenderTransformOrigin="0.5,1" Background="Transparent"
                UIElement.Opacity="0" automation:AutomationElement.Id="SplitButtonMainButton"
                UIElement.Visibility="{TemplateBinding Background, Converter={StaticResource NullToVisibilityCollapsedConverter}}"/>
        <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_2" FrameworkElement.HorizontalAlignment="Center"
                       FrameworkElement.VerticalAlignment="Center"
                       FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                       Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
        <Border x:Name="DropDownButtonOver" x:Uid="DropDownButtonOver" Grid.Column="2"
                FrameworkElement.Margin="-1,0,0,0" CornerRadius="1" Background="Transparent" Padding="1"
                automation:AutomationElement.Id="SplitButtonDropDownButton">
          <Path x:Name="DropDownArrow" x:Uid="DropDownArrow"
                FrameworkElement.Style="{DynamicResource DropDownArrowPath}" FrameworkElement.Margin="3,1,2,0"
                Shape.Fill="{TemplateBinding Controls:MenuButton.DropDownArrowBrush}" UIElement.Opacity="0.55"/>
        </Border>
        <Rectangle x:Name="SplitLine" x:Uid="SplitLine" Grid.Column="1" Shape.Fill="Transparent"
                   UIElement.Visibility="Hidden"/>
        <Border x:Name="HighlightBackgroundOver" x:Uid="HighlightBackgroundOver"
                FrameworkElement.Margin="-1,-1,-1,-1" Background="Transparent"/>
        <Border x:Name="PART_DropDownButton" x:Uid="PART_DropDownButton" Grid.Column="2"
                FrameworkElement.Margin="-1,-1,-1,-1" CornerRadius="2" Background="Transparent" Padding="1"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger x:Uid="Trigger_1153" SourceName="HighlightBackgroundOver" Property="UIElement.IsMouseOver"
               Value="true">
        <Setter x:Uid="Setter_1808" TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1809" TargetName="HighlightBackground" Value="{DynamicResource LayerChild2Brush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1810" TargetName="SplitButtonBorder" Value="{DynamicResource RecessedBrush}"
                Property="Border.BorderBrush"/>
        <Setter x:Uid="Setter_1811" TargetName="SplitButtonBorder" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1812" TargetName="SplitLine" Value="{DynamicResource RecessedBrush}"
                Property="Shape.Fill"/>
        <Setter x:Uid="Setter_1813" TargetName="SplitLine" Property="UIElement.Visibility" Value="Visible"/>
        <Setter x:Uid="Setter_1814" TargetName="Icon" Property="Image.Source">
          <Setter.Value>
            <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                     Mode="OneWay"/>
          </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_1815" TargetName="DropDownButtonOver" Value="{DynamicResource ListHoverBrush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1816" TargetName="DropDownButtonOver" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1817" TargetName="DropDownArrow" Value="{DynamicResource ButtonDefaultTextBrush}"
                Property="Shape.Fill"/>
        <Setter x:Uid="Setter_1974" TargetName="DropDownArrow" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1154" SourceName="PART_DropDownButton" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1818" TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1819" TargetName="HighlightBackground" Value="{DynamicResource ListHoverBrush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1820" TargetName="SplitButtonBorder" Value="{DynamicResource RecessedBrush}"
                Property="Border.BorderBrush"/>
        <Setter x:Uid="Setter_1821" TargetName="SplitButtonBorder" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1822" TargetName="SplitLine" Value="{DynamicResource RecessedBrush}"
                Property="Shape.Fill"/>
        <Setter x:Uid="Setter_1823" TargetName="SplitLine" Property="UIElement.Visibility" Value="Visible"/>
        <Setter x:Uid="Setter_1897" TargetName="DropDownButtonOver" Value="{DynamicResource LayerChild2Brush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1826" TargetName="DropDownButtonOver" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1827" TargetName="DropDownArrow"
                Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}" Property="Shape.Fill"/>
        <Setter x:Uid="Setter_1975" TargetName="DropDownArrow" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1174" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1982" TargetName="SplitButtonBorder" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuIconButtonTemplate" x:Uid="ControlTemplate_115"
                   TargetType="{x:Type Controls:MenuButton}">
    <Border x:Name="SplitButtonBorder" x:Uid="Border_84" Background="{TemplateBinding Control.Background}"
            CornerRadius="3" BorderThickness="1,1,1,1" BorderBrush="{TemplateBinding Control.BorderBrush}">
      <Grid x:Uid="Grid_79">
        <Grid.RowDefinitions>
          <RowDefinition x:Uid="RowDefinition_51"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition x:Uid="ColumnDefinition_81" Width="*"/>
          <ColumnDefinition x:Uid="ColumnDefinition_82" Width="*"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightBackground" x:Uid="Border_85" CornerRadius="2" Grid.ColumnSpan="2"
                FrameworkElement.Margin="0,0,0,0" UIElement.RenderTransformOrigin="0.5,1"
                Background="{DynamicResource ButtonSelectionGrad}" UIElement.Opacity="0"
                automation:AutomationElement.Id="SplitButtonMainButton"
                UIElement.Visibility="{TemplateBinding Background, Converter={StaticResource NullToVisibilityCollapsedConverter}}"/>
        <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_10" FrameworkElement.HorizontalAlignment="Center"
                       FrameworkElement.VerticalAlignment="Center" FrameworkElement.Margin="0,1,0,1"
                       Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"
                       FrameworkElement.Width="{TemplateBinding FrameworkElement.ActualHeight}"/>
        <Border x:Name="DropDownButtonOver" x:Uid="Border_86" Grid.Column="1" FrameworkElement.Margin="-1,0,0,0"
                CornerRadius="2" Background="Transparent" Padding="1"
                automation:AutomationElement.Id="SplitButtonDropDownButton">
          <Path x:Name="DropDownArrow" x:Uid="Path_28" FrameworkElement.Margin="3,6,2,6"
                FrameworkElement.Style="{DynamicResource DropDownArrowPath}"
                Shape.Fill="{TemplateBinding Controls:MenuButton.DropDownArrowBrush}" UIElement.Opacity="0.55"/>
        </Border>
        <Border x:Name="Reflex" x:Uid="Reflex" UIElement.RenderTransformOrigin="0.5,1"
                FrameworkElement.Margin="1,1,1,8" CornerRadius="2" Grid.ColumnSpan="2"
                Background="{DynamicResource ButtonSelectionGrad}" UIElement.Opacity="0.15"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger x:Uid="Trigger_1146" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1782" TargetName="DropDownButtonOver" Value="{DynamicResource RecessedBrush}"
                Property="Border.BorderBrush"/>
        <Setter x:Uid="Setter_1775" TargetName="HighlightBackground" Value="{DynamicResource ButtonOverBrush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1776" TargetName="HighlightBackground" Value="{DynamicResource RecessedBrush}"
                Property="Border.BorderBrush"/>
        <Setter x:Uid="Setter_1777" TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1779" TargetName="Icon" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1780" TargetName="Reflex" Property="UIElement.Opacity" Value="0.35"/>
        <Setter x:Uid="Setter_1781" TargetName="Reflex" Property="FrameworkElement.Margin" Value="1,0,1,8"/>
        <Setter x:Uid="Setter_1976" TargetName="DropDownArrow" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_24">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_59" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_60" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1778" TargetName="Icon" Property="Image.Source">
          <Setter.Value>
            <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                     Mode="OneWay"/>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_1148" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1787" Value="{DynamicResource PaneBrush}" Property="Control.Background"/>
        <Setter x:Uid="Setter_1788" Value="{DynamicResource RecessedBrush}" Property="Control.BorderBrush"/>
        <Setter x:Uid="Setter_1789" Value="{DynamicResource ButtonDefaultBrush}" Property="Control.Foreground"/>
        <Setter x:Uid="Setter_1790" TargetName="HighlightBackground" Property="UIElement.Visibility" Value="Hidden"/>
        <Setter x:Uid="Setter_1791" TargetName="Icon" Property="UIElement.Opacity" Value="0.5"/>
        <Setter x:Uid="Setter_1792" TargetName="DropDownButtonOver" Property="UIElement.Opacity" Value="0.5"/>
        <Setter x:Uid="Setter_1793" TargetName="Reflex" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1149" Property="UIElement.IsEnabled" Value="true">
        <Setter x:Uid="Setter_1794" Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
        <Setter x:Uid="Setter_1795" Value="{DynamicResource BackgroundBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1150" Property="UIElement.IsFocused" Value="true">
        <Setter x:Uid="Setter_1796" Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
        <Setter x:Uid="Setter_1797" Value="{DynamicResource Text1Brush}" Property="Control.BorderBrush"/>
        <Setter x:Uid="Setter_1798" Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1151" Property="ButtonBase.IsPressed" Value="true">
        <Setter x:Uid="Setter_1799" Value="{DynamicResource RecessedBrush}" Property="Control.Background"/>
        <Setter x:Uid="Setter_1800" Value="{DynamicResource DarkBrush}" Property="Control.BorderBrush"/>
        <Setter x:Uid="Setter_1801" Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
        <Setter x:Uid="Setter_1802" TargetName="HighlightBackground" Property="UIElement.Opacity" Value="1"/>
        <Setter x:Uid="Setter_1803" TargetName="HighlightBackground" Value="{DynamicResource RecessedBrush}"
                Property="Border.Background"/>
        <Setter x:Uid="Setter_1804" TargetName="Reflex" Property="UIElement.Opacity" Value="0.1"/>
        <Setter x:Uid="Setter_1805" TargetName="Reflex" Property="FrameworkElement.Margin" Value="1,1,1,8"/>
        <Setter x:Uid="Setter_1806" TargetName="Reflex" Property="UIElement.RenderTransform">
          <Setter.Value>
            <ScaleTransform x:Uid="ScaleTransform_7" ScaleX="1" ScaleY="-1"/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Uid="Style_169" TargetType="{x:Type Controls:MenuButton}"
         BasedOn="{StaticResource {x:Type ButtonBase}}"/>
  <Style x:Key="MenuIconSplitButtonStyle" x:Uid="Style_191" TargetType="{x:Type Controls:MenuButton}"
         BasedOn="{StaticResource {x:Type Controls:MenuButton}}">
    <Setter x:Uid="Setter_1742" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_1743" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_1711" Property="Control.Template" Value="{StaticResource MenuIconButtonTemplate}"/>
    <Setter x:Uid="Setter_1977" Property="Control.Padding" Value="2,0,2,0"/>
    <Setter x:Uid="Setter_1898" Property="Controls:MenuButton.DropDownArrowBrush" Value="Black"/>
    <Style.Triggers>
      <DataTrigger x:Uid="Trigger_1152"
                   Binding="{Binding Command, RelativeSource={RelativeSource Self}, Converter={StaticResource IsNullConverter}}"
                   Value="False">
        <Setter x:Uid="Setter_1807" Property="Control.Template"
                Value="{StaticResource MenuIconSplitButtonTemplate}"/>
        <Setter x:Uid="Setter_1899" Property="Controls:MenuButton.DropDownArrowBrush"
                Value="{DynamicResource Text1Brush}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FlatIconButtonStyle" x:Uid="Style_201" TargetType="{x:Type ButtonBase}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_1854" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_1846" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1855" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_119" TargetType="{x:Type ButtonBase}">
          <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_12"
                         Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"
                         SourceBrush="{TemplateBinding Controls:Icon.DeselectedDrawingBrush}"
                         RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                         GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                         BlueChroma="{TemplateBinding Controls:Icon.BlueChroma}"/>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_25">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_61" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_62" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1856" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
              <Setter x:Uid="Setter_1938" TargetName="Icon" Property="Controls:Icon.SourceBrush">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedDrawingBrush)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1159" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1857" TargetName="Icon" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FlatMenuIconButtonStyle" x:Uid="Style_202" TargetType="{x:Type Button}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_1858" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_1859" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_120" TargetType="{x:Type Button}">
          <Grid x:Name="Root" x:Uid="Root" Panel.Background="{TemplateBinding Control.Background}">
            <StackPanel x:Uid="StackPanel_9" FrameworkElement.HorizontalAlignment="Center"
                        FrameworkElement.VerticalAlignment="Center" Orientation="Horizontal">
              <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_13"
                             Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
              <Path x:Name="DropDownArrow" x:Uid="Path_27" FrameworkElement.Margin="1 1 0 0"
                    FrameworkElement.Style="{DynamicResource DropDownArrowPath}"
                    Shape.Fill="{DynamicResource FlatMenuIconArrowNormalBrush}"/>
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1160" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1861" TargetName="DropDownArrow"
                      Value="{DynamicResource FlatMenuIconArrowMouseOverBrush}" Property="Shape.Fill"/>
            </Trigger>
            <MultiTrigger x:Uid="MultiTrigger_26">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_63" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_64" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1860" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1161" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1862" TargetName="Root" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FlatToggleIconButtonStyle" x:Uid="Style_203" TargetType="{x:Type ToggleButton}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_1971" Property="Control.Background"
            Value="{DynamicResource FlatToggleNormalBackgroundBrush}"/>
    <Setter x:Uid="Setter_1863" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_121" TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border" x:Uid="Border" BorderBrush="{DynamicResource FlatToggleButtonInnerBorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="1">
            <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_14"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}">
              <FrameworkElement.Width>
                <Binding Path="Source.PixelWidth" RelativeSource="{RelativeSource Self}"/>
              </FrameworkElement.Width>
              <FrameworkElement.Height>
                <Binding Path="Source.PixelHeight" RelativeSource="{RelativeSource Self}"/>
              </FrameworkElement.Height>
              <FrameworkElement.Margin>
                <Binding ElementName="Border" Path="BorderThickness" Converter="{StaticResource NegatingThicknessConverter}"/>
              </FrameworkElement.Margin>
            </Controls:Icon>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1162" Property="ToggleButton.IsChecked" Value="true">
              <Setter x:Uid="Setter_1864" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
              <Setter x:Uid="Setter_1865" Value="{DynamicResource FlatToggleCheckedBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1866" TargetName="Border" Value="{DynamicResource FlatToggleCheckedBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter x:Uid="Setter_1925" TargetName="Border" Property="Border.BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger x:Uid="MultiTrigger_27">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_50" Property="ToggleButton.IsChecked" Value="false"/>
                <Condition x:Uid="Condition_65" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_66" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1867" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <MultiTrigger x:Uid="MultiTrigger_21">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_53" Property="ToggleButton.IsChecked" Value="false"/>
                <Condition x:Uid="Condition_54" Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1868" Value="{DynamicResource FlatToggleHoverBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1869" TargetName="Border" Value="{DynamicResource FlatToggleHoverBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter x:Uid="Setter_1896" TargetName="Border" Property="Border.BorderThickness" Value="0"/>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1163" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1870" TargetName="Icon" Property="UIElement.Opacity" Value="0.6"/>
              <Setter x:Uid="Setter_1871" Value="{DynamicResource FlatToggleDisableBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter x:Uid="Setter_1872" TargetName="Border" Value="{DynamicResource FlatToggleDisableBorderBrush}"
                      Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListBorder" x:Uid="Style_43" TargetType="{x:Type Border}">
    <Setter x:Uid="Setter_275" Property="Border.CornerRadius" Value="2"/>
    <Setter x:Uid="Setter_276" Property="Border.BorderBrush" Value="{DynamicResource PaneHighlightBrush}"/>
    <Setter x:Uid="Setter_277" Property="Border.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_278" Property="Border.BorderThickness" Value="1"/>
  </Style>
  <Style x:Key="ExpressionTabItemBase" x:Uid="Style_106" TargetType="{x:Type TabItem}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_1033" Property="Control.Background" Value="{DynamicResource TabNormalBrush}"/>
    <Setter x:Uid="Setter_1034" Property="Control.BorderBrush">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1035" Property="Control.Foreground" Value="{DynamicResource WhiteBrush}"/>
    <Setter x:Uid="Setter_1036" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1134" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1637" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1638" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1058" Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter x:Uid="Setter_1163" Property="Control.IsTabStop" Value="false"/>
    <Setter x:Uid="Setter_1321" Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1006" Property="TabItem.IsSelected" Value="true">
        <Setter x:Uid="Setter_1040" Property="Panel.ZIndex" Value="100"/>
        <Setter x:Uid="Setter_1041" Property="Control.Background" Value="{DynamicResource TabSelectionBrush}"/>
        <Setter x:Uid="Setter_1042" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_2">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_3" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_4" Property="TabItem.IsSelected" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1043" Property="Control.Background" Value="{DynamicResource ButtonOverBrush}"/>
        <Setter x:Uid="Setter_1044" Property="Control.Foreground" Value="{DynamicResource WhiteBrush}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_1007" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1045" Property="Control.Background" Value="{DynamicResource PaletteBrush}"/>
        <Setter x:Uid="Setter_1046" Property="Control.Foreground" Value="{DynamicResource DisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_154" TargetType="{x:Type TabItem}" BasedOn="{StaticResource ExpressionTabItemBase}">
    <Setter x:Uid="Setter_1039" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_25" TargetType="{x:Type TabItem}">
          <Border x:Name="Border" x:Uid="Border_18" FrameworkElement.Margin="0,0,2,0"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0" CornerRadius="3,3,0,0"
                  FrameworkElement.Height="{TemplateBinding FrameworkElement.Height}">
            <ContentPresenter x:Name="ContentSite" x:Uid="ContentPresenter_6"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.Margin="5,0,5,0" FrameworkElement.VerticalAlignment="Center"
                              RecognizesAccessKey="true" ContentSource="Header"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1008" Property="TabItem.TabStripPlacement" Value="Bottom">
              <Setter x:Uid="Setter_1047" TargetName="Border" Property="Border.CornerRadius" Value="0,0,3,3"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionTabControl" x:Uid="Style_15" TargetType="{x:Type TabControl}">
    <Setter x:Uid="Setter_62" Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource {x:Type TabItem}}"/>
    <Setter x:Uid="Setter_69" Property="UIElement.ClipToBounds" Value="true"/>
    <Setter x:Uid="Setter_71" Property="Control.BorderBrush">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1059" Property="Control.BorderThickness" Value="0"/>
    <Setter x:Uid="Setter_1060" Property="Control.Background" Value="{DynamicResource ButtonDefaultBrush}"/>
    <Setter x:Uid="Setter_1048" Property="Control.Padding" Value="0"/>
    <Setter x:Uid="Setter_1164" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_73" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_4" TargetType="{x:Type TabControl}">
          <Grid x:Name="Grid1" x:Uid="Grid_5" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0" x:Uid="ColumnDefinition_2"/>
              <ColumnDefinition x:Name="ColumnDefinition1" x:Uid="ColumnDefinition_3" Width="0px"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" x:Uid="RowDefinition_2" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" x:Uid="RowDefinition_52" Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel x:Name="HeaderPanel" x:Uid="TabPanel_1" Panel.Background="Transparent"
                      KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" Panel.IsItemsHost="true"/>
            <Border x:Name="ContentPanel" x:Uid="Border_5" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2"
                    Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
              <ContentPresenter x:Name="ContentSite" x:Uid="ContentPresenter_3"
                                FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                Content="{TemplateBinding TabControl.SelectedContent}"
                                ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding TabControl.SelectedContentTemplateSelector}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_61" Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter x:Uid="Setter_370" TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
              <Setter x:Uid="Setter_371" TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter x:Uid="Setter_372" TargetName="ContentPanel" Property="Border.BorderThickness" Value="0,0,0,1"/>
              <Setter x:Uid="Setter_373" TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter x:Uid="Setter_374" TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter x:Uid="Setter_375" TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,0,2,2"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1078" Property="TabControl.TabStripPlacement" Value="Right">
              <Setter x:Uid="Setter_1405" TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
              <Setter x:Uid="Setter_1473" TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter x:Uid="Setter_1406" TargetName="ContentPanel" Property="Border.BorderThickness" Value="0,0,1,0"/>
              <Setter x:Uid="Setter_1407" TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter x:Uid="Setter_1408" TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter x:Uid="Setter_1409" TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter x:Uid="Setter_1474" TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter x:Uid="Setter_1475" TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,2,2,2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_130" BasedOn="{StaticResource ExpressionTabControl}" TargetType="{x:Type TabControl}">
    <Setter x:Uid="Setter_1314" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_72" TargetType="{x:Type TabControl}">
          <Grid x:Name="Grid1" x:Uid="Grid_54" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_45"/>
              <ColumnDefinition x:Uid="ColumnDefinition_46" Width="0px"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" x:Uid="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" x:Uid="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <UniformGrid x:Name="HeaderPanel" x:Uid="UniformGrid_1" Panel.Background="Transparent"
                         KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" Panel.IsItemsHost="true" Rows="1"
                         FrameworkElement.Margin="0,0,-2,0"/>
            <Border x:Name="ContentPanel" x:Uid="Border_46" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2"
                    Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
              <ContentPresenter x:Name="ContentSite" x:Uid="ContentPresenter_42"
                                FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                Content="{TemplateBinding TabControl.SelectedContent}"
                                ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding TabControl.SelectedContentTemplateSelector}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1068" Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter x:Uid="Setter_1315" TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
              <Setter x:Uid="Setter_1316" TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter x:Uid="Setter_1317" TargetName="ContentPanel" Property="Border.BorderThickness" Value="0,0,0,1"/>
              <Setter x:Uid="Setter_1318" TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter x:Uid="Setter_1319" TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter x:Uid="Setter_1320" TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,0,2,2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_198" BasedOn="{StaticResource {x:Type TabControl}}"
         TargetType="{x:Type Controls:FocusDenyingTabControl}"/>
  <Style x:Key="ExpressionListBoxItem" x:Uid="Style_29" TargetType="{x:Type ListBoxItem}">
    <Setter x:Uid="Setter_1137" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1138" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1139" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1993" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1055" Property="Control.Padding" Value="4,2,4,2"/>
    <Setter x:Uid="Setter_1413" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1165" Property="Control.IsTabStop" Value="false"/>
    <Setter x:Uid="Setter_1654" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_167" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_17" TargetType="{x:Type ListBoxItem}">
          <Border FrameworkElement.Name="ListBoxItemRoot" x:Uid="ListBoxItemRoot"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <ContentPresenter FrameworkElement.Name="ListBoxItemContent" x:Uid="ListBoxItemContent"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger x:Uid="MultiTrigger_30">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_71" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_72" Property="ListBoxItem.IsSelected" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1025" Property="Control.Background" Value="{DynamicResource ListHoverBrush}"/>
        <Setter x:Uid="Setter_1024" Property="Control.Foreground" Value="{DynamicResource ListHoverTextBrush}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_11" Property="ListBoxItem.IsSelected" Value="true">
        <Setter x:Uid="Setter_221" Property="Control.Background" Value="{DynamicResource ListSelectedBrush}"/>
        <Setter x:Uid="Setter_1994" Property="Control.Foreground" Value="{DynamicResource ListSelectedTextBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_26" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1056" Property="Control.Background" Value="{DynamicResource ListBackgroundBrush}"/>
        <Setter x:Uid="Setter_1057" Property="Control.Foreground" Value="{DynamicResource DisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionDialogListBoxItem" x:Uid="Style_173" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}">
    <Setter x:Uid="Setter_1655" Property="Control.IsTabStop" Value="true"/>
    <Setter x:Uid="Setter_1656" Property="UIElement.Focusable" Value="true"/>
    <Setter x:Uid="Setter_1673" Property="UIElement.Opacity" Value="0.8"/>
    <Setter x:Uid="Setter_1658" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_174">
          <Setter x:Uid="Setter_1659" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_104">
                <Rectangle x:Uid="Rectangle_59" UIElement.SnapsToDevicePixels="true"
                           Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1"
                           FrameworkElement.Margin="1" RadiusX="2" RadiusY="2"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1132" Property="UIElement.IsFocused" Value="true">
        <Setter x:Uid="Setter_1674" Property="UIElement.Opacity" Value="1.0"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionBlueListBoxItem" x:Uid="Style_196" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource ExpressionDialogListBoxItem}">
    <Setter x:Uid="Setter_1836" Property="FrameworkElement.MinHeight" Value="29"/>
    <Setter x:Uid="Setter_1837" Property="Control.FontSize" Value="15"/>
    <Setter x:Uid="Setter_1838" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_1839" Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_1844" Property="UIElement.Opacity" Value="1.0"/>
    <Setter x:Uid="Setter_1840" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style x:Uid="Style_197">
          <Setter x:Uid="Setter_1841" Property="Control.Template">
            <Setter.Value>
              <ControlTemplate x:Uid="ControlTemplate_117">
                <Rectangle x:Uid="Rectangle_69" UIElement.SnapsToDevicePixels="true"
                           Shape.Stroke="{DynamicResource ButtonDefaultedBrush}" Shape.StrokeThickness="1" RadiusX="2"
                           RadiusY="2"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GalleryItemStyle" x:Uid="Style_7" TargetType="{x:Type Controls:SelectingListBoxItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}">
    <Setter x:Uid="Setter_13" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_14" Property="Control.IsTabStop" Value="true"/>
    <Setter x:Uid="Setter_1643" Property="UIElement.Focusable" Value="true"/>
  </Style>
  <Style x:Key="ExpressionListBox" x:Uid="Style_3" TargetType="{x:Type ListBox}">
    <Setter x:Uid="Setter_1848" Property="Control.BorderBrush" Value="{DynamicResource ListBackgroundBrush}"/>
    <Setter x:Uid="Setter_1849" Property="Control.Background" Value="{DynamicResource ListBackgroundBrush}"/>
    <Setter x:Uid="Setter_9" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_10" Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource ExpressionListBoxItem}"/>
    <Setter x:Uid="Setter_234" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_235" Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_1853" Property="Control.BorderThickness" Value="1,1,1,1"/>
    <Setter x:Uid="Setter_236" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_23" TargetType="{x:Type ListBox}">
          <Border x:Uid="Border_15" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ScrollViewer x:Uid="ScrollViewer_3" CanContentScroll="true"
                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                          Control.Padding="{TemplateBinding Control.Padding}">
              <ItemsPresenter x:Uid="StackPanel_3"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_107" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ExpressionListBox}"/>
  <Style x:Key="ExpressionSingleSelectionListBoxItem" x:Uid="Style_160"
         TargetType="{x:Type Controls:SingleSelectionListBoxItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}"/>
  <Style x:Uid="Style_161" TargetType="{x:Type Controls:SingleSelectionListBox}"
         BasedOn="{StaticResource ExpressionListBox}">
    <Setter x:Uid="Setter_1537" Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource ExpressionSingleSelectionListBoxItem}"/>
  </Style>
  <Style x:Uid="Style_146" TargetType="{x:Type ListViewItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}">
    <Setter x:Uid="Setter_1426" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_87" TargetType="{x:Type ListViewItem}">
          <Border FrameworkElement.Name="ListBoxItemRoot" x:Uid="Border_57" CornerRadius="2"
                  BorderThickness="1,0,1,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <GridViewRowPresenter x:Uid="GridViewRowPresenter_1"
                                  FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_147" TargetType="{x:Type ListView}">
    <Setter x:Uid="Setter_1427" Property="Control.BorderBrush" Value="{DynamicResource ListBackgroundBrush}"/>
    <Setter x:Uid="Setter_1428" Property="Control.Background" Value="{DynamicResource ListBackgroundBrush}"/>
    <Setter x:Uid="Setter_1429" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1875" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_1876" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_1877" Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_1878" Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter x:Uid="Setter_1879" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1880" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_122" TargetType="{x:Type ListView}">
          <Border x:Uid="Border_81" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ScrollViewer x:Uid="ScrollViewer_11"
                          FrameworkElement.Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                          Control.Padding="{TemplateBinding Control.Padding}">
              <ItemsPresenter x:Uid="ItemsPresenter_6"
                              UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" x:Uid="Style_148" TargetType="{x:Type Thumb}">
    <Setter x:Uid="Setter_1430" Property="Canvas.Right" Value="-8.5"/>
    <Setter x:Uid="Setter_1431" Property="FrameworkElement.Width" Value="18"/>
    <Setter x:Uid="Setter_1432" Property="FrameworkElement.Height">
      <Setter.Value>
        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1433" Property="Control.Padding" Value="0,3,0,3"/>
    <Setter x:Uid="Setter_1434" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1435" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_88" TargetType="{x:Type Thumb}">
          <Border x:Uid="Border_58" Padding="{TemplateBinding Control.Padding}" Background="Transparent">
            <Rectangle x:Uid="Rectangle_55" FrameworkElement.HorizontalAlignment="Center" FrameworkElement.Width="1"
                       Shape.Fill="{TemplateBinding Control.Background}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_149" TargetType="{x:Type GridViewColumnHeader}">
    <Setter x:Uid="Setter_1436" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1437" Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1438" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_1439" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1440" Property="Control.BorderBrush" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1441" Property="Control.BorderThickness" Value="0,0,0,1"/>
    <Setter x:Uid="Setter_1442" Property="Control.Padding" Value="4,0,4,0"/>
    <Setter x:Uid="Setter_1443" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_89" TargetType="{x:Type GridViewColumnHeader}">
          <Grid x:Uid="Grid_80">
            <Border x:Uid="Border_59" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <ContentPresenter x:Uid="ContentPresenter_50" FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                RecognizesAccessKey="true"/>
            </Border>
            <Canvas x:Uid="Canvas_4">
              <Thumb x:Name="PART_HeaderGripper" x:Uid="Thumb_5"
                     FrameworkElement.Style="{StaticResource GridViewColumnHeaderGripper}"/>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1083" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1444" TargetName="PART_HeaderGripper" Property="Control.Background"
                      Value="Transparent"/>
              <Setter x:Uid="Setter_1445" Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1446" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1084" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1447" TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter x:Uid="Setter_1448" Value="{DynamicResource ButtonSelectionGrad}" Property="Control.Background"/>
              <Setter x:Uid="Setter_1449" Value="{DynamicResource BackgroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1085" Property="FrameworkElement.Height" Value="Auto">
              <Setter x:Uid="Setter_1450" Property="FrameworkElement.MinHeight" Value="20"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1087" Property="GridViewColumnHeader.Role" Value="Floating">
        <Setter x:Uid="Setter_1452" Property="UIElement.Opacity" Value="0.7"/>
        <Setter x:Uid="Setter_1453" Property="Control.Background" Value="{DynamicResource ButtonOverBrush}"/>
        <Setter x:Uid="Setter_1454" Property="Control.Foreground" Value="{DynamicResource BackgroundBrush}"/>
        <Setter x:Uid="Setter_1455" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_90" TargetType="{x:Type GridViewColumnHeader}">
              <DockPanel x:Uid="DockPanel_6" Panel.Background="{TemplateBinding Control.Background}">
                <Border x:Name="HighlightBorder" x:Uid="Border_60" DockPanel.Dock="Bottom"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.Background}" FrameworkElement.Height="3"/>
                <Border x:Uid="Border_61" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        BorderBrush="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}">
                  <ContentPresenter x:Uid="ContentPresenter_51"
                                    FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </Border>
              </DockPanel>
              <ControlTemplate.Triggers>
                <Trigger x:Uid="Trigger_1088" Property="FrameworkElement.Height" Value="Auto">
                  <Setter x:Uid="Setter_1456" Property="FrameworkElement.MinHeight" Value="20"/>
                </Trigger>
                <Trigger x:Uid="Trigger_1089" Property="FrameworkElement.Width" Value="Auto">
                  <Setter x:Uid="Setter_1457" Property="FrameworkElement.MinWidth" Value="10"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionComboBoxButton" x:Uid="Style_33" TargetType="{x:Type ToggleButton}">
    <Setter x:Uid="Setter_182" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_183" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_184" Property="FrameworkElement.Width" Value="Auto"/>
    <Setter x:Uid="Setter_185" Property="FrameworkElement.Height" Value="Auto"/>
    <Setter x:Uid="Setter_186" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_187" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_1262" Property="Control.BorderBrush"
            Value="{DynamicResource ComboBoxButtonBorderBrush}"/>
    <Setter x:Uid="Setter_1263" Property="Controls:ControlStylingUtilities.CustomAccentBrush"
            Value="{DynamicResource ButtonDefaultBrush}"/>
    <Setter x:Uid="Setter_188" Property="ButtonBase.ClickMode" Value="Press"/>
    <Setter x:Uid="Setter_1549" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_189" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_18" TargetType="{x:Type ToggleButton}">
          <Grid x:Uid="Grid_14" Panel.Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_8" Width="*"/>
              <ColumnDefinition x:Uid="ColumnDefinition_9" Width="Auto" DefinitionBase.SharedSizeGroup="ComboBoxButton"/>
            </Grid.ColumnDefinitions>
            <Border FrameworkElement.Name="ComboBoxButtonBorder" x:Uid="ComboBoxButtonBorder" Grid.Column="1"
                    FrameworkElement.Width="16" CornerRadius="2"
                    Background="{TemplateBinding Controls:ControlStylingUtilities.CustomAccentBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <Image FrameworkElement.Name="ComboBoxButtonArrow" x:Uid="ComboBoxButtonArrow" Stretch="Fill"
                     FrameworkElement.Width="8" FrameworkElement.Height="5"
                     Source="{DynamicResource ExpressionComboBoxButtonIcon}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1018" Property="UIElement.IsFocused" Value="true">
              <Setter x:Uid="Setter_1094" TargetName="ComboBoxButtonBorder" Value="{DynamicResource Text1Brush}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1019" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1095" TargetName="ComboBoxButtonBorder" Value="{DynamicResource ButtonOverBrush}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1020" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1097" TargetName="ComboBoxButtonBorder" Value="{DynamicResource DarkBrush}"
                      Property="Border.BorderBrush"/>
              <Setter x:Uid="Setter_1098" TargetName="ComboBoxButtonBorder" Value="{DynamicResource RecessedBrush}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1021" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1099" TargetName="ComboBoxButtonArrow" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseComboBoxItem" x:Uid="Style_34" TargetType="{x:Type ComboBoxItem}">
    <Setter x:Uid="Setter_1765" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1767" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1103" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1140" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1141" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1142" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1106" Property="Control.Padding" Value="4,2,4,2"/>
    <Setter x:Uid="Setter_1107" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_29" TargetType="{x:Type ComboBoxItem}">
          <Border FrameworkElement.Name="ListBoxItemRoot" x:Uid="Border_27"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <ContentPresenter x:Uid="ContentPresenter_19" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger x:Uid="MultiTrigger_9">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_19" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_20" Property="ListBoxItem.IsSelected" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1108" Property="Control.Background" Value="{DynamicResource ListHoverBrush}"/>
      </MultiTrigger>
      <MultiDataTrigger x:Uid="MultiDataTrigger_1">
        <MultiDataTrigger.Conditions>
          <Condition x:Uid="Condition_46" Value="True">
            <Condition.Binding>
              <Binding Path="IsSelected" RelativeSource="{RelativeSource Self}"/>
            </Condition.Binding>
          </Condition>
          <Condition x:Uid="Condition_47" Value="True">
            <Condition.Binding>
              <Binding Path="IsEditable" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}"/>
            </Condition.Binding>
          </Condition>
        </MultiDataTrigger.Conditions>
        <Setter x:Uid="Setter_1110" Property="Control.Background" Value="{DynamicResource ListSelectedBrush}"/>
        <Setter x:Uid="Setter_1111" Property="Control.Foreground" Value="{DynamicResource ListSelectedTextBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger x:Uid="MultiDataTrigger_2">
        <MultiDataTrigger.Conditions>
          <Condition x:Uid="Condition_48" Value="True">
            <Condition.Binding>
              <Binding Path="IsFocused" RelativeSource="{RelativeSource Self}"/>
            </Condition.Binding>
          </Condition>
          <Condition x:Uid="Condition_49" Value="False">
            <Condition.Binding>
              <Binding Path="IsEditable" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}"/>
            </Condition.Binding>
          </Condition>
        </MultiDataTrigger.Conditions>
        <Setter x:Uid="Setter_1772" Property="Control.Background" Value="{DynamicResource ListSelectedBrush}"/>
        <Setter x:Uid="Setter_1773" Property="Control.Foreground" Value="{DynamicResource ListSelectedTextBrush}"/>
      </MultiDataTrigger>
      <Trigger x:Uid="Trigger_1023" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1112" Property="Control.Background" Value="{DynamicResource ListBackgroundBrush}"/>
        <Setter x:Uid="Setter_1113" Property="Control.Foreground" Value="{DynamicResource DisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_69" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource BaseComboBoxItem}"/>
  <Style x:Uid="Style_108" TargetType="{x:Type Controls:CommandComboBoxItem}"
         BasedOn="{StaticResource {x:Type ComboBoxItem}}"/>
  <Style x:Uid="Style_37" TargetType="{x:Type ComboBox}">
    <Setter x:Uid="Setter_194" Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_195" Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter x:Uid="Setter_1703" Property="Control.Padding" Value="1"/>
    <Setter x:Uid="Setter_196" Property="FrameworkElement.MinWidth" Value="40"/>
    <Setter x:Uid="Setter_1114" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1143" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1144" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1145" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1264" Property="Control.BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}"/>
    <Setter x:Uid="Setter_1265" Property="Control.Background" Value="{DynamicResource ComboBoxBackgroundBrush}"/>
    <Setter x:Uid="Setter_1266" Property="Controls:ControlStylingUtilities.CustomAccentBrush"
            Value="{DynamicResource ButtonDefaultBrush}"/>
    <Setter x:Uid="Setter_199" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_19" TargetType="{x:Type ComboBox}">
          <Grid x:Uid="Grid_15">
            <Border x:Uid="Border_12" Background="{TemplateBinding Control.BorderBrush}"
                    Padding="{TemplateBinding Control.Padding}" CornerRadius="4">
              <Grid x:Uid="Grid_16" IsSharedSizeScope="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_10" Width="1"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_11" Width="*"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_12" Width="Auto" DefinitionBase.SharedSizeGroup="ComboBoxButton"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="SelectedItemBorder" x:Uid="Border_13" Grid.ColumnSpan="2" FrameworkElement.Margin="1"
                        CornerRadius="2" Background="{TemplateBinding Control.Background}"/>
                <ContentPresenter x:Name="ContentSite" x:Uid="ContentPresenter_10" Grid.Column="1"
                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                  FrameworkElement.Margin="4,2,1,2" FrameworkElement.VerticalAlignment="Center"
                                  TextElement.Foreground="{DynamicResource Text1Brush}"/>
                <TextBox x:Name="PART_EditableTextBox" x:Uid="TextBox_1" FrameworkElement.MinHeight="0"
                         FrameworkElement.Height="Auto" Grid.Column="1" UIElement.Visibility="Collapsed" Control.Padding="0"
                         FrameworkElement.Margin="1,0,0,0">
                  <TextBoxBase.IsReadOnly>
                    <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </TextBoxBase.IsReadOnly>
                </TextBox>
                <ToggleButton x:Name="DropDownButton" x:Uid="ToggleButton_1" UIElement.Focusable="false"
                              FrameworkElement.Margin="0" Grid.Column="0" Grid.ColumnSpan="3"
                              FrameworkElement.Style="{StaticResource ExpressionComboBoxButton}"
                              Controls:ControlStylingUtilities.CustomAccentBrush="{TemplateBinding Controls:ControlStylingUtilities.CustomAccentBrush}">
                  <ToggleButton.IsChecked>
                    <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </ToggleButton.IsChecked>
                </ToggleButton>
              </Grid>
            </Border>
            <Controls:ExpressionPopup FrameworkElement.Name="PART_Popup" x:Uid="Popup_1" Popup.Placement="Bottom"
                                      UIElement.Focusable="false"
                                      Popup.PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Popup.IsOpen>
                <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
              </Popup.IsOpen>
              <Border x:Name="DropDownBorder" x:Uid="Border_14" BorderThickness="1"
                      BorderBrush="{DynamicResource MenuSeparatorBrush}" Background="{DynamicResource BackgroundBrush}"
                      FrameworkElement.MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                      FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                <ScrollViewer x:Uid="ScrollViewer_2" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                              UIElement.Focusable="false"
                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter x:Uid="ItemsPresenter_1" KeyboardNavigation.DirectionalNavigation="Contained"
                                  FrameworkElement.Margin="1"/>
                </ScrollViewer>
              </Border>
            </Controls:ExpressionPopup>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_7">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_13" Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                <Condition x:Uid="Condition_14" Property="ComboBox.IsDropDownOpen" Value="false"/>
                <Condition x:Uid="Condition_15" Property="ComboBox.IsEditable" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_201" TargetName="PART_EditableTextBox" Value="{DynamicResource Text1Brush}"
                      Property="Control.Foreground"/>
              <Setter x:Uid="Setter_202" TargetName="ContentSite" Value="{DynamicResource Text1Brush}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_27" Property="ComboBox.IsEditable" Value="true">
              <Setter x:Uid="Setter_204" TargetName="SelectedItemBorder" Property="UIElement.Visibility"
                      Value="Collapsed"/>
              <Setter x:Uid="Setter_205" TargetName="ContentSite" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter x:Uid="Setter_206" TargetName="PART_EditableTextBox" Property="UIElement.Visibility"
                      Value="Visible"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1176" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1995" Value="{DynamicResource ComboBoxMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger x:Uid="Trigger_28" Property="ItemsControl.HasItems" Value="false">
              <Setter x:Uid="Setter_208" TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_29" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_209" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_8">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_16" Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
          <Condition x:Uid="Condition_17" Property="ComboBox.IsDropDownOpen" Value="false"/>
          <Condition x:Uid="Condition_18" Property="ComboBox.IsEditable" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_210" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_30" Property="ComboBox.IsEditable" Value="true">
        <Setter x:Uid="Setter_211" Property="Control.IsTabStop" Value="false"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_104" TargetType="{x:Type Controls:EditableComboBox}"
         BasedOn="{StaticResource {x:Type ComboBox}}"/>
  <Style x:Uid="Style_219" TargetType="{x:Type ValueEditors:SplitComboBox}">
    <Setter x:Uid="Setter_2006" Property="UIElement.Focusable" Value="false"/>
  </Style>
  <Style x:Key="NumberComboBoxStyle" x:Uid="Style_131" TargetType="{x:Type Controls:NumberComboBox}"
         BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter x:Uid="Setter_1996" Property="Control.BorderBrush"
            Value="{DynamicResource NumberComboBoxBorderBrush}"/>
    <Setter x:Uid="Setter_1997" Property="Control.Background"
            Value="{DynamicResource NumberComboBoxBackgroundBrush}"/>
    <Setter x:Uid="Setter_1322" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_73" TargetType="{x:Type Controls:NumberComboBox}">
          <Grid x:Uid="Grid_55">
            <Border x:Uid="Border_47" Background="{TemplateBinding Control.BorderBrush}" Padding="0" CornerRadius="4">
              <Grid x:Uid="Grid_56" IsSharedSizeScope="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_48" Width="*"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_49" Width="Auto" DefinitionBase.SharedSizeGroup="ComboBoxButton"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="SelectedItemBorder" x:Uid="Border_48" FrameworkElement.Margin="1" CornerRadius="2"
                        Background="{TemplateBinding Control.Background}"/>
                <ValueEditors:NumberEditor x:Name="PART_EditableTextBox"
                                           FinishEditingCommand="{TemplateBinding Controls:NumberComboBox.FinishEditingCommand}"
                                           Control.BorderBrush="{TemplateBinding Control.BorderBrush}"
                                           Control.Background="{TemplateBinding Control.Background}" x:Uid="ValueEditors:NumberEditor_1"
                                           FrameworkElement.MinHeight="0" FrameworkElement.Height="Auto"
                                           IsSliderLogarithmic="{TemplateBinding Controls:NumberComboBox.IsSliderLogarithmic}"
                                           Format="{TemplateBinding Controls:NumberComboBox.NumberFormat}"
                                           Minimum="{TemplateBinding Controls:NumberComboBox.Minimum}"
                                           Maximum="{TemplateBinding Controls:NumberComboBox.Maximum}">
                  <ValueEditors:NumberEditor.Value>
                    <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </ValueEditors:NumberEditor.Value>
                </ValueEditors:NumberEditor>
                <ToggleButton x:Name="DropDownButton" x:Uid="ToggleButton_5" UIElement.Focusable="false" Grid.Column="1"
                              FrameworkElement.Style="{StaticResource ExpressionComboBoxButton}"
                              Controls:ControlStylingUtilities.CustomAccentBrush="{TemplateBinding Controls:ControlStylingUtilities.CustomAccentBrush}">
                  <ToggleButton.IsChecked>
                    <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </ToggleButton.IsChecked>
                </ToggleButton>
              </Grid>
            </Border>
            <Controls:ExpressionPopup x:Uid="Popup_4" Popup.Placement="Bottom" UIElement.Focusable="false"
                                      Popup.PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Popup.IsOpen>
                <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
              </Popup.IsOpen>
              <Border x:Name="DropDownBorder" x:Uid="Border_49" BorderThickness="1"
                      BorderBrush="{DynamicResource MenuSeparatorBrush}" Background="{DynamicResource BackgroundBrush}"
                      FrameworkElement.MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                      FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                <ScrollViewer x:Uid="ScrollViewer_8" CanContentScroll="true" UIElement.Focusable="false"
                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter x:Uid="ItemsPresenter_4" KeyboardNavigation.DirectionalNavigation="Contained"
                                  FrameworkElement.Margin="1"/>
                </ScrollViewer>
              </Border>
            </Controls:ExpressionPopup>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_17">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_35" Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                <Condition x:Uid="Condition_36" Property="ComboBox.IsDropDownOpen" Value="false"/>
                <Condition x:Uid="Condition_37" Property="ComboBox.IsEditable" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1323" Value="{DynamicResource NumberComboBoxFocusedForegroundBrush}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1069" Property="ComboBox.IsEditable" Value="true">
              <Setter x:Uid="Setter_1324" TargetName="SelectedItemBorder" Property="UIElement.Visibility"
                      Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1070" Property="ItemsControl.HasItems" Value="false">
              <Setter x:Uid="Setter_1325" TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1177" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1998" Value="{DynamicResource NumberComboBoxMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_209" TargetType="{x:Type Controls:NumberComboBox}"
         BasedOn="{StaticResource NumberComboBoxStyle}"/>
  <Style x:Key="ToggleButtonStyle" x:Uid="Style_16" TargetType="{x:Type ToggleButton}">
    <Setter x:Uid="Setter_1212" Property="Control.Background" Value="{DynamicResource LayerChild1Brush}"/>
    <Setter x:Uid="Setter_1213" Property="Control.BorderBrush" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1214" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1472" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_74" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_125" TargetType="{x:Type ToggleButton}">
          <Border x:Uid="Border_62" CornerRadius="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentPresenter x:Name="ContentPresenter" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                              x:Uid="ContentPresenter_4"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1000" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1001" Property="Control.Background" Value="{DynamicResource ButtonDefaultBrush}"/>
        <Setter x:Uid="Setter_1366" Property="Control.BorderBrush" Value="{DynamicResource DarkBrush}"/>
        <Setter x:Uid="Setter_1367" Property="Control.Foreground" Value="{DynamicResource WhiteBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_8" Property="ToggleButton.IsChecked" Value="true">
        <Setter x:Uid="Setter_1368" Property="Control.Background" Value="{DynamicResource ButtonSelectionGrad}"/>
        <Setter x:Uid="Setter_1369" Property="Control.BorderBrush" Value="{DynamicResource DarkBrush}"/>
        <Setter x:Uid="Setter_1370" Property="Control.Foreground" Value="{DynamicResource BackgroundBrush}"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_19">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_40" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_41" Property="ToggleButton.IsChecked" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1648" Property="Control.BorderBrush" Value="{DynamicResource PaletteBrush}"/>
        <Setter x:Uid="Setter_1649" Property="Control.Foreground" Value="{DynamicResource PaletteBrush}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_9" Property="ButtonBase.IsPressed" Value="true">
        <Setter x:Uid="Setter_1371" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
        <Setter x:Uid="Setter_1923" Property="Control.BorderBrush" Value="{DynamicResource DarkBrush}"/>
        <Setter x:Uid="Setter_1924" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1037" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1217" Property="Control.Background" Value="{DynamicResource PaneBrush}"/>
        <Setter x:Uid="Setter_1218" Property="Control.BorderBrush" Value="{DynamicResource RecessedBrush}"/>
        <Setter x:Uid="Setter_1219" Property="Control.Foreground" Value="{DynamicResource RecessedBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_10" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_77" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StickyButtonStyle" x:Uid="Style_38" TargetType="{x:Type Controls:StickyButton}"
         BasedOn="{StaticResource ToggleButtonStyle}"/>
  <Style x:Uid="Style_208" TargetType="{x:Type Controls:StickyButton}"
         BasedOn="{StaticResource StickyButtonStyle}"/>
  <Style x:Key="ToolGroupButtonStyle" x:Uid="Style_152" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource ToggleButtonStyle}">
    <Setter x:Uid="Setter_1252" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_1496" Property="Control.BorderThickness" Value="0"/>
    <Setter x:Uid="Setter_1253" Property="FrameworkElement.Width" Value="32"/>
    <Setter x:Uid="Setter_1488" Property="FrameworkElement.Height" Value="32"/>
    <Setter x:Uid="Setter_1489" Property="FrameworkElement.Margin" Value="1"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1095" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1490" Property="Control.Background" Value="{DynamicResource ToolHoverBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1096" Property="ToggleButton.IsChecked" Value="true">
        <Setter x:Uid="Setter_1491" Property="Control.Background" Value="{DynamicResource ToolSelectedBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1098" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1493" Property="UIElement.Opacity" Value="0.5"/>
        <Setter x:Uid="Setter_1894" Property="Control.Background" Value="Transparent"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StickyToggleButtonStyleBase" x:Uid="Style_122" TargetType="{x:Type ToggleButton}">
    <Setter x:Uid="Setter_172" Property="Control.BorderBrush" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_173" Property="Control.Background" Value="{DynamicResource LayerChild1Brush}"/>
    <Setter x:Uid="Setter_1362" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_174" Property="FrameworkElement.Margin" Value="4,0,0,0"/>
    <Setter x:Uid="Setter_1363" Property="Control.Padding" Value="2"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_169" Property="Control.Background" Value="{DynamicResource ButtonOverBrush}"/>
        <Setter x:Uid="Setter_1364" Property="Control.Foreground" Value="{DynamicResource DarkBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1024" Property="ToggleButton.IsChecked" Value="true">
        <Setter x:Uid="Setter_170" Property="Control.Background" Value="{DynamicResource ButtonSelectionGrad}"/>
        <Setter x:Uid="Setter_1365" Property="Control.Foreground" Value="{DynamicResource RecessedBrush}"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_20">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_42" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition x:Uid="Condition_43" Property="ToggleButton.IsChecked" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1650" Property="Control.BorderBrush" Value="{DynamicResource PaletteBrush}"/>
        <Setter x:Uid="Setter_1651" Property="Control.Foreground" Value="{DynamicResource PaletteBrush}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_1131" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1646" Property="Control.Background" Value="{DynamicResource PaneBrush}"/>
        <Setter x:Uid="Setter_1647" Property="Control.Foreground" Value="{DynamicResource ButtonDefaultBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StickyToggleButtonStyle" x:Uid="Style_156" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource StickyToggleButtonStyleBase}">
    <Setter x:Uid="Setter_175" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_3" TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border" x:Uid="Border_2" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4">
            <ContentPresenter x:Uid="ContentPresenter_29" Content="{TemplateBinding ContentControl.Content}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="IconToggleButtonStyle" x:Uid="Style_153" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource StickyToggleButtonStyleBase}">
    <Setter x:Uid="Setter_1497" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_94" TargetType="{x:Type ToggleButton}">
          <Border x:Uid="Border_64" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}">
            <Controls:Icon x:Name="Icon" x:Uid="Icon" RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                           GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                           BlueChroma="{TemplateBinding Controls:Icon.BlueChroma}"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="Trigger_1099">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_55" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_56" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1498" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1100" Property="ToggleButton.IsChecked" Value="True">
              <Setter x:Uid="Setter_1499" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="IconListBoxItemStyle" x:Uid="Style_159" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}">
    <Setter x:Uid="Setter_1528" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_97" TargetType="{x:Type ListBoxItem}">
          <Border x:Uid="Border_68" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0"
                  Padding="{TemplateBinding Control.Padding}">
            <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_7" RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                           GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                           BlueChroma="{TemplateBinding Controls:Icon.BlueChroma}"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_28">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_67" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_68" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1529" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1109" Property="ListBoxItem.IsSelected" Value="true">
              <Setter x:Uid="Setter_1530" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="IconTabItem" x:Uid="Style_155" TargetType="{x:Type TabItem}"
         BasedOn="{StaticResource ExpressionTabItemBase}">
    <Setter x:Uid="Setter_1501" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_95" TargetType="{x:Type TabItem}">
          <Border x:Name="Border" x:Uid="Border_65" FrameworkElement.Margin="0,0,2,0"
                  Background="{TemplateBinding Control.Background}" CornerRadius="3,3,0,0">
            <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_5" FrameworkElement.Margin="5,0,5,0"
                           RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                           GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                           BlueChroma="{TemplateBinding Controls:Icon.BlueChroma}"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"
                           FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                           FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_29">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_69" SourceName="Border" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_70" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_1502" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1102" Property="TabItem.IsSelected" Value="true">
              <Setter x:Uid="Setter_1494" TargetName="Icon" Property="Image.Source">
                <Setter.Value>
                  <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalRadioListItem" x:Uid="Style_40" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource ExpressionListBoxItem}">
    <Setter x:Uid="Setter_251" Property="Control.Background" Value="{DynamicResource LayerChild1Brush}"/>
    <Setter x:Uid="Setter_253" Property="FrameworkElement.Width" Value="16"/>
    <Setter x:Uid="Setter_254" Property="FrameworkElement.Height" Value="16"/>
    <Setter x:Uid="Setter_1458" Property="FrameworkElement.MinWidth" Value="16"/>
    <Setter x:Uid="Setter_1459" Property="FrameworkElement.MinHeight" Value="16"/>
    <Setter x:Uid="Setter_255" Property="FrameworkElement.Margin" Value="0,1,2,1"/>
    <Setter x:Uid="Setter_257" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_55" TargetType="{x:Type ListBoxItem}">
          <Border FrameworkElement.Name="BackgroundBorder" x:Uid="BackgroundBorder" CornerRadius="4"
                  Background="{TemplateBinding Control.Background}">
            <ContentPresenter x:Uid="ContentPresenter_12" FrameworkElement.Margin="2"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_37" Property="ListBoxItem.IsSelected" Value="true">
              <Setter x:Uid="Setter_258" TargetName="BackgroundBorder" Value="{DynamicResource ButtonSelectGrad}"
                      Property="Border.Background"/>
            </Trigger>
            <MultiTrigger x:Uid="MultiTrigger_12">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_25" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition x:Uid="Condition_26" Property="ListBoxItem.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_259" TargetName="BackgroundBorder" Value="{DynamicResource ButtonOverBrush}"
                      Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalRadioList" x:Uid="Style_36" TargetType="{x:Type Selector}">
    <Setter x:Uid="Setter_250" Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource HorizontalRadioListItem}"/>
    <Setter x:Uid="Setter_556" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_225" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_21" TargetType="{x:Type Selector}">
          <Border x:Uid="Border_51" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="4">
            <StackPanel x:Uid="StackPanel_1" Orientation="Horizontal" Panel.IsItemsHost="true"
                        FrameworkElement.Margin="2,0,0,0"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="IconRadioButtonStyle" x:Uid="Style_44" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource HorizontalRadioListItem}">
    <Setter x:Uid="Setter_279" Property="automation:AutomationElement.Id">
      <Setter.Value>
        <Binding Path="AutomationName"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_280" Property="FrameworkElement.Width" Value="100"/>
    <Setter x:Uid="Setter_281" Property="FrameworkElement.Height" Value="100"/>
  </Style>
  <Style x:Key="HorizontalListBox" x:Uid="Style_39" TargetType="{x:Type ListBox}"
         BasedOn="{StaticResource ExpressionListBox}">
    <Setter x:Uid="Setter_241" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_56" TargetType="{x:Type ListBox}">
          <Border x:Uid="Border_1" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" CornerRadius="2">
            <ScrollViewer x:Uid="ScrollViewer_4" CanContentScroll="true" HorizontalScrollBarVisibility="Auto"
                          VerticalScrollBarVisibility="Disabled" Control.Padding="{TemplateBinding Control.Padding}">
              <StackPanel x:Uid="StackPanel_2" Orientation="Horizontal" Panel.IsItemsHost="true"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandCollapseCheckBox" x:Uid="Style_42" TargetType="{x:Type CheckBox}">
    <Setter x:Uid="Setter_262" Property="FrameworkElement.Width" Value="16"/>
    <Setter x:Uid="Setter_263" Property="FrameworkElement.Height" Value="16"/>
    <Setter x:Uid="Setter_264" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_265" Property="FrameworkElement.Margin" Value="1,1,1,1"/>
    <Setter x:Uid="Setter_1832" Property="UIElement.Opacity" Value="0.55"/>
    <Setter x:Uid="Setter_1834" Property="TextElement.Foreground"
            Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type UIElement}}}"/>
    <Setter x:Uid="Setter_1644" Property="Controls:Icon.RedChroma"
            Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
    <Setter x:Uid="Setter_1645" Property="Controls:Icon.GreenChroma" Value="Transparent"/>
    <Setter x:Uid="Setter_266" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_57" TargetType="{x:Type CheckBox}">
          <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_4" FrameworkElement.Height="12" FrameworkElement.Width="12"
                         UIElement.RenderTransformOrigin="0.5, 0.5" RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                         GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                         SourceBrush="{DynamicResource ItemExpanderIcon}"/>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_40" Property="ToggleButton.IsChecked" Value="True">
              <Setter x:Uid="Setter_267" TargetName="Icon" Property="UIElement.RenderTransform">
                <Setter.Value>
                  <RotateTransform x:Uid="RotateTransform_12" Angle="90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger x:Uid="Trigger_39" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1833" Property="UIElement.Opacity" Value="1"/>
              <Setter x:Uid="Setter_269" TargetName="Icon" Value="{DynamicResource ArrowExpandCollapseMouseOverBrush}"
                      Property="Controls:Icon.RedChroma"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MiniButton" x:Uid="Style_19" TargetType="{x:Type Button}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_89" Property="Control.Padding" Value="0,0,0,0"/>
    <Setter x:Uid="Setter_90" Property="FrameworkElement.Width" Value="14"/>
    <Setter x:Uid="Setter_91" Property="FrameworkElement.Height" Value="14"/>
    <Setter x:Uid="Setter_92" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_93" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_568" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_94" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_8" TargetType="{x:Type Button}">
          <Grid x:Name="Grid1" x:Uid="Grid_37">
            <Rectangle x:Name="Rectangle3" x:Uid="Rectangle_11" Grid.Column="0" Grid.ColumnSpan="1" Grid.Row="0"
                       Grid.RowSpan="1" Shape.Fill="Transparent" Shape.StrokeThickness="0.5" Shape.Stroke="Transparent"/>
            <Grid x:Uid="Grid_10" FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                  FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center">
              <ContentPresenter x:Name="ContentSite" x:Uid="ContentPresenter_21" Content="{TemplateBinding ContentControl.Content}"
                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                UIElement.Opacity="0.5"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_14" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_95" TargetName="Rectangle3" Value="{DynamicResource ButtonOverBrush}"
                      Property="Shape.Fill"/>
              <Setter x:Uid="Setter_245" TargetName="Rectangle3" Value="{DynamicResource PaneHighlightBrush}"
                      Property="Shape.Stroke"/>
              <Setter x:Uid="Setter_246" TargetName="ContentSite" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandedCheckBox" x:Uid="Style_20" TargetType="{x:Type CheckBox}">
    <Style.BasedOn>
      <x:NullExtension/>
    </Style.BasedOn>
    <Setter x:Uid="Setter_99" Property="Control.Padding" Value="0"/>
    <Setter x:Uid="Setter_405" Property="FrameworkElement.ToolTip"
            Localization.Attributes="Value (Readable Modifiable)" Value="Expand"/>
    <Setter x:Uid="Setter_100" Property="FrameworkElement.Width" Value="14"/>
    <Setter x:Uid="Setter_101" Property="FrameworkElement.Height" Value="14"/>
    <Setter x:Uid="Setter_102" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_103" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_569" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_104" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_9" TargetType="{x:Type CheckBox}">
          <Grid x:Name="Grid1" x:Uid="Grid_11">
            <Rectangle x:Name="Rectangle3" x:Uid="Rectangle_14" Grid.Column="0" Grid.ColumnSpan="1" Grid.Row="0"
                       Grid.RowSpan="1" Shape.Fill="Transparent" Shape.StrokeThickness="0.5" Shape.Stroke="Transparent"/>
            <Rectangle x:Name="Icon" x:Uid="Rectangle_37" FrameworkElement.Width="6" FrameworkElement.Height="6"
                       Shape.StrokeThickness="1" Shape.Stroke="{DynamicResource WhiteBrush}" Shape.Fill="Transparent"
                       UIElement.Opacity="0.5"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_15" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_247" TargetName="Rectangle3" Value="{DynamicResource ButtonOverBrush}"
                      Property="Shape.Fill"/>
              <Setter x:Uid="Setter_248" TargetName="Rectangle3" Value="{DynamicResource PaneHighlightBrush}"
                      Property="Shape.Stroke"/>
              <Setter x:Uid="Setter_109" TargetName="Icon" Property="UIElement.Opacity" Value="1"/>
              <Setter x:Uid="Setter_389" TargetName="Icon" Value="{DynamicResource PaneHighlightBrush}"
                      Property="Shape.Stroke"/>
            </Trigger>
            <Trigger x:Uid="Trigger_16" Property="ToggleButton.IsChecked" Value="true">
              <Setter x:Uid="Setter_249" TargetName="Icon" Property="FrameworkElement.Height" Value="2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_67" Property="ToggleButton.IsChecked" Value="true">
        <Setter x:Uid="Setter_404" Property="FrameworkElement.ToolTip"
                Localization.Attributes="Value (Readable Modifiable)" Value="Collapse"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultGrip" x:Uid="Style_150" TargetType="{x:Type Control}">
    <Setter x:Uid="Setter_1460" Property="Control.IsTabStop" Value="false"/>
    <Setter x:Uid="Setter_1461" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_1462" Property="FrameworkElement.Cursor" Value="SizeNWSE"/>
    <Setter x:Uid="Setter_1463" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_91" TargetType="{x:Type Control}">
          <Grid x:Uid="Grid_74" Panel.Background="Transparent" FrameworkElement.Height="12"
                FrameworkElement.Width="12">
            <Path x:Uid="Path_24" Shape.Fill="{DynamicResource ButtonOverBrush}" Shape.Stretch="Fill"
                  FrameworkElement.Margin="-0.5,-0.5,-0.5,-0.5" Data="M 12,0 L 12,12 0,12 Z"/>
            <Path x:Uid="Path_25" Shape.Fill="{DynamicResource PaneBrush}" Shape.Stretch="Fill"
                  FrameworkElement.HorizontalAlignment="Right" FrameworkElement.Margin="0,0,1.5,1.5"
                  FrameworkElement.VerticalAlignment="Bottom" FrameworkElement.Width="4" FrameworkElement.Height="4"
                  Data="M 10,7 L 10,10 7,10 Z"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Uid="Style_171" TargetType="{x:Type ResizeGrip}" BasedOn="{StaticResource DefaultGrip}"/>
  <Style x:Uid="Style_23" TargetType="{x:Type GridSplitter}">
    <Setter x:Uid="Setter_114" Property="FrameworkElement.MinWidth" Value="3"/>
    <Setter x:Uid="Setter_115" Property="FrameworkElement.MinHeight" Value="3"/>
    <Setter x:Uid="Setter_572" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_1236" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_116" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_12" TargetType="{x:Type GridSplitter}">
          <Rectangle x:Name="Background" x:Uid="Rectangle_15" Shape.Fill="{TemplateBinding Control.Background}"
                     Shape.StrokeThickness="0" RadiusX="2" RadiusY="2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NarrowGridSplitter" x:Uid="Style_214" TargetType="{x:Type GridSplitter}">
    <Setter x:Uid="Setter_1966" Property="Control.Background" Value="Transparent"/>
    <Setter x:Uid="Setter_1967" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_1968" Property="Panel.ZIndex" Value="1"/>
    <Setter x:Uid="Setter_1969" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_128" TargetType="{x:Type GridSplitter}">
          <Rectangle x:Name="Background" x:Uid="Background" Shape.Fill="{TemplateBinding Control.Background}"/>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1172" Property="GridSplitter.ResizeDirection" Value="Columns">
              <Setter x:Uid="Setter_1970" TargetName="Background" Property="FrameworkElement.Margin" Value="-1,0,-2,0"/>
              <Setter x:Uid="Setter_1963" Property="FrameworkElement.Width" Value="2"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1173" Property="GridSplitter.ResizeDirection" Value="Rows">
              <Setter x:Uid="Setter_1964" TargetName="Background" Property="FrameworkElement.Margin" Value="0,-3,0,0"/>
              <Setter x:Uid="Setter_1965" Property="FrameworkElement.Height" Value="2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CloseButton8x8Style" x:Uid="Style_2" TargetType="{x:Type Button}"
         BasedOn="{StaticResource FlatIconButtonStyle}">
    <Setter x:Uid="Setter_5" Property="FrameworkElement.Width" Value="12"/>
    <Setter x:Uid="Setter_6" Property="FrameworkElement.Height" Value="12"/>
    <Setter x:Uid="Setter_1939" Property="automation:AutomationElement.Id" Value="CloseButton"/>
    <Setter x:Uid="Setter_1940" Property="FrameworkElement.ToolTip"
            Localization.Attributes="Value (Readable Modifiable)" Value="Close"/>
    <Setter x:Uid="Setter_12" Property="Controls:Icon.SelectedDrawingBrush" Value="{StaticResource close_8x8}"/>
    <Setter x:Uid="Setter_39" Property="Controls:Icon.DeselectedDrawingBrush"
            Value="{StaticResource close_8x8}"/>
    <Setter x:Uid="Setter_35" Property="Controls:Icon.RedChroma" Value="#FFC5C5C5"/>
    <Setter x:Uid="Setter_36" Property="Controls:Icon.GreenChroma" Value="#FF404040"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_5" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_37" Property="Controls:Icon.RedChroma" Value="#FFFFFFFF"/>
        <Setter x:Uid="Setter_38" Property="Controls:Icon.GreenChroma" Value="#FF262626"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CloseButton10x10Style" x:Uid="Style_210" TargetType="{x:Type Button}"
         BasedOn="{StaticResource FlatIconButtonStyle}">
    <Setter x:Uid="Setter_1941" Property="FrameworkElement.Width" Value="16"/>
    <Setter x:Uid="Setter_1926" Property="FrameworkElement.Height" Value="16"/>
    <Setter x:Uid="Setter_1927" Property="automation:AutomationElement.Id" Value="CloseButton"/>
    <Setter x:Uid="Setter_1928" Property="FrameworkElement.ToolTip"
            Localization.Attributes="Value(Readable Modifiable)" Value="Close"/>
    <Setter x:Uid="Setter_1929" Property="Controls:Icon.SelectedDrawingBrush"
            Value="{StaticResource close_10x10}"/>
    <Setter x:Uid="Setter_1930" Property="Controls:Icon.DeselectedDrawingBrush"
            Value="{StaticResource close_10x10}"/>
    <Setter x:Uid="Setter_1931" Property="Controls:Icon.RedChroma"
            Value="{DynamicResource CloseIconNormalFillBrush}"/>
    <Setter x:Uid="Setter_1932" Property="Controls:Icon.GreenChroma"
            Value="{DynamicResource CloseIconNormalBorderBrush}"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1167" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1933" Property="Controls:Icon.RedChroma"
                Value="{DynamicResource CloseIconHoverFillBrush}"/>
        <Setter x:Uid="Setter_1934" Property="Controls:Icon.GreenChroma"
                Value="{DynamicResource CloseIconHoverBorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ExpressionWindowTemplate" x:Uid="ControlTemplate_82" TargetType="{x:Type ContentControl}">
    <AdornerDecorator x:Uid="AdornerDecorator_1">
      <Border x:Uid="Border_89" BorderThickness="1" BorderBrush="{DynamicResource OuterDialogBorderBrush}"
              FrameworkElement.Margin="{TemplateBinding Control.Padding}">
        <Grid x:Name="Root" x:Uid="Grid_59" Panel.Background="{DynamicResource InnerDialogBorderBrush}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition x:Uid="ColumnDefinition_56"/>
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition x:Uid="RowDefinition_34" Height="Auto"/>
            <RowDefinition x:Uid="RowDefinition_35"/>
          </Grid.RowDefinitions>
          <Rectangle x:Name="Caption" x:Uid="Rectangle_53" FrameworkElement.Margin="1" FrameworkElement.Height="21"
                     Shape.Fill="{DynamicResource DialogTitleBarBrush}"/>
          <TextBlock x:Uid="TextBlock_13" FrameworkElement.Margin="14,0,38,0"
                     FrameworkElement.VerticalAlignment="Center" UIElement.IsHitTestVisible="false"
                     Foreground="{DynamicResource DialogTitleBarTextBrush}"
                     FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}"
                     FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"
                     FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}"
                     Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}"/>
          <Button x:Name="Close" x:Uid="Button_6" FrameworkElement.Style="{DynamicResource CloseButton10x10Style}"
                  FrameworkElement.Margin="4,0,7,0" Control.IsTabStop="false"
                  FrameworkElement.HorizontalAlignment="Right"/>
          <ContentPresenter x:Uid="ContentPresenter_46" Grid.Row="1" FrameworkElement.Margin="1,0,1,1"/>
        </Grid>
      </Border>
    </AdornerDecorator>
  </ControlTemplate>
  <Style x:Key="WindowsChromeOverride" x:Uid="Style_143" TargetType="{x:Type Controls:ExpressionWindow}">
    <Setter x:Uid="Setter_1476" Property="Window.WindowStyle" Value="None"/>
    <Setter x:Uid="Setter_1477" Property="Window.ResizeMode" Value="NoResize"/>
    <Setter x:Uid="Setter_1478" Property="Control.BorderThickness" Value="0"/>
    <Setter x:Uid="Setter_1987" Property="FrameworkElement.UseLayoutRounding">
      <Setter.Value>
        <Binding Source="{x:Static Application.Current}" Path="MainWindow.UseLayoutRounding" Mode="OneTime"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1479" Property="Control.Template" Value="{StaticResource ExpressionWindowTemplate}"/>
  </Style>
  <Style x:Uid="Style_84" TargetType="{x:Type ValueEditors:StringEditor}"
         BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter x:Uid="Setter_1349" Property="Control.BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_1350" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1351" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_542" Property="ValueEditors:StringEditor.CornerRadius" Value="4"/>
    <Setter x:Uid="Setter_1146" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1147" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1148" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1989" Property="Control.Padding" Value="1,0,0,0"/>
    <Setter x:Uid="Setter_461" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_42" TargetType="{x:Type ValueEditors:StringEditor}">
          <TextBlock x:Uid="TextBlock_2" FrameworkElement.MinWidth="0" FrameworkElement.Margin="5,0,4,0"
                     Text="{TemplateBinding TextBox.Text}" FrameworkElement.VerticalAlignment="Center"
                     TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_77" Property="ValueEditors:StringEditor.IsEditing" Value="true">
        <Setter x:Uid="Setter_462" Property="Control.Template" Value="{DynamicResource BaseTextBoxTemplate}"/>
        <Setter x:Uid="Setter_1467" Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter x:Uid="Setter_1468" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_195" TargetType="{x:Type ValueEditors:InlineStringEditor}"
         BasedOn="{StaticResource {x:Type ValueEditors:StringEditor}}">
    <Setter x:Uid="Setter_1900" Property="Control.Foreground"
            Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type UIElement}}}"/>
    <Setter x:Uid="Setter_1901" Property="Border.BorderBrush">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_2009" Property="Border.BorderThickness" Value="0"/>
    <Setter x:Uid="Setter_1902" Property="Control.Background">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1903" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter x:Uid="Setter_1904" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1905" Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter x:Uid="Setter_1906" Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1907" Property="Control.Padding" Value="0"/>
    <Setter x:Uid="Setter_1908" Property="UserInterface:FocusScopeManager.AllowedFocus" Value="true"/>
    <Setter x:Uid="Setter_1909" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_116" TargetType="{x:Type ValueEditors:StringEditor}">
          <TextBlock x:Uid="TextBlock_14" FrameworkElement.MinWidth="0"
                     FrameworkElement.Margin="{TemplateBinding Control.Padding}" Text="{TemplateBinding TextBox.Text}"
                     FrameworkElement.VerticalAlignment="Center" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1164" Property="ValueEditors:StringEditor.IsEditing" Value="true">
        <Setter x:Uid="Setter_1910" Property="Control.Template" Value="{DynamicResource BaseTextBoxTemplate}"/>
        <Setter x:Uid="Setter_1911" Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter x:Uid="Setter_1912" Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter x:Uid="Setter_1913" Property="Control.BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
        <Setter x:Uid="Setter_1914" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
        <Setter x:Uid="Setter_1915" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter x:Uid="Setter_1916" Localization.Attributes="Value(Readable Modifiable None)"
                Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
        <Setter x:Uid="Setter_1917" Localization.Attributes="Value(Readable Modifiable None)"
                Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1156" Property="ValueEditors:StringEditor.IsEditing" Value="false">
        <Setter x:Uid="Setter_1831" Property="Control.Background">
          <Setter.Value>
            <x:NullExtension/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_1165" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1828" Property="Control.Background">
          <Setter.Value>
            <x:NullExtension/>
          </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_1918" Property="Control.Foreground"
                Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type UIElement}}}"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1155" Property="TextBoxBase.IsReadOnly" Value="true">
        <Setter x:Uid="Setter_1829" Property="Control.Background">
          <Setter.Value>
            <x:NullExtension/>
          </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_1830" Property="Control.Foreground"
                Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type UIElement}}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_85" TargetType="{x:Type ValueEditors:NumberEditor}">
    <Setter x:Uid="Setter_1352" Property="Control.BorderBrush" Value="{DynamicResource ValueEditorBorderBrush}"/>
    <Setter x:Uid="Setter_1353" Property="Control.Foreground" Value="{DynamicResource ValueEditorTextBrush}"/>
    <Setter x:Uid="Setter_1340" Property="Control.Background"
            Value="{DynamicResource ValueEditorBackgroundBrush}"/>
    <Setter x:Uid="Setter_2000" Property="Control.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_448" Property="ValueEditors:NumberEditor.SliderBrush"
            Value="{DynamicResource SliderBrush}"/>
    <Setter x:Uid="Setter_544" Property="ValueEditors:NumberEditor.CornerRadius" Value="4"/>
    <Setter x:Uid="Setter_1578" Property="ValueEditors:NumberEditor.SliderBorder" Value="0,0,0,0"/>
    <Setter x:Uid="Setter_545" Property="ValueEditors:NumberEditor.SliderCornerRadius" Value="4,4,4,4"/>
    <Setter x:Uid="Setter_1149" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1150" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1151" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_449" Property="FrameworkElement.Cursor"
            Value="{x:Static ValueEditors:ValueEditorCursors.NumericalAdjustCursor}"/>
    <Setter x:Uid="Setter_450" Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter x:Uid="Setter_452" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_454" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_48" TargetType="{x:Type ValueEditors:NumberEditor}">
          <TextBlock x:Uid="TextBlock_4" FrameworkElement.MinWidth="0" FrameworkElement.VerticalAlignment="Center"
                     FrameworkElement.Margin="5,0,4,0" Text="{TemplateBinding ValueEditors:NumberEditor.FormattedValue}"
                     TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1119" Property="ValueEditors:NumberEditor.ShowSlider" Value="True">
        <Setter x:Uid="Setter_1580" Property="ValueEditors:NumberEditor.HighlightCornerRadius" Value="4,4,4,4"/>
        <Setter x:Uid="Setter_1581" Property="ValueEditors:NumberEditor.HighlightMargin" Value="0,0,0,0"/>
        <Setter x:Uid="Setter_1582" Property="ValueEditors:NumberEditor.HighlightHeight" Value="7"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1072" Property="ValueEditors:NumberEditor.CanBeAuto" Value="true">
        <Setter x:Uid="Setter_1359" Property="ValueEditors:NumberEditor.NumberAreaMargin" Value="0,0,20,0"/>
        <Setter x:Uid="Setter_1414" Property="ValueEditors:NumberEditor.NamedValuePickerTemplate">
          <Setter.Value>
            <DataTemplate x:Uid="DataTemplate_8">
              <Button x:Uid="Button_3" FrameworkElement.Style="{DynamicResource IconButton}"
                      Control.Background="Transparent"
                      Controls:Icon.DeselectedImage="..\Icons\properties_auto_off_12x12.png"
                      Controls:Icon.SelectedImage="..\Icons\properties_auto_on_12x12.png" FrameworkElement.MinWidth="0"
                      FrameworkElement.ToolTip="Set to Auto" FrameworkElement.Cursor="{x:Static Cursors.Arrow}"
                      automation:AutomationElement.Id="SetToAuto" UIElement.Focusable="false"
                      ButtonBase.Command="{Binding SetAutoCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ValueEditors:NumberEditor}}}"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_1355" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_76" TargetType="{x:Type ValueEditors:NumberEditor}">
              <Grid x:Uid="Grid_57">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_51" Width="*"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_52" Width="20"/>
                </Grid.ColumnDefinitions>
                <TextBlock x:Uid="TextBlock_11" FrameworkElement.MinWidth="0" FrameworkElement.VerticalAlignment="Center"
                           FrameworkElement.Margin="5,0,4,0" Text="{TemplateBinding ValueEditors:NumberEditor.FormattedValue}"
                           TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                <ContentPresenter x:Uid="ContentPresenter_47" Grid.Column="1" FrameworkElement.HorizontalAlignment="Stretch"
                                  FrameworkElement.MinWidth="0"
                                  ContentTemplate="{TemplateBinding ValueEditors:NumberEditor.NamedValuePickerTemplate}"
                                  UIElement.Focusable="false"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_75" Property="ValueEditors:NumberEditor.IsTextEditing" Value="true">
        <Setter x:Uid="Setter_558" Property="Control.IsTabStop" Value="false"/>
        <Setter x:Uid="Setter_455" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_43" TargetType="{x:Type ValueEditors:NumberEditor}">
              <ValueEditors:StringEditor x:Uid="ValueEditors:StringEditor_1" IsEditing="true"
                                         FinishEditingCommand="{TemplateBinding ValueEditors:NumberEditor.FinishEditingCommand}"
                                         FrameworkElement.MinHeight="0" InputMethod.IsInputMethodEnabled="false"
                                         Control.Background="{TemplateBinding Control.Background}"
                                         Control.BorderBrush="{TemplateBinding Control.BorderBrush}"
                                         Control.Foreground="{TemplateBinding Control.Foreground}"
                                         Control.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                         Value="{Binding StringValue, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         BeginCommand="{Binding BeginTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         CommitCommand="{Binding CommitTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         UpdateCommand="{Binding UpdateTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         CancelCommand="{Binding CancelTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         LostFocusCommand="{Binding TextLostFocusCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                         TextChangedCommand="{Binding TextChangedCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_18">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_38" Property="ValueEditors:NumberEditor.IsTextEditing" Value="true"/>
          <Condition x:Uid="Condition_39" Property="ValueEditors:NumberEditor.CanBeAuto" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_1415" Property="Control.IsTabStop" Value="false"/>
        <Setter x:Uid="Setter_1416" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_83" TargetType="{x:Type ValueEditors:NumberEditor}">
              <Grid x:Uid="Grid_60">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Uid="ColumnDefinition_58" Width="*"/>
                  <ColumnDefinition x:Uid="ColumnDefinition_59" Width="20"/>
                </Grid.ColumnDefinitions>
                <ValueEditors:StringEditor x:Uid="ValueEditors:StringEditor_3" IsEditing="true"
                                           FinishEditingCommand="{TemplateBinding ValueEditors:NumberEditor.FinishEditingCommand}"
                                           FrameworkElement.MinHeight="0" InputMethod.IsInputMethodEnabled="false"
                                           Control.Background="{TemplateBinding Control.Background}"
                                           Control.BorderBrush="{TemplateBinding Control.BorderBrush}"
                                           Control.Foreground="{TemplateBinding Control.Foreground}"
                                           Control.BorderThickness="{TemplateBinding Control.BorderThickness}"
                                           Value="{Binding StringValue, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           BeginCommand="{Binding BeginTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           CommitCommand="{Binding CommitTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           UpdateCommand="{Binding UpdateTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           CancelCommand="{Binding CancelTextEditCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           LostFocusCommand="{Binding TextLostFocusCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                           TextChangedCommand="{Binding TextChangedCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                <ContentPresenter x:Uid="ContentPresenter_48" Grid.Column="1" FrameworkElement.HorizontalAlignment="Stretch"
                                  FrameworkElement.MinWidth="0"
                                  ContentTemplate="{TemplateBinding ValueEditors:NumberEditor.NamedValuePickerTemplate}"
                                  UIElement.Focusable="false"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_1130" Property="UIElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1629" Property="Control.Foreground"
                Value="{DynamicResource ValueEditorDisabledTextBrush}"/>
        <Setter x:Uid="Setter_1630" Property="Control.Background"
                Value="{DynamicResource ValueEditorDisabledBackgroundBrush}"/>
        <Setter x:Uid="Setter_1992" Property="Control.BorderBrush"
                Value="{DynamicResource ValueEditorDisabledBorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Uid="Style_112" TargetType="{x:Type ValueEditors:ColorChannelEditor}"
         BasedOn="{StaticResource {x:Type ValueEditors:NumberEditor}}">
    <Setter x:Uid="Setter_1158" Property="ValueEditors:NumberEditor.SliderCornerRadius" Value="4,4,0,0"/>
    <Setter x:Uid="Setter_1159" Property="ValueEditors:NumberEditor.SliderBorder" Value="0,0,0,4"/>
    <Setter x:Uid="Setter_1160" Property="ValueEditors:ColorChannelEditor.RangeCornerRadius" Value="0,0,3,3"/>
    <Setter x:Uid="Setter_1161" Property="ValueEditors:ColorChannelEditor.RangeMargin" Value="0"/>
    <Setter x:Uid="Setter_1162" Property="ValueEditors:ColorChannelEditor.RangeHeight" Value="3"/>
    <Setter x:Uid="Setter_1557" Property="ValueEditors:NumberEditor.HighlightCornerRadius" Value="4,4,4,4"/>
    <Setter x:Uid="Setter_1558" Property="ValueEditors:NumberEditor.HighlightMargin" Value="0,0,0,0"/>
    <Setter x:Uid="Setter_1559" Property="ValueEditors:NumberEditor.HighlightHeight" Value="7"/>
  </Style>
  <ValueEditors:ValueToIconConverter x:Key="ValueToIconConverter" x:Uid="ValueEditors:ValueToIconConverter_1"/>
  <DataTemplate x:Key="DefaultChoiceEditorButtonsItemTemplate" x:Uid="DataTemplate_1">
    <Image x:Uid="Image_1">
      <FrameworkElement.ToolTip>
        <Binding/>
      </FrameworkElement.ToolTip>
      <Image.Source>
        <MultiBinding x:Uid="MultiBinding_3" Mode="OneWay" Converter="{StaticResource ValueToIconConverter}">
          <Binding x:Uid="Binding_11" Mode="OneWay"
                   RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ValueEditors:ChoiceEditor}}"/>
          <Binding x:Uid="Binding_12" Mode="OneWay" Path="."/>
        </MultiBinding>
      </Image.Source>
    </Image>
  </DataTemplate>
  <Style x:Key="DefaultChoiceEditorButtonsItemContainerStyle" x:Uid="Style_158"
         TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource IconListBoxItemStyle}">
    <Setter x:Uid="Setter_1531" Property="Controls:Icon.SelectedImage">
      <Setter.Value>
        <MultiBinding x:Uid="MultiBinding_8" Mode="OneWay" Converter="{StaticResource ValueToIconConverter}"
                      ConverterParameter="On">
          <Binding x:Uid="Binding_28" Mode="OneWay"
                   RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ValueEditors:ChoiceEditor}}"/>
          <Binding x:Uid="Binding_29" Mode="OneWay" Path="."/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1532" Property="Controls:Icon.DeselectedImage">
      <Setter.Value>
        <MultiBinding x:Uid="MultiBinding_7" Mode="OneWay" Converter="{StaticResource ValueToIconConverter}"
                      ConverterParameter="Off">
          <Binding x:Uid="Binding_26" Mode="OneWay"
                   RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ValueEditors:ChoiceEditor}}"/>
          <Binding x:Uid="Binding_27" Mode="OneWay" Path="."/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1533" Property="FrameworkElement.ToolTip">
      <Setter.Value>
        <Binding/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1852" Property="FrameworkElement.Margin" Value="0,0,-1,0"/>
    <Setter x:Uid="Setter_1978" Property="Control.Background" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1972" Property="Control.BorderBrush"
            Value="{DynamicResource FlatToggleNormalBorderBrush}"/>
    <Setter x:Uid="Setter_1973" Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1175" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_1983" Property="Control.Background"
                Value="{DynamicResource FlatToggleHoverBackgroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ChoiceEditorComboTemplate" x:Uid="ControlTemplate_45"
                   TargetType="{x:Type ValueEditors:ChoiceEditor}">
    <ComboBox x:Name="PART_Combo" x:Uid="ComboBox_1" Control.HorizontalContentAlignment="Stretch"
              IsEditable="{TemplateBinding ValueEditors:ChoiceEditor.IsEditable}"
              ItemsControl.ItemTemplate="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplate}"
              ItemsControl.ItemTemplateSelector="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplateSelector}"
              Control.BorderThickness="1" Control.Padding="0" FrameworkElement.MinHeight="0"
              FrameworkElement.MinWidth="0" automation:AutomationElement.Id="ValueEditorControlId"
              ScrollViewer.CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
              IsDropDownOpen="{Binding InternalIsSelectingValue, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWayToSource}"
              ItemsControl.GroupStyleSelector="{Binding GroupStyleSelectorInternal, RelativeSource={RelativeSource TemplatedParent}}"/>
    <ControlTemplate.Triggers>
      <Trigger x:Uid="Trigger_83" Property="ValueEditors:ChoiceEditor.ForceBinding" Value="true">
        <Setter x:Uid="Setter_532" TargetName="PART_Combo" Property="Selector.SelectedItem">
          <Setter.Value>
            <Binding Path="InternalValue">
              <Binding.RelativeSource>
                <RelativeSource Mode="TemplatedParent"/>
              </Binding.RelativeSource>
            </Binding>
          </Setter.Value>
        </Setter>
        <Setter x:Uid="Setter_534" TargetName="PART_Combo"
                Value="{Binding InternalStringValue, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                Property="ComboBox.Text"/>
        <Setter x:Uid="Setter_535" TargetName="PART_Combo"
                Value="{Binding ItemsSource, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                Property="ItemsControl.ItemsSource"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Uid="Style_86" TargetType="{x:Type ValueEditors:ChoiceEditor}">
    <Setter x:Uid="Setter_536" Property="UIElement.Focusable" Value="false"/>
    <Setter x:Uid="Setter_547" Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_548" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_549" Property="Control.BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
    <Setter x:Uid="Setter_1152" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1153" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1154" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1120" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_456" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_44" TargetType="{x:Type ValueEditors:ChoiceEditor}">
          <TextBlock x:Uid="TextBlock_3" FrameworkElement.Margin="5,2,17,2" FrameworkElement.VerticalAlignment="Center"
                     FrameworkElement.HorizontalAlignment="Stretch">
            <TextBlock.Text>
              <Binding Path="InternalValue" Mode="OneWay">
                <Binding.RelativeSource>
                  <RelativeSource Mode="TemplatedParent"/>
                </Binding.RelativeSource>
              </Binding>
            </TextBlock.Text>
          </TextBlock>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1090" Property="ValueEditors:ChoiceEditor.UseItemTemplateForSelection" Value="true">
        <Setter x:Uid="Setter_1469" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_92" TargetType="{x:Type ValueEditors:ChoiceEditor}">
              <ContentPresenter x:Uid="ContentPresenter_52" FrameworkElement.Margin="5,2,17,2"
                                FrameworkElement.VerticalAlignment="Center" FrameworkElement.HorizontalAlignment="Stretch"
                                ContentTemplate="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplateSelector}">
                <ContentPresenter.Content>
                  <Binding Path="InternalValue" Mode="OneWay">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </ContentPresenter.Content>
              </ContentPresenter>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_84" Property="UIElement.IsMouseOver" Value="true">
        <Setter x:Uid="Setter_537" Property="ValueEditors:ChoiceEditor.ShowFullControl" Value="true"/>
      </Trigger>
      <Trigger x:Uid="Trigger_1041" Property="ValueEditors:ChoiceEditor.ViewType" Value="Combo">
        <Setter x:Uid="Setter_1245" Property="ValueEditors:ChoiceEditor.BorderCornerRadius" Value="4"/>
        <Setter x:Uid="Setter_1246" Property="ValueEditors:ChoiceEditor.DropButtonInset" Value="2,1,1,1"/>
        <Setter x:Uid="Setter_1247" Property="ValueEditors:ChoiceEditor.TextAreaInset" Value="1,1,17,1"/>
        <Setter x:Uid="Setter_1248" Property="ValueEditors:ChoiceEditor.DropButtonBrush"
                Value="{DynamicResource ButtonDefaultBrush}"/>
        <Setter x:Uid="Setter_1249" Property="ValueEditors:ChoiceEditor.InnerCornerRadius" Value="2"/>
        <Setter x:Uid="Setter_1250" Property="ValueEditors:ChoiceEditor.ButtonIcon"
                Value="{DynamicResource ExpressionComboBoxButtonIcon}"/>
        <Setter x:Uid="Setter_1251" Property="ValueEditors:ChoiceEditor.IconWidth" Value="8"/>
        <Setter x:Uid="Setter_1503" Property="ValueEditors:ChoiceEditor.IconHeight" Value="5"/>
      </Trigger>
      <MultiTrigger x:Uid="MultiTrigger_14">
        <MultiTrigger.Conditions>
          <Condition x:Uid="Condition_29" Property="ValueEditors:ChoiceEditor.ViewType" Value="Combo"/>
          <Condition x:Uid="Condition_30" Property="ValueEditors:ChoiceEditor.ShowFullControl" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter x:Uid="Setter_457" Property="Control.Template" Value="{DynamicResource ChoiceEditorComboTemplate}"/>
      </MultiTrigger>
      <Trigger x:Uid="Trigger_76" Property="ValueEditors:ChoiceEditor.ViewType" Value="Buttons">
        <Setter x:Uid="Setter_1495" Property="ValueEditors:ChoiceEditor.ItemTemplate"
                Value="{DynamicResource DefaultChoiceEditorButtonsItemTemplate}"/>
        <Setter x:Uid="Setter_458" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_46" TargetType="{x:Type ValueEditors:ChoiceEditor}">
              <ListBox x:Uid="ListBox_1" FrameworkElement.Style="{StaticResource HorizontalRadioList}"
                       ItemsControl.ItemsSource="{TemplateBinding ValueEditors:ChoiceEditor.ItemsSource}"
                       ItemsControl.ItemTemplate="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplate}"
                       ItemsControl.ItemTemplateSelector="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplateSelector}"
                       automation:AutomationElement.Id="ValueEditorControlId">
                <Control.Background>
                  <x:NullExtension/>
                </Control.Background>
                <Selector.SelectedItem>
                  <Binding Path="InternalValue">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </Selector.SelectedItem>
                <Selector.SelectedIndex>
                  <Binding Path="InternalValueIndex">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </Selector.SelectedIndex>
              </ListBox>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_1110" Property="ValueEditors:ChoiceEditor.ViewType" Value="ToggleButtons">
        <Setter x:Uid="Setter_1534" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_98" TargetType="{x:Type ValueEditors:ChoiceEditor}">
              <ListBox x:Uid="ListBox_2" FrameworkElement.Style="{StaticResource HorizontalRadioList}"
                       ItemsControl.ItemContainerStyle="{DynamicResource DefaultChoiceEditorButtonsItemContainerStyle}"
                       ItemsControl.ItemsSource="{TemplateBinding ValueEditors:ChoiceEditor.ItemsSource}"
                       ItemsControl.ItemTemplate="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplate}"
                       ItemsControl.ItemTemplateSelector="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplateSelector}"
                       automation:AutomationElement.Id="ValueEditorControlId">
                <Control.Background>
                  <x:NullExtension/>
                </Control.Background>
                <Selector.SelectedItem>
                  <Binding Path="InternalValue">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </Selector.SelectedItem>
                <Selector.SelectedIndex>
                  <Binding Path="InternalValueIndex">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </Selector.SelectedIndex>
              </ListBox>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger x:Uid="Trigger_78" Property="ValueEditors:ChoiceEditor.ViewType" Value="Toggle">
        <Setter x:Uid="Setter_464" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_49" TargetType="{x:Type ValueEditors:ChoiceEditor}">
              <CheckBox x:Uid="CheckBox_2" UIElement.Focusable="false"
                        ContentControl.ContentTemplate="{TemplateBinding ValueEditors:ChoiceEditor.ItemTemplate}"
                        automation:AutomationElement.Id="ValueEditorControlId">
                <ToggleButton.IsChecked>
                  <Binding Path="InternalValue">
                    <Binding.RelativeSource>
                      <RelativeSource Mode="TemplatedParent"/>
                    </Binding.RelativeSource>
                  </Binding>
                </ToggleButton.IsChecked>
              </CheckBox>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToolTipContentBorder" x:Uid="Style_212" TargetType="{x:Type Border}">
    <Setter x:Uid="Setter_1957" Property="Border.BorderBrush" Value="{DynamicResource ToolTipBorderBrush}"/>
    <Setter x:Uid="Setter_1950" Property="Border.CornerRadius" Value="3"/>
    <Setter x:Uid="Setter_1951" Property="Border.BorderThickness" Value="1"/>
    <Setter x:Uid="Setter_1952" Property="Border.Background" Value="{DynamicResource ToolTipBackgroundBrush}"/>
  </Style>
  <Style x:Uid="Style_139" TargetType="{x:Type ToolTip}">
    <Setter x:Uid="Setter_1398" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1545" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1953" Property="Control.Padding" Value="5,1,5,1"/>
    <Setter x:Uid="Setter_1399" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_80" TargetType="{x:Type ToolTip}">
          <Border x:Uid="Border_90" FrameworkElement.Style="{StaticResource DropShadowBorderStyle}">
            <Border x:Uid="Border_54" FrameworkElement.Style="{StaticResource ToolTipContentBorder}"
                    Padding="{TemplateBinding Control.Padding}">
              <ContentPresenter x:Uid="ContentPresenter_45"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WrapToolTipStyle" x:Uid="Style_205" TargetType="{x:Type ToolTip}"
         BasedOn="{StaticResource {x:Type ToolTip}}">
    <Setter x:Uid="Setter_1892" Property="ContentControl.ContentTemplate">
      <Setter.Value>
        <DataTemplate x:Uid="DataTemplate_9" DataType="{x:Type System:String}">
          <TextBlock x:Uid="TextBlock_15" TextWrapping="Wrap" FrameworkElement.MaxWidth="300">
            <TextBlock.Text>
              <Binding/>
            </TextBlock.Text>
          </TextBlock>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandoVerticalListItemStyle" x:Uid="Style_89"
         TargetType="{x:Type UserInterface:ExpandoListItem}" BasedOn="{StaticResource ExpressionExpander}">
    <Setter x:Uid="Setter_466" Property="FrameworkElement.Margin" Value="0,2,0,1"/>
    <Setter x:Uid="Setter_467" Property="Expander.IsExpanded">
      <Setter.Value>
        <Binding Path="IsExpanded" Mode="TwoWay"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_468" Property="HeaderedContentControl.Header">
      <Setter.Value>
        <Binding Path="Title" Mode="OneTime"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_469" Property="ContentControl.Content">
      <Setter.Value>
        <Binding Path="Content" Mode="OneTime"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1311" Property="Control.Padding" Value="4,0,4,4"/>
  </Style>
  <Style x:Key="ExpandoHorizontalListItemStyle" x:Uid="Style_90"
         TargetType="{x:Type UserInterface:ExpandoListItem}" BasedOn="{StaticResource ExpressionExpander}">
    <Setter x:Uid="Setter_470" Property="FrameworkElement.Margin" Value="2,0,1,0"/>
    <Setter x:Uid="Setter_471" Property="Expander.IsExpanded">
      <Setter.Value>
        <Binding Path="IsExpanded" Mode="TwoWay"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_472" Property="HeaderedContentControl.Header">
      <Setter.Value>
        <Binding Path="Title" Mode="OneTime"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_473" Property="ContentControl.Content">
      <Setter.Value>
        <Binding Path="Content" Mode="OneTime"/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1312" Property="Control.Padding" Value="4,0,4,4"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_79" Property="Expander.IsExpanded" Value="false">
        <Setter x:Uid="Setter_474" Property="Expander.ExpandDirection" Value="Right"/>
        <Setter x:Uid="Setter_1313" Property="Control.Padding" Value="0,4,4,4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpandoRowStyle" x:Uid="Style_91" TargetType="{x:Type RowDefinition}">
    <Setter x:Uid="Setter_475" Property="RowDefinition.MinHeight" Value="24"/>
    <Setter x:Uid="Setter_476" Property="RowDefinition.Height">
      <Setter.Value>
        <Binding Path="AdjustedSize" Mode="TwoWay"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandoColumnStyle" x:Uid="Style_92" TargetType="{x:Type ColumnDefinition}">
    <Setter x:Uid="Setter_478" Property="ColumnDefinition.MinWidth" Value="24"/>
    <Setter x:Uid="Setter_479" Property="ColumnDefinition.Width">
      <Setter.Value>
        <Binding Path="AdjustedSize" Mode="TwoWay"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandoVerticalSplitterStyle" x:Uid="Style_93"
         TargetType="{x:Type UserInterface:ExpandoSplitter}">
    <Setter x:Uid="Setter_481" Property="FrameworkElement.Height" Value="3"/>
    <Setter x:Uid="Setter_482" Property="FrameworkElement.Margin" Value="0,-2,0,0"/>
    <Setter x:Uid="Setter_483" Property="FrameworkElement.Cursor" Value="SizeNS"/>
    <Setter x:Uid="Setter_1237" Property="UIElement.Opacity" Value="0"/>
  </Style>
  <Style x:Key="ExpandoHorizontalSplitterStyle" x:Uid="Style_94"
         TargetType="{x:Type UserInterface:ExpandoSplitter}">
    <Setter x:Uid="Setter_484" Property="FrameworkElement.Width" Value="3"/>
    <Setter x:Uid="Setter_485" Property="FrameworkElement.Margin" Value="-2,0,0,0"/>
    <Setter x:Uid="Setter_486" Property="FrameworkElement.Cursor" Value="SizeWE"/>
    <Setter x:Uid="Setter_1238" Property="UIElement.Opacity" Value="0"/>
  </Style>
  <Style x:Key="ExpandoListStyle" x:Uid="Style_95" TargetType="{x:Type UserInterface:ExpandoList}">
    <Setter x:Uid="Setter_487" Property="UserInterface:ExpandoList.ExpandoListItemStyle"
            Value="{StaticResource ExpandoVerticalListItemStyle}"/>
    <Setter x:Uid="Setter_488" Property="UserInterface:ExpandoList.ExpandoDefinitionStyle"
            Value="{StaticResource ExpandoRowStyle}"/>
    <Setter x:Uid="Setter_489" Property="UserInterface:ExpandoList.ExpandoSplitterStyle"
            Value="{StaticResource ExpandoVerticalSplitterStyle}"/>
    <Setter x:Uid="Setter_490" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_51" TargetType="{x:Type UserInterface:ExpandoList}">
          <Grid x:Name="PART_MainGrid" x:Uid="Grid_29" FrameworkElement.Margin="0,-2,0,-1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_80" Property="UserInterface:ExpandoList.Orientation" Value="Horizontal">
        <Setter x:Uid="Setter_491" Property="UserInterface:ExpandoList.ExpandoListItemStyle"
                Value="{StaticResource ExpandoHorizontalListItemStyle}"/>
        <Setter x:Uid="Setter_492" Property="UserInterface:ExpandoList.ExpandoDefinitionStyle"
                Value="{StaticResource ExpandoColumnStyle}"/>
        <Setter x:Uid="Setter_1121" Property="UserInterface:ExpandoList.ExpandoSplitterStyle"
                Value="{StaticResource ExpandoHorizontalSplitterStyle}"/>
        <Setter x:Uid="Setter_1122" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_52" TargetType="{x:Type UserInterface:ExpandoList}">
              <Grid x:Name="PART_MainGrid" x:Uid="Grid_30" FrameworkElement.Margin="-2,0,-1,0"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="AdvancedExpanderToggleButtonStyle" x:Uid="Style_144" TargetType="{x:Type ToggleButton}">
    <Setter x:Uid="Setter_65" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_85" TargetType="{x:Type ToggleButton}">
          <Grid x:Uid="Grid_20">
            <Border FrameworkElement.Name="FillBorder" x:Uid="FillBorder"
                    FrameworkElement.HorizontalAlignment="Stretch" FrameworkElement.Width="Auto"
                    Background="{DynamicResource AdvancedExpanderBrush}" CornerRadius="0,0,4,4"/>
            <Controls:Icon FrameworkElement.Name="ToggleButtonIcon" x:Uid="ToggleButtonIcon" FrameworkElement.Width="12"
                           FrameworkElement.Height="10" SourceBrush="{StaticResource DefaultExpanderToggleButtonBrush}"
                           RedChroma="{DynamicResource AdvancedExpanderToggleBrush}" UIElement.RenderTransformOrigin="0.5,0.5"
                           FrameworkElement.HorizontalAlignment="Center" FrameworkElement.Margin="0,2,0,0"
                           FrameworkElement.VerticalAlignment="Top" UIElement.SnapsToDevicePixels="false"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_18" Property="ToggleButton.IsChecked" Value="True">
              <Setter x:Uid="Setter_57" TargetName="ToggleButtonIcon" Property="UIElement.RenderTransform">
                <Setter.Value>
                  <TransformGroup x:Uid="TransformGroup_1">
                    <ScaleTransform x:Uid="ScaleTransform_2" ScaleX="1" ScaleY="1"/>
                    <SkewTransform x:Uid="SkewTransform_1" AngleX="0" AngleY="0"/>
                    <RotateTransform x:Uid="RotateTransform_15" Angle="180"/>
                    <TranslateTransform x:Uid="TranslateTransform_1" X="0" Y="2"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger x:Uid="Trigger_1091" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_58" Value="{DynamicResource WhiteBrush}" TargetName="ToggleButtonIcon"
                      Property="Controls:Icon.RedChroma"/>
              <Setter x:Uid="Setter_60" Value="{DynamicResource PaneBrush}" TargetName="FillBorder"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1079" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1417" Value="{DynamicResource WhiteBrush}" TargetName="ToggleButtonIcon"
                      Property="Controls:Icon.RedChroma"/>
              <Setter x:Uid="Setter_1873" Value="{DynamicResource ListBackgroundBrush}" TargetName="FillBorder"
                      Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionAdvancedOptionsExpanderStyle" x:Uid="Style_200" TargetType="{x:Type Expander}"
         BasedOn="{StaticResource {x:Type Expander}}">
    <Setter x:Uid="Setter_1850" Property="Controls:AnimatedExpander.IsAnimated" Value="true"/>
    <Setter x:Uid="Setter_1851" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_84" TargetType="{x:Type Expander}">
          <FrameworkTemplate.Resources>
            <Data:MultiplyConverter x:Uid="Data:MultiplyConverter_1" x:Key="NegateConverter" MultiplyValue="-1"/>
            <Data:SingleMarginConverter x:Uid="Data:SingleMarginConverter_1" x:Key="MarginTopConverter"
                                        Data:MarginConverter.Converter="{StaticResource NegateConverter}" TargetSubProperty="Top"/>
            <Storyboard x:Uid="Storyboard_2" x:Key="Open">
              <ThicknessAnimationUsingKeyFrames x:Uid="DoubleAnimationUsingKeyFrames_2" Storyboard.TargetName="ExpandSite"
                                                Storyboard.TargetProperty="Margin">
                <SplineThicknessKeyFrame x:Uid="SplineDoubleKeyFrame_4" KeySpline=".5,.5,.5,.5" ThicknessKeyFrame.Value="0,0,0,0"
                                         ThicknessKeyFrame.KeyTime="00:00:00.1670000"/>
              </ThicknessAnimationUsingKeyFrames>
              <ObjectAnimationUsingKeyFrames x:Uid="ObjectAnimationUsingKeyFrames_1" Storyboard.TargetName="ExpandSite"
                                             Storyboard.TargetProperty="(Controls:ClickControl.ScrollIntoView)">
                <DiscreteObjectKeyFrame x:Uid="DiscreteObjectKeyFrame_1" ObjectKeyFrame.KeyTime="00:00:00.167">
                  <ObjectKeyFrame.Value>
                    <System:Boolean x:Uid="System:Boolean_1">True</System:Boolean>
                  </ObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
              </ObjectAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Uid="Storyboard_3" x:Key="Close">
              <ThicknessAnimation x:Uid="ThicknessAnimation_1" Timeline.BeginTime="00:00:00" Storyboard.TargetName="ExpandSite"
                                  Storyboard.TargetProperty="Margin" Timeline.Duration="00:00:00.1670000"/>
              <ObjectAnimationUsingKeyFrames x:Uid="ObjectAnimationUsingKeyFrames_2" Storyboard.TargetName="ExpandSite"
                                             Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame x:Uid="DiscreteObjectKeyFrame_2" ObjectKeyFrame.Value="{x:Static Visibility.Collapsed}"
                                        ObjectKeyFrame.KeyTime="00:00:00.167"/>
              </ObjectAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Uid="Border_55" Background="{DynamicResource AdvancedExpanderBrush}"
                  UIElement.SnapsToDevicePixels="true" CornerRadius="0,0,4,4">
            <Grid x:Uid="Grid_19" UIElement.ClipToBounds="true">
              <Grid.RowDefinitions>
                <RowDefinition x:Uid="RowDefinition_36" Height="14"/>
                <RowDefinition x:Uid="RowDefinition_37" Height="Auto"/>
              </Grid.RowDefinitions>
              <ToggleButton x:Name="HeaderSite" x:Uid="ToggleButton_2"
                            FrameworkElement.Style="{StaticResource AdvancedExpanderToggleButtonStyle}"
                            FrameworkElement.MinHeight="0" FrameworkElement.MinWidth="0" UIElement.Focusable="false"
                            Control.FontFamily="{TemplateBinding Control.FontFamily}"
                            Control.FontSize="{TemplateBinding Control.FontSize}"
                            Control.FontStretch="{TemplateBinding Control.FontStretch}"
                            Control.FontStyle="{TemplateBinding Control.FontStyle}"
                            Control.FontWeight="{TemplateBinding Control.FontWeight}"
                            Control.Foreground="{TemplateBinding Control.Foreground}"
                            Control.HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            Control.Padding="{TemplateBinding Control.Padding}"
                            Control.VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            ContentControl.Content="{TemplateBinding HeaderedContentControl.Header}"
                            ContentControl.ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            FrameworkElement.Width="Auto">
                <ToggleButton.IsChecked>
                  <Binding Path="IsExpanded" Mode="TwoWay"
                           RelativeSource="{RelativeSource TemplatedParent, AncestorType={x:Null}}"/>
                </ToggleButton.IsChecked>
              </ToggleButton>
              <Decorator x:Uid="Decorator_1" UIElement.ClipToBounds="true" FrameworkElement.HorizontalAlignment="Stretch"
                         FrameworkElement.VerticalAlignment="Stretch" Grid.Row="1">
                <Decorator x:Name="ExpandSite" x:Uid="ExpandSite" Panel.ZIndex="-1" UIElement.Visibility="Collapsed">
                  <FrameworkElement.Margin>
                    <Binding Path="ActualHeight" ElementName="ExpandSite" Converter="{StaticResource MarginTopConverter}"/>
                  </FrameworkElement.Margin>
                  <ContentPresenter x:Name="ExpanderContentPresenter" x:Uid="ContentPresenter_11" FrameworkElement.Margin="4,4,4,4"
                                    UIElement.Focusable="false" Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
                </Decorator>
              </Decorator>
              <Rectangle FrameworkElement.Name="BorderRectangle" x:Uid="BorderRectangle"
                         Shape.Fill="{DynamicResource RecessedBrush}" UIElement.Opacity="0.7"
                         FrameworkElement.HorizontalAlignment="Stretch" FrameworkElement.VerticalAlignment="Top"
                         FrameworkElement.Width="Auto" FrameworkElement.Height="1"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1080" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_66" TargetName="HeaderSite" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter x:Uid="Setter_1418" TargetName="BorderRectangle" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger x:Uid="Trigger_25" Property="Expander.IsExpanded" Value="true">
              <Setter x:Uid="Setter_67" TargetName="ExpanderContentPresenter" Property="FrameworkElement.Margin"
                      Value="4,4,4,4"/>
              <Setter x:Uid="Setter_68" TargetName="ExpandSite" Property="FrameworkElement.Margin">
                <Setter.Value>
                  <Binding Path="ActualHeight" ElementName="ExpandSite" Converter="{StaticResource MarginTopConverter}"/>
                </Setter.Value>
              </Setter>
              <Setter x:Uid="Setter_1679" Localization.Attributes="Value(Readable Modifiable)" TargetName="HeaderSite"
                      Property="FrameworkElement.ToolTip" Value="Hide advanced properties"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1133" Property="Expander.IsExpanded" Value="false">
              <Setter x:Uid="Setter_1680" Localization.Attributes="Value(Readable Modifiable)" TargetName="HeaderSite"
                      Property="FrameworkElement.ToolTip" Value="Show advanced properties"/>
              <Setter x:Uid="Setter_1874" TargetName="ExpandSite" Property="Controls:ClickControl.ScrollIntoView"
                      Value="false"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionDialogButton" x:Uid="Style_167" TargetType="{x:Type Button}">
    <Setter x:Uid="Setter_1583" Property="Control.Background" Value="#E6E6E6"/>
    <Setter x:Uid="Setter_1584" Property="Control.BorderBrush" Value="#CCCCCC"/>
    <Setter x:Uid="Setter_1585" Property="Control.Foreground" Value="#595959"/>
    <Setter x:Uid="Setter_1586" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1587" Property="FrameworkElement.MinWidth" Value="50"/>
    <Setter x:Uid="Setter_1588" Property="FrameworkElement.MinHeight" Value="18"/>
    <Setter x:Uid="Setter_2007" Property="Control.Padding" Value="1,0,1,1"/>
    <Setter x:Uid="Setter_1589" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1590" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1591" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1592" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_101" TargetType="{x:Type Button}">
          <Border x:Name="ButtonTemplateGrid" x:Uid="Border_71" Background="{TemplateBinding Control.Background}"
                  CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  FrameworkElement.MinHeight="{TemplateBinding FrameworkElement.MinHeight}"
                  FrameworkElement.MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
            <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_55" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              RecognizesAccessKey="true" FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1120" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1593" Property="Control.Background" Value="#D9D9D9"/>
              <Setter x:Uid="Setter_1594" Property="Control.Foreground" Value="#333333"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1178" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_2004" Property="UIElement.Opacity" Value="0.3"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1179" Property="UIElement.IsFocused" Value="true">
              <Setter x:Uid="Setter_2005" Property="Control.BorderBrush" Value="#595959"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1121" Property="ButtonBase.IsPressed" Value="true">
              <Setter x:Uid="Setter_1596" Property="Control.Background" Value="#A6A6A6"/>
              <Setter x:Uid="Setter_1597" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionDialogRadioButton" x:Uid="Style_165" TargetType="{x:Type RadioButton}">
    <Setter x:Uid="Setter_1599" Property="Control.Background">
      <Setter.Value>
        <x:NullExtension/>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1600" Property="Control.BorderBrush" Value="{DynamicResource RecessedBrush}"/>
    <Setter x:Uid="Setter_1601" Property="Control.Foreground" Value="{DynamicResource Text1Brush}"/>
    <Setter x:Uid="Setter_1602" Property="Control.Padding" Value="4,0,0,0"/>
    <Setter x:Uid="Setter_1603" Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter x:Uid="Setter_1604" Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter x:Uid="Setter_1605" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_102" TargetType="{x:Type RadioButton}">
          <Grid x:Uid="Grid_70" Panel.Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Uid="ColumnDefinition_65" Width="Auto"/>
              <ColumnDefinition x:Uid="ColumnDefinition_66" Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid x:Uid="Grid_71" FrameworkElement.Width="12" FrameworkElement.Height="12"
                  FrameworkElement.Margin="0,4,0,0" FrameworkElement.VerticalAlignment="Top">
              <Ellipse x:Name="Ellipse_Border" x:Uid="Ellipse_4" Shape.Fill="{TemplateBinding Control.Background}"
                       Shape.Stroke="{TemplateBinding Control.BorderBrush}" Shape.StrokeThickness="1"
                       FrameworkElement.HorizontalAlignment="Stretch" FrameworkElement.VerticalAlignment="Stretch"/>
              <Ellipse x:Name="CheckMark" x:Uid="Ellipse_5" Shape.Fill="Black" FrameworkElement.Width="6"
                       FrameworkElement.Height="6" FrameworkElement.HorizontalAlignment="Center"
                       FrameworkElement.VerticalAlignment="Center"/>
            </Grid>
            <ContentPresenter x:Uid="ContentPresenter_56" Grid.Column="1"
                              FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                              FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_1122" Property="ToggleButton.IsChecked" Value="false">
              <Setter x:Uid="Setter_1606" TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1123" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1607" Value="{DynamicResource DarkBrush}" TargetName="Ellipse_Border"
                      Property="Shape.Stroke"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1124" Property="UIElement.IsEnabled" Value="false">
              <Setter x:Uid="Setter_1608" Value="{DynamicResource RecessedBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpressionDialogHyperlink" x:Uid="Style_166" TargetType="{x:Type Hyperlink}">
    <Setter x:Uid="Setter_1609" Property="TextElement.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.IconFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1610" Property="TextElement.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.IconFontSizeKey}}"/>
    <Setter x:Uid="Setter_1611" Property="TextElement.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.IconFontWeightKey}}"/>
    <Setter x:Uid="Setter_1612" Property="TextElement.Foreground" Value="#3399FF"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1125" Property="ContentElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1613" Property="TextElement.Foreground"
                Value="{DynamicResource ButtonDisabledTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ExpressionDialogText" x:Uid="Style_5" TargetType="{x:Type TextBlock}">
    <Setter x:Uid="Setter_1614" Property="TextBlock.TextWrapping" Value="Wrap"/>
    <Setter x:Uid="Setter_1615" Property="TextBlock.TextTrimming" Value="None"/>
    <Setter x:Uid="Setter_1616" Property="TextBlock.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.IconFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1617" Property="TextBlock.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.IconFontSizeKey}}"/>
    <Setter x:Uid="Setter_1618" Property="TextBlock.Foreground" Value="#FF3b3b3b"/>
  </Style>
  <SolidColorBrush x:Key="30pcGrayBrush" x:Uid="SolidColorBrush_33" Color="#FFB2B2B2"/>
  <Style x:Key="ExpressionDialogCheckBox" x:Uid="Style_13" TargetType="{x:Type CheckBox}">
    <Setter x:Uid="Setter_1189" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_131" TargetType="{x:Type CheckBox}">
          <Grid x:Uid="Grid_42">
            <BulletDecorator x:Uid="BulletDecorator_2" Background="Transparent">
              <BulletDecorator.Bullet>
                <Grid x:Uid="Grid_83" FrameworkElement.Width="Auto" FrameworkElement.Height="Auto">
                  <Grid x:Uid="Grid_44" FrameworkElement.Width="12" FrameworkElement.Height="12"
                        FrameworkElement.Margin="0,0,0,0">
                    <Border x:Name="Border" x:Uid="Border_95" Background="{TemplateBinding Control.Background}"
                            BorderBrush="{DynamicResource 30pcGrayBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" FrameworkElement.Width="Auto"
                            FrameworkElement.Height="Auto" CornerRadius="2,2,2,2"/>
                  </Grid>
                </Grid>
              </BulletDecorator.Bullet>
              <ContentPresenter x:Uid="ContentPresenter_58"
                                FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                FrameworkElement.Margin="{TemplateBinding Control.Padding}"
                                FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                RecognizesAccessKey="true"/>
            </BulletDecorator>
            <Path x:Name="CheckMark" x:Uid="CheckMark" Shape.StrokeThickness="2"
                  UIElement.SnapsToDevicePixels="false"
                  Data="M 2.3235174E-09,7 L 4,12 12,2 9,-3.8208896E-08 4,9 2,6 Z"
                  Shape.Fill="{TemplateBinding Control.Foreground}" FrameworkElement.Margin="1.584,-1.542,0,0"
                  FrameworkElement.HorizontalAlignment="Left" FrameworkElement.VerticalAlignment="Top"
                  FrameworkElement.Width="12" FrameworkElement.Height="12"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger x:Uid="Trigger_24" Property="ToggleButton.IsChecked" Value="false">
              <Setter x:Uid="Setter_1190" TargetName="CheckMark" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger x:Uid="Trigger_1180" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_1191" Value="{DynamicResource 50pcGrayMainText}" TargetName="Border"
                      Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter x:Uid="Setter_1192" Property="Control.Foreground" Value="{DynamicResource 50pcGrayMainText}"/>
  </Style>
  <Style x:Uid="Style_170" TargetType="{x:Type Hyperlink}">
    <Setter x:Uid="Setter_1757" Property="TextElement.Foreground" Value="{DynamicResource HyperlinkBrush}"/>
    <Style.Triggers>
      <Trigger x:Uid="Trigger_1142" Property="ContentElement.IsEnabled" Value="false">
        <Setter x:Uid="Setter_1758" Property="TextElement.Foreground" Value="{DynamicResource FadedTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DialogRootContainer" x:Uid="Style_218" TargetType="{x:Type Border}">
    <Setter x:Uid="Setter_1935" Property="Border.Background" Value="{DynamicResource DialogBackgroundBrush}"/>
    <Setter x:Uid="Setter_1936" Property="Border.Padding" Value="{DynamicResource LargeMargin}"/>
    <Setter x:Uid="Setter_1937" Property="Border.BorderBrush" Value="{DynamicResource WindowBorderBrush}"/>
    <Setter x:Uid="Setter_2001" Property="TextElement.Foreground" Value="{DynamicResource DialogTextBrush}"/>
    <Setter x:Uid="Setter_1484" Property="TextElement.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1135" Property="TextElement.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1136" Property="TextElement.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_1241" Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Style.Resources>
      <Style x:Uid="Style_181" x:Key="DialogTextBoxBaseFocusVisualStyle">
        <Setter x:Uid="Setter_1675" Property="Control.Template">
          <Setter.Value>
            <ControlTemplate x:Uid="ControlTemplate_108">
              <Rectangle x:Uid="Rectangle_62" UIElement.SnapsToDevicePixels="true"
                         Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1" RadiusX="3"
                         RadiusY="3"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Uid="Style_182" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter x:Uid="Setter_1676" Property="FrameworkElement.FocusVisualStyle"
                Value="{StaticResource DialogTextBoxBaseFocusVisualStyle}"/>
      </Style>
      <Style x:Uid="Style_183" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter x:Uid="Setter_1670" Property="FrameworkElement.FocusVisualStyle">
          <Setter.Value>
            <Style x:Uid="Style_180">
              <Setter x:Uid="Setter_1671" Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate x:Uid="ControlTemplate_110">
                    <Rectangle x:Uid="Rectangle_64" UIElement.SnapsToDevicePixels="true"
                               Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1" RadiusX="4"
                               RadiusY="4"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Uid="Style_184" TargetType="{x:Type ValueEditors:NumberEditor}"
             BasedOn="{StaticResource {x:Type ValueEditors:NumberEditor}}">
        <Setter x:Uid="Setter_1677" Property="FrameworkElement.FocusVisualStyle"
                Value="{StaticResource DialogTextBoxBaseFocusVisualStyle}"/>
      </Style>
      <Style x:Uid="Style_185" TargetType="{x:Type ValueEditors:StringEditor}"
             BasedOn="{StaticResource {x:Type ValueEditors:StringEditor}}">
        <Setter x:Uid="Setter_1678" Property="FrameworkElement.FocusVisualStyle"
                Value="{StaticResource DialogTextBoxBaseFocusVisualStyle}"/>
      </Style>
      <Style x:Uid="Style_189" TargetType="{x:Type ValueEditors:ChoiceEditor}"
             BasedOn="{StaticResource {x:Type ValueEditors:ChoiceEditor}}">
        <Setter x:Uid="Setter_1706" Property="FrameworkElement.FocusVisualStyle">
          <Setter.Value>
            <Style x:Uid="Style_190">
              <Setter x:Uid="Setter_1707" Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate x:Uid="ControlTemplate_111">
                    <Rectangle x:Uid="Rectangle_65" UIElement.SnapsToDevicePixels="true"
                               Shape.Stroke="{DynamicResource ControlFocusBorderBrush}" Shape.StrokeThickness="1" RadiusX="4"
                               RadiusY="4"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
  </Style>
  <ControlTemplate x:Key="ImagePreviewControl" x:Uid="ControlTemplate_7" TargetType="{x:Type ContentControl}">
    <Border x:Uid="Border_88" CornerRadius="3" Background="{DynamicResource CheckerboardBrush}">
      <Image x:Name="ImageControl" x:Uid="ImageControl" FrameworkElement.Height="175"
             FrameworkElement.Width="200" Stretch="Uniform">
        <Image.Source>
          <Binding Path="FullPath" Converter="{StaticResource UriToImageConverter}"/>
        </Image.Source>
      </Image>
    </Border>
    <ControlTemplate.Triggers>
      <MultiDataTrigger x:Uid="MultiDataTrigger_3">
        <MultiDataTrigger.Conditions>
          <Condition x:Uid="Condition_73" Value="True">
            <Condition.Binding>
              <Binding ElementName="ImageControl" Path="Source.Height"
                       Converter="{StaticResource LessThanEqualsConverter}" ConverterParameter="175"/>
            </Condition.Binding>
          </Condition>
          <Condition x:Uid="Condition_74" Value="True">
            <Condition.Binding>
              <Binding ElementName="ImageControl" Path="Source.Width" Converter="{StaticResource LessThanEqualsConverter}"
                       ConverterParameter="200"/>
            </Condition.Binding>
          </Condition>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter x:Uid="Setter_1942" TargetName="ImageControl" Property="Image.Stretch" Value="None"/>
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Uid="Style_215" TargetType="{x:Type ProgressBar}">
    <Setter x:Uid="Setter_1985" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_129" TargetType="{x:Type ProgressBar}">
          <Border x:Name="PART_Track" x:Uid="PART_Track" Background="{DynamicResource ProgressBarBackgroundBrush}"
                  BorderBrush="{DynamicResource ProgressBarBorderBrush}" BorderThickness="1" CornerRadius="3">
            <Border x:Name="PART_Indicator" x:Uid="PART_Indicator" FrameworkElement.HorizontalAlignment="Left"
                    Background="{DynamicResource ProgressBarProgressIndicatorBrush}" CornerRadius="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>