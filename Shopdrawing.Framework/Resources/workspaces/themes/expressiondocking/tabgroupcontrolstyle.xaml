<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.PlatformUI.Shell"
                    xmlns:vs="clr-namespace:Microsoft.VisualStudio.PlatformUI.Shell.Controls"
                    xmlns:userinterface="clr-namespace:Microsoft.Expression.Framework.UserInterface"
                    xmlns:automation="clr-namespace:Microsoft.Expression.Framework.Diagnostics"
                    xmlns:FrameworkData="clr-namespace:Microsoft.Expression.Framework.Data"
                    x:Uid="ResourceDictionary_1">
  <FrameworkData:NullToVisibilityCollapsedConverter x:Key="NullToVisibilityConverter" x:Uid="FrameworkData:NullToVisibilityCollapsedConverter_1"/>
  <Style x:Uid="Style_1" TargetType="{x:Type vs:TabGroupControl}">
    <Style.Resources>
      <DataTemplate x:Uid="DataTemplate_1" DataType="{x:Type vsshell:View}">
        <vs:ViewPresenter x:Uid="vs:ViewPresenter_1" ContentControl.Content="{Binding Content}">
          <vs:ViewPresenter.View>
            <Binding/>
          </vs:ViewPresenter.View>
          <vs:ViewPresenter.ContainingElement>
            <Binding/>
          </vs:ViewPresenter.ContainingElement>
        </vs:ViewPresenter>
      </DataTemplate>
    </Style.Resources>
    <Setter x:Uid="Setter_1642" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter x:Uid="Setter_1643" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
    <Setter x:Uid="Setter_1644" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
    <Setter x:Uid="Setter_4" Property="FocusManager.IsFocusScope" Value="true"/>
    <Setter x:Uid="Setter_5" Property="userinterface:FocusScopeManager.FocusScopePriority" Value="1"/>
    <Setter x:Uid="Setter_1" Property="Control.Template">
      <Setter.Value>
        <ControlTemplate x:Uid="ControlTemplate_1" TargetType="{x:Type vs:TabGroupControl}">
          <vs:DockTarget x:Name="PaletteFrameDockTarget" x:Uid="PaletteFrameDockTarget"
                         automation:AutomationElement.Id="PaletteFrameDockTarget" DockTargetType="Inside"
                         Border.Background="Transparent">
            <Grid x:Name="TabGroupControlPanel" x:Uid="Grid_1"
                  Panel.Background="{DynamicResource MainWindowBackgroundBrush}"
                  automation:AutomationElement.Id="PaletteContainerLayoutRoot">
              <Grid.RowDefinitions>
                <RowDefinition x:Uid="RowDefinition_1" Height="Auto"/>
                <RowDefinition x:Uid="RowDefinition_2" Height="Auto"/>
                <RowDefinition x:Uid="RowDefinition_3" Height="*"/>
              </Grid.RowDefinitions>
              <vs:DockTarget x:Uid="TabPanelTarget" DockTargetType="FillPreview"
                             automation:AutomationElement.Id="PaletteHeaderDockTarget">
                <vs:DockTarget.AdornmentTarget>
                  <Binding ElementName="TabGroupControlPanel"/>
                </vs:DockTarget.AdornmentTarget>
                <vs:DragUndockHeader x:Name="DragUndockHeader" x:Uid="DragUndockHeader" IsWindowTitleBar="false"
                                     vs:MouseCommands.MouseCommandAction="LeftDoubleClick"
                                     vs:MouseCommands.MouseCommand="{x:Static vs:ViewCommands.ToggleDocked}">
                  <vs:DragUndockHeader.ViewElement>
                    <Binding/>
                  </vs:DragUndockHeader.ViewElement>
                  <vs:MouseCommands.MouseCommandParameter>
                    <Binding/>
                  </vs:MouseCommands.MouseCommandParameter>
                  <Grid x:Uid="Grid_2">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Uid="RowDefinition_4" Height="{DynamicResource HeaderBufferSize}"/>
                      <RowDefinition x:Uid="RowDefinition_5" Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Uid="ColumnDefinition_1" Width="*"/>
                      <ColumnDefinition x:Uid="ColumnDefinition_2" Width="Auto"/>
                      <ColumnDefinition x:Uid="ColumnDefinition_3" Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Border x:Name="HighlightBackground" x:Uid="HighlightBackground" CornerRadius="4,4,0,0"
                            FrameworkElement.Margin="0,1,0,0" Background="{DynamicResource PaletteHeaderBackgroundBrush}"
                            Grid.RowSpan="2" Grid.ColumnSpan="3"/>
                    <vs:SingleRowTabPanel x:Uid="TabPanel" Grid.Row="1" Grid.Column="0"
                                          FrameworkElement.Margin="{DynamicResource PaletteTabGroupMargin}" Panel.IsItemsHost="true"/>
                    <Button x:Uid="AutoHideButton" automation:AutomationElement.Id="PaletteAutoHideButton"
                            FrameworkElement.Style="{DynamicResource AutoHideButtonStyle}" Grid.Row="1" Grid.Column="1"
                            FrameworkElement.Margin="0,3,2,3">
                      <ButtonBase.CommandParameter>
                        <Binding/>
                      </ButtonBase.CommandParameter>
                    </Button>
                    <Button x:Uid="CloseButton" automation:AutomationElement.Id="PaletteCloseButton"
                            FrameworkElement.Style="{DynamicResource CloseButton8x8Style}"
                            ButtonBase.Command="{x:Static vs:ViewCommands.HideViewCommand}"
                            FrameworkElement.ToolTip="Close all" Grid.Row="1" Grid.Column="2" FrameworkElement.Margin="0,3,2,3">
                      <ButtonBase.CommandParameter>
                        <Binding/>
                      </ButtonBase.CommandParameter>
                    </Button>
                  </Grid>
                </vs:DragUndockHeader>
              </vs:DockTarget>
              <Border x:Uid="Border_1" Background="{DynamicResource PaletteTabSelectedBackgroundBrush}" Grid.Row="1"
                      CornerRadius="{DynamicResource PaletteHeaderCornerRounding}">
                <ContentControl x:Uid="ContentControl_2" FrameworkElement.Height="{DynamicResource PaletteHeaderHeight}">
                  <ContentControl.Content>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                             Path="SelectedItem.Content.(userinterface:PaletteRegistry.PaletteHeaderContent)"/>
                  </ContentControl.Content>
                  <FrameworkElement.DataContext>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="SelectedItem.Content.DataContext"/>
                  </FrameworkElement.DataContext>
                  <UIElement.Visibility>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                             Path="SelectedItem.Content.(userinterface:PaletteRegistry.PaletteHeaderContent)"
                             Converter="{StaticResource NullToVisibilityConverter}" BindingBase.FallbackValue="Collapsed"/>
                  </UIElement.Visibility>
                </ContentControl>
              </Border>
              <ContentPresenter x:Name="TabGroupContent" x:Uid="TabGroupContent" ContentSource="SelectedContent" Grid.Row="2"/>
            </Grid>
          </vs:DockTarget>
          <ControlTemplate.Triggers>
            <MultiTrigger x:Uid="MultiTrigger_2">
              <MultiTrigger.Conditions>
                <Condition x:Uid="Condition_3" Property="vs:FloatingWindow.IsFloating" Value="true"/>
                <Condition x:Uid="Condition_4" Property="vs:FloatingWindow.HasMultipleOnScreenViews" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter x:Uid="Setter_31" TargetName="DragUndockHeader" Property="vs:DragUndockHeader.IsWindowTitleBar"
                      Value="true"/>
            </MultiTrigger>
            <Trigger x:Uid="Trigger_1" Property="vs:FloatingWindow.IsFloating" Value="true">
              <Setter x:Uid="Setter_3" TargetName="PaletteFrameDockTarget" Property="vs:DockTarget.DockTargetType"
                      Value="CenterOnly"/>
            </Trigger>
            <Trigger x:Uid="Trigger_2" SourceName="HighlightBackground" Property="UIElement.IsMouseOver" Value="true">
              <Setter x:Uid="Setter_6" TargetName="HighlightBackground"
                      Value="{DynamicResource PaletteHeaderMouseOverBackgroundBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger x:Uid="Trigger_3" SourceName="DragUndockHeader" Property="vs:DragUndockHeader.IsDragging"
                     Value="true">
              <Setter x:Uid="Setter_1641" TargetName="HighlightBackground"
                      Value="{DynamicResource PaletteHeaderPressedBackgroundBrush}" Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>