<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:Microsoft.Expression.Framework.Controls;assembly=Shopdrawing.Framework">
    <!--<Style x:Uid="Style_163" TargetType="{x:Type Button}">
        <Setter x:Uid="Setter_1988" Property="Control.Padding" Value="1,1,1,2"/>
        <Setter x:Uid="Setter_1560" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_100" TargetType="{x:Type Button}">
                    <Border x:Name="ButtonTemplateGrid" x:Uid="Border_69" Background="{TemplateBinding Control.Background}"
                  CornerRadius="3" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
                        <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_54" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              FrameworkElement.Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_59" Property="Button.IsDefaulted" Value="true">
                            <Setter x:Uid="Setter_366" Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1049" Value="{DynamicResource ButtonIsDefaultBorderBrush}"
                      Property="Control.BorderBrush"/>
                            <Setter x:Uid="Setter_1705" Property="Control.BorderThickness" Value="2,2,2,2"/>
                            <Setter x:Uid="Setter_1050" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1115" Property="UIElement.IsFocused" Value="true">
                            <Setter x:Uid="Setter_1688" Value="{DynamicResource ButtonDefaultBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1689" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
                            <Setter x:Uid="Setter_1562" Value="{DynamicResource ButtonIsFocusedBorderBrush}"
                      Property="Control.BorderBrush"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1135" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_1690" Value="{DynamicResource ButtonMouseOverBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1691" Value="{DynamicResource ButtonMouseOverBorderBrush}"
                      Property="Control.BorderBrush"/>
                            <Setter x:Uid="Setter_1692" Value="{DynamicResource ButtonMouseOverTextBrush}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1136" Property="ButtonBase.IsPressed" Value="true">
                            <Setter x:Uid="Setter_1694" Value="{DynamicResource ButtonPressedBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1695" Value="{DynamicResource ButtonPressedBorderBrush}"
                      Property="Control.BorderBrush"/>
                            <Setter x:Uid="Setter_1696" Value="{DynamicResource ButtonDefaultTextBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1137" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_1699" Value="{DynamicResource ButtonDisabledBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1700" Value="{DynamicResource ButtonDisabledBorderBrush}"
                      Property="Control.BorderBrush"/>
                            <Setter x:Uid="Setter_1701" Value="{DynamicResource ButtonDisabledTextBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <Style x:Key="ExpressionDialogButton" x:Uid="Style_167" TargetType="{x:Type Button}">
        <Setter x:Uid="Setter_1583" Property="Control.Background" Value="#E6E6E6"/>
        <Setter x:Uid="Setter_1584" Property="Control.BorderBrush" Value="#CCCCCC"/>
        <Setter x:Uid="Setter_1585" Property="Control.Foreground" Value="#595959"/>
        <Setter x:Uid="Setter_1586" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter x:Uid="Setter_1587" Property="FrameworkElement.MinWidth" Value="50"/>
        <Setter x:Uid="Setter_1588" Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter x:Uid="Setter_2007" Property="Control.Padding" Value="1,0,1,1"/>
        <Setter x:Uid="Setter_1589" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
        <Setter x:Uid="Setter_1590" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
        <Setter x:Uid="Setter_1591" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
        <Setter x:Uid="Setter_1592" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_101" TargetType="{x:Type Button}">
                    <Border x:Name="ButtonTemplateGrid" x:Uid="Border_71" Background="{TemplateBinding Control.Background}"
                  CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  FrameworkElement.MinHeight="{TemplateBinding FrameworkElement.MinHeight}"
                  FrameworkElement.MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
                        <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_55" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              RecognizesAccessKey="true" FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_1120" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_1593" Property="Control.Background" Value="#D9D9D9"/>
                            <Setter x:Uid="Setter_1594" Property="Control.Foreground" Value="#333333"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1178" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_2004" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1179" Property="UIElement.IsFocused" Value="true">
                            <Setter x:Uid="Setter_2005" Property="Control.BorderBrush" Value="#595959"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1121" Property="ButtonBase.IsPressed" Value="true">
                            <Setter x:Uid="Setter_1596" Property="Control.Background" Value="#A6A6A6"/>
                            <Setter x:Uid="Setter_1597" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DialogButton" x:Uid="Style_142" TargetType="{x:Type Button}"
         BasedOn="{StaticResource {x:Type Button}}">
        <Setter x:Uid="Setter_1402" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
        <Setter x:Uid="Setter_1403" Property="FrameworkElement.MinWidth" Value="75"/>
        <Setter x:Uid="Setter_1487" Property="FrameworkElement.MinHeight" Value="20"/>
    </Style>
    <Style x:Uid="Style_167" TargetType="{x:Type Button}">
        <Setter x:Uid="Setter_1583" Property="Control.Background" Value="#E6E6E6"/>
        <Setter x:Uid="Setter_1584" Property="Control.BorderBrush" Value="#CCCCCC"/>
        <Setter x:Uid="Setter_1585" Property="Control.Foreground" Value="#595959"/>
        <Setter x:Uid="Setter_1586" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter x:Uid="Setter_1587" Property="FrameworkElement.MinWidth" Value="50"/>
        <Setter x:Uid="Setter_1588" Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter x:Uid="Setter_2007" Property="Control.Padding" Value="1,0,1,1"/>
        <Setter x:Uid="Setter_1589" Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
        <Setter x:Uid="Setter_1590" Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
        <Setter x:Uid="Setter_1591" Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
        <Setter x:Uid="Setter_1592" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_101" TargetType="{x:Type Button}">
                    <Border x:Name="ButtonTemplateGrid" x:Uid="Border_71" Background="{TemplateBinding Control.Background}"
                  CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  FrameworkElement.MinHeight="{TemplateBinding FrameworkElement.MinHeight}"
                  FrameworkElement.MinWidth="{TemplateBinding FrameworkElement.MinWidth}">
                        <ContentPresenter x:Name="Content" x:Uid="ContentPresenter_55" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              FrameworkElement.HorizontalAlignment="Center" FrameworkElement.VerticalAlignment="Center"
                              RecognizesAccessKey="true" FrameworkElement.Margin="{TemplateBinding Control.Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_1120" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_1593" Property="Control.Background" Value="#D9D9D9"/>
                            <Setter x:Uid="Setter_1594" Property="Control.Foreground" Value="#333333"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1178" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_2004" Property="UIElement.Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1179" Property="UIElement.IsFocused" Value="true">
                            <Setter x:Uid="Setter_2005" Property="Control.BorderBrush" Value="#595959"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_1121" Property="ButtonBase.IsPressed" Value="true">
                            <Setter x:Uid="Setter_1596" Property="Control.Background" Value="#A6A6A6"/>
                            <Setter x:Uid="Setter_1597" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButton"
             TargetType="{x:Type Button}"
             BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="ButtonTemplateGrid"
                                 Background="{TemplateBinding Control.Background}"
                                 CornerRadius="3"
                                 BorderBrush="{TemplateBinding Control.BorderBrush}">
                        <Controls:Icon Name="Icon"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Margin="1"
                                         Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource Text1Brush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="Button.IsDefault" Value="True">
                            <Setter Value="{DynamicResource PaletteBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource ButtonDefaultedBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
                            <Setter Property="Control.BorderThickness" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True"/>
                                <Condition Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon"
                                         Value="{Binding Path=(Controls:Icon.SelectedImage),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                         Property="Image.Source"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource ButtonOverBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource RecessedBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Value="{DynamicResource RecessedBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource DarkBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource Text1Brush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Value="{DynamicResource PaneBrush}" Property="Control.Background"/>
                            <Setter Value="{DynamicResource RecessedBrush}" Property="Control.BorderBrush"/>
                            <Setter Value="{DynamicResource ButtonDefaultBrush}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="FlatIconButtonStyle" x:Uid="Style_201" TargetType="{x:Type ButtonBase}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter x:Uid="Setter_1854" Property="Control.Background" Value="Transparent"/>
        <Setter x:Uid="Setter_1846" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter x:Uid="Setter_1855" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_119" TargetType="{x:Type ButtonBase}">
                    <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_12"
                         Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"
                         SourceBrush="{TemplateBinding Controls:Icon.DeselectedDrawingBrush}"
                         RedChroma="{TemplateBinding Controls:Icon.RedChroma}"
                         GreenChroma="{TemplateBinding Controls:Icon.GreenChroma}"
                         BlueChroma="{TemplateBinding Controls:Icon.BlueChroma}"/>
                    <ControlTemplate.Triggers>
                        <MultiTrigger x:Uid="MultiTrigger_25">
                            <MultiTrigger.Conditions>
                                <Condition x:Uid="Condition_61" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition x:Uid="Condition_62" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter x:Uid="Setter_1856" TargetName="Icon" Property="Image.Source">
                                <Setter.Value>
                                    <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                                </Setter.Value>
                            </Setter>
                            <Setter x:Uid="Setter_1938" TargetName="Icon" Property="Controls:Icon.SourceBrush">
                                <Setter.Value>
                                    <Binding Path="(Controls:Icon.SelectedDrawingBrush)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger x:Uid="Trigger_1159" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_1857" TargetName="Icon" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FlatMenuIconButtonStyle" x:Uid="Style_202" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter x:Uid="Setter_1858" Property="Control.Background" Value="Transparent"/>
        <Setter x:Uid="Setter_1859" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_120" TargetType="{x:Type Button}">
                    <Grid x:Name="Root" x:Uid="Root" Panel.Background="{TemplateBinding Control.Background}">
                        <StackPanel x:Uid="StackPanel_9" FrameworkElement.HorizontalAlignment="Center"
                        FrameworkElement.VerticalAlignment="Center" Orientation="Horizontal">
                            <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_13"
                             Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}"/>
                            <Path x:Name="DropDownArrow" x:Uid="Path_27" FrameworkElement.Margin="1 1 0 0"
                    FrameworkElement.Style="{DynamicResource DropDownArrowPath}"
                    Shape.Fill="{DynamicResource FlatMenuIconArrowNormalBrush}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_1160" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_1861" TargetName="DropDownArrow"
                      Value="{DynamicResource FlatMenuIconArrowMouseOverBrush}" Property="Shape.Fill"/>
                        </Trigger>
                        <MultiTrigger x:Uid="MultiTrigger_26">
                            <MultiTrigger.Conditions>
                                <Condition x:Uid="Condition_63" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition x:Uid="Condition_64" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter x:Uid="Setter_1860" TargetName="Icon" Property="Image.Source">
                                <Setter.Value>
                                    <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger x:Uid="Trigger_1161" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_1862" TargetName="Root" Property="UIElement.Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FlatToggleIconButtonStyle" x:Uid="Style_203" TargetType="{x:Type ToggleButton}">
        <Style.BasedOn>
            <x:NullExtension/>
        </Style.BasedOn>
        <Setter x:Uid="Setter_1971" Property="Control.Background"
            Value="{DynamicResource FlatToggleNormalBackgroundBrush}"/>
        <Setter x:Uid="Setter_1863" Property="Control.Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_121" TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border" x:Uid="Border" BorderBrush="{DynamicResource FlatToggleButtonInnerBorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="1">
                        <Controls:Icon x:Name="Icon" x:Uid="Controls:Icon_14"
                           Image.Source="{TemplateBinding Controls:Icon.DeselectedImage}">
                            <FrameworkElement.Width>
                                <Binding Path="Source.PixelWidth" RelativeSource="{RelativeSource Self}"/>
                            </FrameworkElement.Width>
                            <FrameworkElement.Height>
                                <Binding Path="Source.PixelHeight" RelativeSource="{RelativeSource Self}"/>
                            </FrameworkElement.Height>
                            <FrameworkElement.Margin>
                                <Binding ElementName="Border" Path="BorderThickness" Converter="{StaticResource NegatingThicknessConverter}"/>
                            </FrameworkElement.Margin>
                        </Controls:Icon>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger x:Uid="Trigger_1162" Property="ToggleButton.IsChecked" Value="true">
                            <Setter x:Uid="Setter_1864" TargetName="Icon" Property="Image.Source">
                                <Setter.Value>
                                    <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                                </Setter.Value>
                            </Setter>
                            <Setter x:Uid="Setter_1865" Value="{DynamicResource FlatToggleCheckedBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1866" TargetName="Border" Value="{DynamicResource FlatToggleCheckedBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter x:Uid="Setter_1925" TargetName="Border" Property="Border.BorderThickness" Value="0"/>
                        </Trigger>
                        <MultiTrigger x:Uid="MultiTrigger_27">
                            <MultiTrigger.Conditions>
                                <Condition x:Uid="Condition_50" Property="ToggleButton.IsChecked" Value="false"/>
                                <Condition x:Uid="Condition_65" Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition x:Uid="Condition_66" Property="Controls:Icon.ShowSelectedIconOnMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter x:Uid="Setter_1867" TargetName="Icon" Property="Image.Source">
                                <Setter.Value>
                                    <Binding Path="(Controls:Icon.SelectedImage)" RelativeSource="{RelativeSource TemplatedParent}"
                           Mode="OneWay"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger x:Uid="MultiTrigger_21">
                            <MultiTrigger.Conditions>
                                <Condition x:Uid="Condition_53" Property="ToggleButton.IsChecked" Value="false"/>
                                <Condition x:Uid="Condition_54" Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter x:Uid="Setter_1868" Value="{DynamicResource FlatToggleHoverBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1869" TargetName="Border" Value="{DynamicResource FlatToggleHoverBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter x:Uid="Setter_1896" TargetName="Border" Property="Border.BorderThickness" Value="0"/>
                        </MultiTrigger>
                        <Trigger x:Uid="Trigger_1163" Property="UIElement.IsEnabled" Value="false">
                            <Setter x:Uid="Setter_1870" TargetName="Icon" Property="UIElement.Opacity" Value="0.6"/>
                            <Setter x:Uid="Setter_1871" Value="{DynamicResource FlatToggleDisableBackgroundBrush}"
                      Property="Control.Background"/>
                            <Setter x:Uid="Setter_1872" TargetName="Border" Value="{DynamicResource FlatToggleDisableBorderBrush}"
                      Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>